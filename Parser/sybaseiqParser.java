// Generated by ANTLR 4.1
package de.analysis.parser;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class sybaseiqParser extends Parser {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ACTION=1, ADD=2, ALL=3, ALTER=4, AND=5, ANY=6, APPEND=7, AS=8, ASC=9, 
		ASIS=10, AUTHORIZATION=11, AUTOINCREMENT=12, BACKUP=13, BEGIN=14, BETWEEN=15, 
		BIGINT=16, BIGINTN=17, BIT=18, BLOB=19, BOOLEAN=20, BREAK=21, BROWSE=22, 
		BULK=23, BY=24, CALL=25, CASCADE=26, CASE=27, CHANGETABLE=28, CHANGES=29, 
		CHAR=30, CHARACTER=31, CHECK=32, CHECKPOINT=33, CLIENT=34, CLOB=35, CLOSE=36, 
		CLUSTERED=37, CMP=38, COALESCE=39, COLLATE=40, COLUMN=41, COMMENT=42, 
		COMMIT=43, COMPUTE=44, CONNECTION=45, CONSTRAINT=46, CONSOLE=47, CONTAINS=48, 
		CONTAINSTABLE=49, CONTINUE=50, CONVERT=51, CREATE=52, CREATE_SCHEMA=53, 
		CREATE_NOTE=54, CREATE_ASSOCIATION=55, CROSS=56, CURRENT=57, CURRENT_DATE=58, 
		CURRENT_TIME=59, CURRENT_TIMESTAMP=60, CURRENT_USER=61, CURSOR=62, DATA=63, 
		DATABASE=64, DATE=65, DATETIME=66, DATETIME2=67, DATETIMN=68, DATETIMEOFFSET=69, 
		DBCC=70, DEALLOCATE=71, DEBUG=72, DECIMALN=73, DECLARE=74, DECRYPT=75, 
		DEFAULT=76, DEFINER=77, DELETE=78, DELIMITED=79, DENY=80, DESC=81, DISK=82, 
		DISTINCT=83, DISTRIBUTED=84, DOUBLE=85, DROP=86, DTTM=87, DUMP=88, ELSE=89, 
		ELSEIF=90, ENCODING=91, END=92, ENDIF=93, ERRLVL=94, ESCAPE=95, EVENT=96, 
		EXCEPT=97, EXCEPTION=98, EXEC=99, EXECUTE=100, EXISTING=101, EXISTS=102, 
		EXIT=103, EXTERNAL=104, FETCH=105, FILE=106, FILLFACTOR=107, FIXED=108, 
		FLOATN=109, FOR=110, FORCESEEK=111, FOREIGN=112, FORMAT=113, FREETEXT=114, 
		FREETEXTTABLE=115, FROM=116, FULL=117, FUNCTION=118, GOTO=119, GRANT=120, 
		GRANT_PERMISSION=121, GROUP=122, HAVING=123, HEXADECIMAL=124, HG=125, 
		HNG=126, HTML=127, IDENTITY=128, IDENTITYCOL=129, IDENTITY_INSERT=130, 
		IF=131, IGNORE=132, IMAGE=133, IMMEDIATE=134, IN=135, INFO=136, INOUT=137, 
		INDEX=138, INNER=139, INSERT=140, INT=141, INTN=142, INTEGER=143, INTERSECT=144, 
		INTO=145, INVOKER=146, IQ=147, IS=148, JOIN=149, KEY=150, KILL=151, LEFT=152, 
		LF=153, LIKE=154, LIMIT=155, LINENO=156, LOAD=157, LOCATION=158, LOG=159, 
		MERGE=160, MESSAGE=161, MONEY=162, MONEYN=163, NAMES=164, NATIONAL=165, 
		NCHAR=166, NO=167, NOCHECK=168, NONCLUSTERED=169, NOT=170, NOTIFY=171, 
		NTEXT=172, NUMERIC=173, NUMERICN=174, NULL=175, NULLIF=176, NVARCHAR=177, 
		OF=178, OFF=179, OFFSETS=180, ON=181, OPEN=182, OPENDATASOURCE=183, OPENQUERY=184, 
		OPENROWSET=185, OPENXML=186, OPTION=187, OR=188, ORDER=189, OTHERS=190, 
		OUTER=191, OVER=192, PACKETSIZE=193, PARAMETERS=194, PARALLEL=195, PASSWORD=196, 
		PERCENT=197, PIVOT=198, PLAN=199, PRECISION=200, PRESERVE=201, PRIMARY=202, 
		PRINT=203, PROC=204, PROCEDURE=205, PUBLIC=206, QUOTE=207, QUOTED_IDENTIFIER=208, 
		RAISERROR=209, READ=210, READTEXT=211, RECONFIGURE=212, REFERENCES=213, 
		REPLACE=214, REPLICATION=215, RESIGNAL=216, RESTORE=217, RESTRICT=218, 
		RESULT=219, RESUME=220, RETURN=221, REVERT=222, REVOKE=223, RIGHT=224, 
		ROLE=225, ROLLBACK=226, ROWCOUNT=227, ROWGUIDCOL=228, RULE=229, SAVE=230, 
		SCHEMA=231, SECURITY=232, SECURITYAUDIT=233, SELECT=234, SEMANTICKEYPHRASETABLE=235, 
		SEMANTICSIMILARITYDETAILSTABLE=236, SEMANTICSIMILARITYTABLE=237, SESSION_USER=238, 
		SET=239, SETUSER=240, SHUTDOWN=241, SKIP=242, SMALLINT=243, SMALLINTN=244, 
		SMALLMONEY=245, SMALLDATETIME=246, SYSNAME=247, SOME=248, SQL=249, STATISTICS=250, 
		STATUS=251, SYSTEM=252, SYSTEM_USER=253, TABLE=254, TABLESAMPLE=255, TEMPORARY=256, 
		TEXT=257, TEXTSIZE=258, THEN=259, TINYINT=260, TO=261, TOP=262, TRAN=263, 
		TRANSACTION=264, TRANSACTIONAL=265, TRIGGER=266, TRUNCATE=267, TRY_CONVERT=268, 
		TSEQUAL=269, TYP_MONEY=270, TYP_VERBRAUCH=271, TYP_ZEITDIMENSION=272, 
		TYP_ZEITWERT=273, UNION=274, UNIQUE=275, UNIQUEIDENTIFIER=276, UNPIVOT=277, 
		UNSIGNED=278, UPDATE=279, UPDATETEXT=280, USE=281, USER=282, VALUE=283, 
		VALUES=284, VARBINARY=285, VARCHAR=286, VARYING=287, VERBOSE=288, VIEW=289, 
		WAITFOR=290, WARNING=291, WHEN=292, WHERE=293, WHILE=294, WIDTHS=295, 
		WITH=296, WITHIN=297, WRITETEXT=298, WORD=299, ABSOLUTE=300, APPLY=301, 
		AUTO=302, AVG=303, BASE64=304, BINARY_CHECKSUM=305, CALLER=306, CAST=307, 
		CATCH=308, CHECKSUM=309, CHECKSUM_AGG=310, COMMITTED=311, CONCAT=312, 
		COOKIE=313, COUNT=314, COUNT_BIG=315, DATEADD=316, DATEDIFF=317, DATENAME=318, 
		DATEPART=319, DELAY=320, DELETED=321, DENSE_RANK=322, DISABLE=323, DYNAMIC=324, 
		ENCRYPTED=325, ENCRYPTION=326, FAST=327, FAST_FORWARD=328, FINALLY=329, 
		FIRST=330, FOLLOWING=331, FORWARD_ONLY=332, FULLSCAN=333, GLOBAL=334, 
		GO=335, GROUPING=336, GROUPING_ID=337, HASH=338, INSENSITIVE=339, INSERTED=340, 
		ISOLATION=341, KEEPFIXED=342, KEYSET=343, LAST=344, LEVEL=345, LOCAL=346, 
		LOCK_ESCALATION=347, LOGIN=348, LOOP=349, MANAGE_PERMISSION=350, MARK=351, 
		MAX=352, MIN=353, MIN_ACTIVE_ROWVERSION=354, MOD=355, MODIFY=356, NEXT=357, 
		NAME=358, NOCOUNT=359, NOEXPAND=360, NORECOMPUTE=361, NTILE=362, NUMBER=363, 
		OFFSET=364, ONLY=365, OPTIMISTIC=366, OPTIMIZE=367, OUT=368, OUTPUT=369, 
		OWNER=370, PARTITION=371, PATH=372, PRECEDING=373, PRIOR=374, RANGE=375, 
		RANK=376, READONLY=377, READ_ONLY=378, RECOMPILE=379, RELATIVE=380, REMOTE=381, 
		REPEATABLE=382, ROOT=383, ROW=384, ROWGUID=385, ROWS=386, ROW_NUMBER=387, 
		SAMPLE=388, SCHEMABINDING=389, SCROLL=390, SCROLL_LOCKS=391, SELF=392, 
		SERIALIZABLE=393, SNAPSHOT=394, SPATIAL_WINDOW_MAX_CELLS=395, STATIC=396, 
		STATS_STREAM=397, STDEV=398, STDEVP=399, SUM=400, THROW=401, TIES=402, 
		TIME=403, TIMESTAMP=404, TRY=405, TYPE=406, TYPE_WARNING=407, UNBOUNDED=408, 
		UNCOMMITTED=409, UNKNOWN=410, USING=411, VAR=412, VARP=413, VIEW_METADATA=414, 
		WORK=415, XML=416, XMLNAMESPACES=417, DOLLAR_ACTION=418, SPACE=419, BLOCK_COMMENT=420, 
		LINE_COMMENT=421, STRING_COMMENT=422, DOUBLE_QUOTE_ID=423, SQUARE_BRACKET_ID=424, 
		LOCAL_ID=425, DECIMAL=426, ID=427, STRING=428, BINARY=429, FLOAT=430, 
		REAL=431, EQUAL=432, GREATER=433, LESS=434, EXCLAMATION=435, PLUS_ASSIGN=436, 
		MINUS_ASSIGN=437, MULT_ASSIGN=438, DIV_ASSIGN=439, MOD_ASSIGN=440, AND_ASSIGN=441, 
		XOR_ASSIGN=442, OR_ASSIGN=443, DOT=444, UNDERLINE=445, AT=446, SHARP=447, 
		DOLLAR=448, LR_BRACKET=449, RR_BRACKET=450, COMMA=451, SEMI=452, COLON=453, 
		STAR=454, DIVIDE=455, MODULE=456, PLUS=457, MINUS=458, BIT_NOT=459, BIT_OR=460, 
		BIT_AND=461, BIT_XOR=462;
	public static final String[] tokenNames = {
		"<INVALID>", "ACTION", "ADD", "ALL", "ALTER", "AND", "ANY", "APPEND", 
		"AS", "ASC", "ASIS", "AUTHORIZATION", "AUTOINCREMENT", "BACKUP", "BEGIN", 
		"BETWEEN", "BIGINT", "BIGINTN", "BIT", "BLOB", "BOOLEAN", "BREAK", "BROWSE", 
		"BULK", "BY", "CALL", "CASCADE", "CASE", "CHANGETABLE", "CHANGES", "CHAR", 
		"CHARACTER", "CHECK", "CHECKPOINT", "CLIENT", "CLOB", "CLOSE", "CLUSTERED", 
		"CMP", "COALESCE", "COLLATE", "COLUMN", "COMMENT", "COMMIT", "COMPUTE", 
		"CONNECTION", "CONSTRAINT", "CONSOLE", "CONTAINS", "CONTAINSTABLE", "CONTINUE", 
		"CONVERT", "CREATE", "CREATE_SCHEMA", "CREATE_NOTE", "CREATE_ASSOCIATION", 
		"CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"CURRENT_USER", "CURSOR", "DATA", "DATABASE", "DATE", "DATETIME", "DATETIME2", 
		"DATETIMN", "DATETIMEOFFSET", "DBCC", "DEALLOCATE", "DEBUG", "DECIMALN", 
		"DECLARE", "DECRYPT", "DEFAULT", "DEFINER", "DELETE", "DELIMITED", "DENY", 
		"DESC", "DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DROP", "DTTM", "DUMP", 
		"ELSE", "ELSEIF", "ENCODING", "END", "ENDIF", "ERRLVL", "ESCAPE", "EVENT", 
		"EXCEPT", "EXCEPTION", "EXEC", "EXECUTE", "EXISTING", "EXISTS", "EXIT", 
		"EXTERNAL", "FETCH", "FILE", "FILLFACTOR", "FIXED", "FLOATN", "FOR", "FORCESEEK", 
		"FOREIGN", "FORMAT", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", 
		"GOTO", "GRANT", "GRANT_PERMISSION", "GROUP", "HAVING", "HEXADECIMAL", 
		"HG", "HNG", "HTML", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", "IF", 
		"IGNORE", "IMAGE", "IMMEDIATE", "IN", "INFO", "INOUT", "INDEX", "INNER", 
		"INSERT", "INT", "INTN", "INTEGER", "INTERSECT", "INTO", "INVOKER", "IQ", 
		"IS", "JOIN", "KEY", "KILL", "LEFT", "LF", "LIKE", "LIMIT", "LINENO", 
		"LOAD", "LOCATION", "LOG", "MERGE", "MESSAGE", "MONEY", "MONEYN", "NAMES", 
		"NATIONAL", "NCHAR", "NO", "NOCHECK", "NONCLUSTERED", "NOT", "NOTIFY", 
		"NTEXT", "NUMERIC", "NUMERICN", "NULL", "NULLIF", "NVARCHAR", "OF", "OFF", 
		"OFFSETS", "ON", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", 
		"OPENXML", "OPTION", "OR", "ORDER", "OTHERS", "OUTER", "OVER", "PACKETSIZE", 
		"PARAMETERS", "PARALLEL", "PASSWORD", "PERCENT", "PIVOT", "PLAN", "PRECISION", 
		"PRESERVE", "PRIMARY", "PRINT", "PROC", "PROCEDURE", "PUBLIC", "QUOTE", 
		"QUOTED_IDENTIFIER", "RAISERROR", "READ", "READTEXT", "RECONFIGURE", "REFERENCES", 
		"REPLACE", "REPLICATION", "RESIGNAL", "RESTORE", "RESTRICT", "RESULT", 
		"RESUME", "RETURN", "REVERT", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROWCOUNT", 
		"ROWGUIDCOL", "RULE", "SAVE", "SCHEMA", "SECURITY", "SECURITYAUDIT", "SELECT", 
		"SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", 
		"SESSION_USER", "SET", "SETUSER", "SHUTDOWN", "SKIP", "SMALLINT", "SMALLINTN", 
		"SMALLMONEY", "SMALLDATETIME", "SYSNAME", "SOME", "SQL", "STATISTICS", 
		"STATUS", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLESAMPLE", "TEMPORARY", 
		"TEXT", "TEXTSIZE", "THEN", "TINYINT", "TO", "TOP", "TRAN", "TRANSACTION", 
		"TRANSACTIONAL", "TRIGGER", "TRUNCATE", "TRY_CONVERT", "TSEQUAL", "TYP_MONEY", 
		"TYP_VERBRAUCH", "TYP_ZEITDIMENSION", "TYP_ZEITWERT", "UNION", "UNIQUE", 
		"UNIQUEIDENTIFIER", "UNPIVOT", "UNSIGNED", "UPDATE", "UPDATETEXT", "USE", 
		"USER", "VALUE", "VALUES", "VARBINARY", "VARCHAR", "VARYING", "VERBOSE", 
		"VIEW", "WAITFOR", "WARNING", "WHEN", "WHERE", "WHILE", "WIDTHS", "WITH", 
		"WITHIN", "WRITETEXT", "WORD", "ABSOLUTE", "APPLY", "AUTO", "AVG", "BASE64", 
		"BINARY_CHECKSUM", "CALLER", "CAST", "CATCH", "CHECKSUM", "CHECKSUM_AGG", 
		"COMMITTED", "CONCAT", "COOKIE", "COUNT", "COUNT_BIG", "DATEADD", "DATEDIFF", 
		"DATENAME", "DATEPART", "DELAY", "DELETED", "DENSE_RANK", "DISABLE", "DYNAMIC", 
		"ENCRYPTED", "ENCRYPTION", "FAST", "FAST_FORWARD", "FINALLY", "FIRST", 
		"FOLLOWING", "FORWARD_ONLY", "FULLSCAN", "GLOBAL", "GO", "GROUPING", "GROUPING_ID", 
		"HASH", "INSENSITIVE", "INSERTED", "ISOLATION", "KEEPFIXED", "KEYSET", 
		"LAST", "LEVEL", "LOCAL", "LOCK_ESCALATION", "LOGIN", "LOOP", "MANAGE_PERMISSION", 
		"MARK", "MAX", "MIN", "MIN_ACTIVE_ROWVERSION", "MOD", "MODIFY", "NEXT", 
		"NAME", "NOCOUNT", "NOEXPAND", "NORECOMPUTE", "NTILE", "NUMBER", "OFFSET", 
		"ONLY", "OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", "OWNER", "PARTITION", 
		"PATH", "PRECEDING", "PRIOR", "RANGE", "RANK", "READONLY", "READ_ONLY", 
		"RECOMPILE", "RELATIVE", "REMOTE", "REPEATABLE", "ROOT", "ROW", "ROWGUID", 
		"ROWS", "ROW_NUMBER", "SAMPLE", "SCHEMABINDING", "SCROLL", "SCROLL_LOCKS", 
		"SELF", "SERIALIZABLE", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", "STATIC", 
		"STATS_STREAM", "STDEV", "STDEVP", "SUM", "THROW", "TIES", "TIME", "TIMESTAMP", 
		"TRY", "TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", "UNKNOWN", 
		"USING", "VAR", "VARP", "VIEW_METADATA", "WORK", "XML", "XMLNAMESPACES", 
		"DOLLAR_ACTION", "SPACE", "BLOCK_COMMENT", "LINE_COMMENT", "STRING_COMMENT", 
		"DOUBLE_QUOTE_ID", "SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", "ID", "STRING", 
		"BINARY", "FLOAT", "REAL", "'='", "'>'", "'<'", "'!'", "'+='", "'-='", 
		"'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'.'", "'_'", "'@'", "'#'", 
		"'$'", "'('", "')'", "','", "';'", "':'", "'*'", "'/'", "'%'", "'+'", 
		"'-'", "'~'", "'|'", "'&'", "'^'"
	};
	public static final int
		RULE_sybaseiq_file = 0, RULE_sql_clause = 1, RULE_dml_clause = 2, RULE_ddl_clause = 3, 
		RULE_cfl_statement = 4, RULE_another_statement = 5, RULE_delete_statement = 6, 
		RULE_insert_statement = 7, RULE_select_statement = 8, RULE_update_statement = 9, 
		RULE_output_clause = 10, RULE_output_format = 11, RULE_insert_load_options = 12, 
		RULE_insert_select_load_options = 13, RULE_constraint_type = 14, RULE_log_what = 15, 
		RULE_location_options = 16, RULE_create_index = 17, RULE_index_type = 18, 
		RULE_create_procedure = 19, RULE_procedure_param = 20, RULE_result_column = 21, 
		RULE_create_statistics = 22, RULE_create_table = 23, RULE_create_view = 24, 
		RULE_view_attribute = 25, RULE_alter_table = 26, RULE_add_list = 27, RULE_alter_database = 28, 
		RULE_database_option = 29, RULE_drop_index = 30, RULE_drop_procedure = 31, 
		RULE_drop_statistics = 32, RULE_drop_table = 33, RULE_drop_view = 34, 
		RULE_truncate_statement = 35, RULE_rowset_function_limited = 36, RULE_openquery = 37, 
		RULE_opendatasource = 38, RULE_declare_statement = 39, RULE_declare_local_temporary_table = 40, 
		RULE_cursor_statement = 41, RULE_execute_statement = 42, RULE_execute_statement_arg = 43, 
		RULE_execute_var_string = 44, RULE_set_statement = 45, RULE_transaction_statement = 46, 
		RULE_go_statement = 47, RULE_use_statement = 48, RULE_declare_type = 49, 
		RULE_unsigned_addition = 50, RULE_declare_local = 51, RULE_table_type_definition = 52, 
		RULE_column_def_table_constraint = 53, RULE_column_definition = 54, RULE_column_constraint = 55, 
		RULE_table_constraint = 56, RULE_index_options = 57, RULE_wot_statement = 58, 
		RULE_call_statement = 59, RULE_grant_rights = 60, RULE_permission_list = 61, 
		RULE_permission = 62, RULE_create_schema = 63, RULE_create_note = 64, 
		RULE_create_association = 65, RULE_comment_on_statement = 66, RULE_message_statement = 67, 
		RULE_replace_statement = 68, RULE_comment_on_object = 69, RULE_index_option = 70, 
		RULE_declare_cursor = 71, RULE_declare_set_cursor_common = 72, RULE_fetch_cursor = 73, 
		RULE_set_special = 74, RULE_expression = 75, RULE_constant_expression = 76, 
		RULE_subquery = 77, RULE_dml_table_source = 78, RULE_with_expression = 79, 
		RULE_common_table_expression = 80, RULE_update_elem = 81, RULE_then_condition_list = 82, 
		RULE_then_condition = 83, RULE_search_condition_list = 84, RULE_search_condition = 85, 
		RULE_search_condition_or = 86, RULE_search_condition_not = 87, RULE_predicate = 88, 
		RULE_query_expression = 89, RULE_union = 90, RULE_query_specification = 91, 
		RULE_order_by_clause = 92, RULE_for_clause = 93, RULE_xml_common_directives = 94, 
		RULE_order_by_expression = 95, RULE_group_by_item = 96, RULE_option_clause = 97, 
		RULE_option = 98, RULE_optimize_for_arg = 99, RULE_select_list = 100, 
		RULE_select_list_elem = 101, RULE_partition_by_clause = 102, RULE_table_source = 103, 
		RULE_table_source_item_joined = 104, RULE_table_source_item = 105, RULE_change_table = 106, 
		RULE_join_part = 107, RULE_table_name_with_hint = 108, RULE_rowset_function = 109, 
		RULE_bulk_option = 110, RULE_derived_table = 111, RULE_function_call = 112, 
		RULE_datepart = 113, RULE_as_table_alias = 114, RULE_table_alias = 115, 
		RULE_with_table_hints = 116, RULE_table_hint = 117, RULE_index_column_name = 118, 
		RULE_index_value = 119, RULE_column_alias_list = 120, RULE_column_alias = 121, 
		RULE_table_value_constructor = 122, RULE_expression_list = 123, RULE_case_expr = 124, 
		RULE_ranking_windowed_function = 125, RULE_aggregate_windowed_function = 126, 
		RULE_all_distinct_expression = 127, RULE_over_clause = 128, RULE_row_or_range_clause = 129, 
		RULE_window_frame_extent = 130, RULE_window_frame_bound = 131, RULE_window_frame_preceding = 132, 
		RULE_window_frame_following = 133, RULE_full_table_name = 134, RULE_table_name = 135, 
		RULE_procedure_name = 136, RULE_view_name = 137, RULE_func_proc_name = 138, 
		RULE_ddl_object = 139, RULE_full_column_name = 140, RULE_column_name_list = 141, 
		RULE_column_name = 142, RULE_cursor_name = 143, RULE_on_off = 144, RULE_clustered = 145, 
		RULE_null_notnull = 146, RULE_scalar_function_name = 147, RULE_default_value = 148, 
		RULE_constant = 149, RULE_number = 150, RULE_sign = 151, RULE_id = 152, 
		RULE_simple_id = 153, RULE_comparison_operator = 154, RULE_assignment_operator = 155;
	public static final String[] ruleNames = {
		"sybaseiq_file", "sql_clause", "dml_clause", "ddl_clause", "cfl_statement", 
		"another_statement", "delete_statement", "insert_statement", "select_statement", 
		"update_statement", "output_clause", "output_format", "insert_load_options", 
		"insert_select_load_options", "constraint_type", "log_what", "location_options", 
		"create_index", "index_type", "create_procedure", "procedure_param", "result_column", 
		"create_statistics", "create_table", "create_view", "view_attribute", 
		"alter_table", "add_list", "alter_database", "database_option", "drop_index", 
		"drop_procedure", "drop_statistics", "drop_table", "drop_view", "truncate_statement", 
		"rowset_function_limited", "openquery", "opendatasource", "declare_statement", 
		"declare_local_temporary_table", "cursor_statement", "execute_statement", 
		"execute_statement_arg", "execute_var_string", "set_statement", "transaction_statement", 
		"go_statement", "use_statement", "declare_type", "unsigned_addition", 
		"declare_local", "table_type_definition", "column_def_table_constraint", 
		"column_definition", "column_constraint", "table_constraint", "index_options", 
		"wot_statement", "call_statement", "grant_rights", "permission_list", 
		"permission", "create_schema", "create_note", "create_association", "comment_on_statement", 
		"message_statement", "replace_statement", "comment_on_object", "index_option", 
		"declare_cursor", "declare_set_cursor_common", "fetch_cursor", "set_special", 
		"expression", "constant_expression", "subquery", "dml_table_source", "with_expression", 
		"common_table_expression", "update_elem", "then_condition_list", "then_condition", 
		"search_condition_list", "search_condition", "search_condition_or", "search_condition_not", 
		"predicate", "query_expression", "union", "query_specification", "order_by_clause", 
		"for_clause", "xml_common_directives", "order_by_expression", "group_by_item", 
		"option_clause", "option", "optimize_for_arg", "select_list", "select_list_elem", 
		"partition_by_clause", "table_source", "table_source_item_joined", "table_source_item", 
		"change_table", "join_part", "table_name_with_hint", "rowset_function", 
		"bulk_option", "derived_table", "function_call", "datepart", "as_table_alias", 
		"table_alias", "with_table_hints", "table_hint", "index_column_name", 
		"index_value", "column_alias_list", "column_alias", "table_value_constructor", 
		"expression_list", "case_expr", "ranking_windowed_function", "aggregate_windowed_function", 
		"all_distinct_expression", "over_clause", "row_or_range_clause", "window_frame_extent", 
		"window_frame_bound", "window_frame_preceding", "window_frame_following", 
		"full_table_name", "table_name", "procedure_name", "view_name", "func_proc_name", 
		"ddl_object", "full_column_name", "column_name_list", "column_name", "cursor_name", 
		"on_off", "clustered", "null_notnull", "scalar_function_name", "default_value", 
		"constant", "number", "sign", "id", "simple_id", "comparison_operator", 
		"assignment_operator"
	};

	@Override
	public String getGrammarFileName() { return "sybaseiq.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public sybaseiqParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Sybaseiq_fileContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(sybaseiqParser.EOF, 0); }
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sybaseiq_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sybaseiq_file; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSybaseiq_file(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sybaseiq_fileContext sybaseiq_file() throws RecognitionException {
		Sybaseiq_fileContext _localctx = new Sybaseiq_fileContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_sybaseiq_file);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(315);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CALL) | (1L << CLOSE) | (1L << COMMENT) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (DEALLOCATE - 71)) | (1L << (DECLARE - 71)) | (1L << (DELETE - 71)) | (1L << (DROP - 71)) | (1L << (EXCEPTION - 71)) | (1L << (EXEC - 71)) | (1L << (EXECUTE - 71)) | (1L << (FETCH - 71)) | (1L << (FORCESEEK - 71)) | (1L << (GOTO - 71)) | (1L << (GRANT - 71)) | (1L << (IF - 71)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (INSERT - 140)) | (1L << (MESSAGE - 140)) | (1L << (OPEN - 140)) | (1L << (PARAMETERS - 140)) | (1L << (PRINT - 140)))) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (RAISERROR - 209)) | (1L << (RETURN - 209)) | (1L << (ROLLBACK - 209)) | (1L << (SAVE - 209)) | (1L << (SELECT - 209)) | (1L << (SET - 209)) | (1L << (TRUNCATE - 209)))) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (UPDATE - 279)) | (1L << (USE - 279)) | (1L << (WAITFOR - 279)) | (1L << (WHILE - 279)) | (1L << (WITH - 279)) | (1L << (ABSOLUTE - 279)) | (1L << (APPLY - 279)) | (1L << (AUTO - 279)) | (1L << (AVG - 279)) | (1L << (BASE64 - 279)) | (1L << (CALLER - 279)) | (1L << (CAST - 279)) | (1L << (CATCH - 279)) | (1L << (CHECKSUM_AGG - 279)) | (1L << (COMMITTED - 279)) | (1L << (CONCAT - 279)) | (1L << (COOKIE - 279)) | (1L << (COUNT - 279)) | (1L << (COUNT_BIG - 279)) | (1L << (DELAY - 279)) | (1L << (DELETED - 279)) | (1L << (DENSE_RANK - 279)) | (1L << (DISABLE - 279)) | (1L << (DYNAMIC - 279)) | (1L << (ENCRYPTION - 279)) | (1L << (FAST - 279)) | (1L << (FAST_FORWARD - 279)) | (1L << (FIRST - 279)) | (1L << (FOLLOWING - 279)) | (1L << (FORWARD_ONLY - 279)) | (1L << (FULLSCAN - 279)) | (1L << (GLOBAL - 279)) | (1L << (GO - 279)) | (1L << (GROUPING - 279)) | (1L << (GROUPING_ID - 279)) | (1L << (HASH - 279)) | (1L << (INSENSITIVE - 279)) | (1L << (INSERTED - 279)) | (1L << (ISOLATION - 279)) | (1L << (KEEPFIXED - 279)))) != 0) || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (KEYSET - 343)) | (1L << (LAST - 343)) | (1L << (LEVEL - 343)) | (1L << (LOCAL - 343)) | (1L << (LOCK_ESCALATION - 343)) | (1L << (LOGIN - 343)) | (1L << (LOOP - 343)) | (1L << (MARK - 343)) | (1L << (MAX - 343)) | (1L << (MIN - 343)) | (1L << (MODIFY - 343)) | (1L << (NEXT - 343)) | (1L << (NAME - 343)) | (1L << (NOCOUNT - 343)) | (1L << (NOEXPAND - 343)) | (1L << (NORECOMPUTE - 343)) | (1L << (NTILE - 343)) | (1L << (NUMBER - 343)) | (1L << (OFFSET - 343)) | (1L << (ONLY - 343)) | (1L << (OPTIMISTIC - 343)) | (1L << (OPTIMIZE - 343)) | (1L << (OUT - 343)) | (1L << (OUTPUT - 343)) | (1L << (OWNER - 343)) | (1L << (PARTITION - 343)) | (1L << (PATH - 343)) | (1L << (PRECEDING - 343)) | (1L << (PRIOR - 343)) | (1L << (RANGE - 343)) | (1L << (RANK - 343)) | (1L << (READONLY - 343)) | (1L << (READ_ONLY - 343)) | (1L << (RECOMPILE - 343)) | (1L << (RELATIVE - 343)) | (1L << (REMOTE - 343)) | (1L << (REPEATABLE - 343)) | (1L << (ROOT - 343)) | (1L << (ROW - 343)) | (1L << (ROWGUID - 343)) | (1L << (ROWS - 343)) | (1L << (ROW_NUMBER - 343)) | (1L << (SAMPLE - 343)) | (1L << (SCHEMABINDING - 343)) | (1L << (SCROLL - 343)) | (1L << (SCROLL_LOCKS - 343)) | (1L << (SELF - 343)) | (1L << (SERIALIZABLE - 343)) | (1L << (SNAPSHOT - 343)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 343)) | (1L << (STATIC - 343)) | (1L << (STATS_STREAM - 343)) | (1L << (STDEV - 343)) | (1L << (STDEVP - 343)) | (1L << (SUM - 343)) | (1L << (THROW - 343)) | (1L << (TIES - 343)) | (1L << (TIME - 343)) | (1L << (TRY - 343)) | (1L << (TYPE - 343)))) != 0) || ((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (TYPE_WARNING - 407)) | (1L << (UNBOUNDED - 407)) | (1L << (UNCOMMITTED - 407)) | (1L << (UNKNOWN - 407)) | (1L << (USING - 407)) | (1L << (VAR - 407)) | (1L << (VARP - 407)) | (1L << (VIEW_METADATA - 407)) | (1L << (WORK - 407)) | (1L << (XML - 407)) | (1L << (XMLNAMESPACES - 407)) | (1L << (DOUBLE_QUOTE_ID - 407)) | (1L << (SQUARE_BRACKET_ID - 407)) | (1L << (ID - 407)) | (1L << (LR_BRACKET - 407)))) != 0)) {
				{
				{
				setState(312); sql_clause();
				}
				}
				setState(317);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(318); match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_clauseContext extends ParserRuleContext {
		public Ddl_clauseContext ddl_clause() {
			return getRuleContext(Ddl_clauseContext.class,0);
		}
		public Another_statementContext another_statement() {
			return getRuleContext(Another_statementContext.class,0);
		}
		public Dml_clauseContext dml_clause() {
			return getRuleContext(Dml_clauseContext.class,0);
		}
		public Cfl_statementContext cfl_statement() {
			return getRuleContext(Cfl_statementContext.class,0);
		}
		public Sql_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSql_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_clauseContext sql_clause() throws RecognitionException {
		Sql_clauseContext _localctx = new Sql_clauseContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sql_clause);
		try {
			setState(324);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(320); dml_clause();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(321); ddl_clause();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(322); cfl_statement();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(323); another_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_clauseContext extends ParserRuleContext {
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDml_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_clauseContext dml_clause() throws RecognitionException {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_dml_clause);
		try {
			setState(330);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(326); delete_statement();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(327); insert_statement();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(328); select_statement();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(329); update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_clauseContext extends ParserRuleContext {
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Truncate_statementContext truncate_statement() {
			return getRuleContext(Truncate_statementContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Drop_statisticsContext drop_statistics() {
			return getRuleContext(Drop_statisticsContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Drop_viewContext drop_view() {
			return getRuleContext(Drop_viewContext.class,0);
		}
		public Create_statisticsContext create_statistics() {
			return getRuleContext(Create_statisticsContext.class,0);
		}
		public Create_procedureContext create_procedure() {
			return getRuleContext(Create_procedureContext.class,0);
		}
		public Alter_databaseContext alter_database() {
			return getRuleContext(Alter_databaseContext.class,0);
		}
		public Drop_indexContext drop_index() {
			return getRuleContext(Drop_indexContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDdl_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_clauseContext ddl_clause() throws RecognitionException {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_ddl_clause);
		try {
			setState(345);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(332); create_index();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(333); create_procedure();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(334); create_statistics();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(335); create_table();
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(336); create_view();
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(337); alter_table();
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(338); alter_database();
				}
				break;

			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(339); drop_index();
				}
				break;

			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(340); drop_procedure();
				}
				break;

			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(341); drop_statistics();
				}
				break;

			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(342); drop_table();
				}
				break;

			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(343); drop_view();
				}
				break;

			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(344); truncate_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cfl_statementContext extends ParserRuleContext {
		public Cfl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cfl_statement; }
	 
		public Cfl_statementContext() { }
		public void copyFrom(Cfl_statementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Return_statementContext extends Cfl_statementContext {
		public TerminalNode RETURN() { return getToken(sybaseiqParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Break_statementContext extends Cfl_statementContext {
		public TerminalNode BREAK() { return getToken(sybaseiqParser.BREAK, 0); }
		public Break_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitBreak_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Begin_parallel_statementContext extends Cfl_statementContext {
		public TerminalNode IQ(int i) {
			return getToken(sybaseiqParser.IQ, i);
		}
		public Create_indexContext create_index(int i) {
			return getRuleContext(Create_indexContext.class,i);
		}
		public List<Create_indexContext> create_index() {
			return getRuleContexts(Create_indexContext.class);
		}
		public List<TerminalNode> PARALLEL() { return getTokens(sybaseiqParser.PARALLEL); }
		public TerminalNode PARALLEL(int i) {
			return getToken(sybaseiqParser.PARALLEL, i);
		}
		public TerminalNode BEGIN() { return getToken(sybaseiqParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(sybaseiqParser.END, 0); }
		public List<TerminalNode> IQ() { return getTokens(sybaseiqParser.IQ); }
		public Begin_parallel_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitBegin_parallel_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Exception_statementContext extends Cfl_statementContext {
		public TerminalNode EXCEPTION() { return getToken(sybaseiqParser.EXCEPTION, 0); }
		public Wot_statementContext wot_statement() {
			return getRuleContext(Wot_statementContext.class,0);
		}
		public Exception_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitException_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Try_catch_statementContext extends Cfl_statementContext {
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FINALLY() { return getToken(sybaseiqParser.FINALLY, 0); }
		public TerminalNode CATCH(int i) {
			return getToken(sybaseiqParser.CATCH, i);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public List<TerminalNode> CATCH() { return getTokens(sybaseiqParser.CATCH); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode END() { return getToken(sybaseiqParser.END, 0); }
		public TerminalNode TRY(int i) {
			return getToken(sybaseiqParser.TRY, i);
		}
		public List<TerminalNode> TRY() { return getTokens(sybaseiqParser.TRY); }
		public Try_catch_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitTry_catch_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Raiseerror_statementContext extends Cfl_statementContext {
		public Token msg;
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<NumberContext> number() {
			return getRuleContexts(NumberContext.class);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(sybaseiqParser.LOCAL_ID); }
		public NumberContext number(int i) {
			return getRuleContext(NumberContext.class,i);
		}
		public TerminalNode RAISERROR() { return getToken(sybaseiqParser.RAISERROR, 0); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(sybaseiqParser.LOCAL_ID, i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public TerminalNode STRING() { return getToken(sybaseiqParser.STRING, 0); }
		public TerminalNode DECIMAL() { return getToken(sybaseiqParser.DECIMAL, 0); }
		public Raiseerror_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitRaiseerror_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Print_statementContext extends Cfl_statementContext {
		public TerminalNode PRINT() { return getToken(sybaseiqParser.PRINT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Print_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitPrint_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class If_statementContext extends Cfl_statementContext {
		public List<TerminalNode> THEN() { return getTokens(sybaseiqParser.THEN); }
		public TerminalNode ELSEIF() { return getToken(sybaseiqParser.ELSEIF, 0); }
		public TerminalNode THEN(int i) {
			return getToken(sybaseiqParser.THEN, i);
		}
		public TerminalNode IF(int i) {
			return getToken(sybaseiqParser.IF, i);
		}
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public List<Then_condition_listContext> then_condition_list() {
			return getRuleContexts(Then_condition_listContext.class);
		}
		public Then_condition_listContext then_condition_list(int i) {
			return getRuleContext(Then_condition_listContext.class,i);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> IF() { return getTokens(sybaseiqParser.IF); }
		public TerminalNode ELSE() { return getToken(sybaseiqParser.ELSE, 0); }
		public Sql_clauseContext sql_clause() {
			return getRuleContext(Sql_clauseContext.class,0);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public TerminalNode ENDIF() { return getToken(sybaseiqParser.ENDIF, 0); }
		public TerminalNode END() { return getToken(sybaseiqParser.END, 0); }
		public If_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Parameter_statementContext extends Cfl_statementContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode PARAMETERS() { return getToken(sybaseiqParser.PARAMETERS, 0); }
		public Parameter_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitParameter_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Waitfor_statementContext extends Cfl_statementContext {
		public TerminalNode TIME() { return getToken(sybaseiqParser.TIME, 0); }
		public TerminalNode DELAY() { return getToken(sybaseiqParser.DELAY, 0); }
		public TerminalNode WAITFOR() { return getToken(sybaseiqParser.WAITFOR, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Waitfor_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitWaitfor_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class While_statementContext extends Cfl_statementContext {
		public TerminalNode WHILE() { return getToken(sybaseiqParser.WHILE, 0); }
		public Sql_clauseContext sql_clause() {
			return getRuleContext(Sql_clauseContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode BREAK() { return getToken(sybaseiqParser.BREAK, 0); }
		public TerminalNode CONTINUE() { return getToken(sybaseiqParser.CONTINUE, 0); }
		public While_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitWhile_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Goto_statementContext extends Cfl_statementContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Goto_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Loop_statementContext extends Cfl_statementContext {
		public TerminalNode WHILE() { return getToken(sybaseiqParser.WHILE, 0); }
		public TerminalNode LOOP(int i) {
			return getToken(sybaseiqParser.LOOP, i);
		}
		public Sql_clauseContext sql_clause() {
			return getRuleContext(Sql_clauseContext.class,0);
		}
		public List<TerminalNode> LOOP() { return getTokens(sybaseiqParser.LOOP); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode BREAK() { return getToken(sybaseiqParser.BREAK, 0); }
		public TerminalNode CONTINUE() { return getToken(sybaseiqParser.CONTINUE, 0); }
		public TerminalNode END() { return getToken(sybaseiqParser.END, 0); }
		public Loop_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitLoop_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Continue_statementContext extends Cfl_statementContext {
		public TerminalNode CONTINUE() { return getToken(sybaseiqParser.CONTINUE, 0); }
		public Continue_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Begin_statementContext extends Cfl_statementContext {
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public TerminalNode BEGIN() { return getToken(sybaseiqParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(sybaseiqParser.END, 0); }
		public Begin_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitBegin_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cfl_statementContext cfl_statement() throws RecognitionException {
		Cfl_statementContext _localctx = new Cfl_statementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_cfl_statement);
		int _la;
		try {
			int _alt;
			setState(557);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				_localctx = new Begin_statementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(347); match(BEGIN);
				setState(351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CALL) | (1L << CLOSE) | (1L << COMMENT) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (DEALLOCATE - 71)) | (1L << (DECLARE - 71)) | (1L << (DELETE - 71)) | (1L << (DROP - 71)) | (1L << (EXCEPTION - 71)) | (1L << (EXEC - 71)) | (1L << (EXECUTE - 71)) | (1L << (FETCH - 71)) | (1L << (FORCESEEK - 71)) | (1L << (GOTO - 71)) | (1L << (GRANT - 71)) | (1L << (IF - 71)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (INSERT - 140)) | (1L << (MESSAGE - 140)) | (1L << (OPEN - 140)) | (1L << (PARAMETERS - 140)) | (1L << (PRINT - 140)))) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (RAISERROR - 209)) | (1L << (RETURN - 209)) | (1L << (ROLLBACK - 209)) | (1L << (SAVE - 209)) | (1L << (SELECT - 209)) | (1L << (SET - 209)) | (1L << (TRUNCATE - 209)))) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (UPDATE - 279)) | (1L << (USE - 279)) | (1L << (WAITFOR - 279)) | (1L << (WHILE - 279)) | (1L << (WITH - 279)) | (1L << (ABSOLUTE - 279)) | (1L << (APPLY - 279)) | (1L << (AUTO - 279)) | (1L << (AVG - 279)) | (1L << (BASE64 - 279)) | (1L << (CALLER - 279)) | (1L << (CAST - 279)) | (1L << (CATCH - 279)) | (1L << (CHECKSUM_AGG - 279)) | (1L << (COMMITTED - 279)) | (1L << (CONCAT - 279)) | (1L << (COOKIE - 279)) | (1L << (COUNT - 279)) | (1L << (COUNT_BIG - 279)) | (1L << (DELAY - 279)) | (1L << (DELETED - 279)) | (1L << (DENSE_RANK - 279)) | (1L << (DISABLE - 279)) | (1L << (DYNAMIC - 279)) | (1L << (ENCRYPTION - 279)) | (1L << (FAST - 279)) | (1L << (FAST_FORWARD - 279)) | (1L << (FIRST - 279)) | (1L << (FOLLOWING - 279)) | (1L << (FORWARD_ONLY - 279)) | (1L << (FULLSCAN - 279)) | (1L << (GLOBAL - 279)) | (1L << (GO - 279)) | (1L << (GROUPING - 279)) | (1L << (GROUPING_ID - 279)) | (1L << (HASH - 279)) | (1L << (INSENSITIVE - 279)) | (1L << (INSERTED - 279)) | (1L << (ISOLATION - 279)) | (1L << (KEEPFIXED - 279)))) != 0) || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (KEYSET - 343)) | (1L << (LAST - 343)) | (1L << (LEVEL - 343)) | (1L << (LOCAL - 343)) | (1L << (LOCK_ESCALATION - 343)) | (1L << (LOGIN - 343)) | (1L << (LOOP - 343)) | (1L << (MARK - 343)) | (1L << (MAX - 343)) | (1L << (MIN - 343)) | (1L << (MODIFY - 343)) | (1L << (NEXT - 343)) | (1L << (NAME - 343)) | (1L << (NOCOUNT - 343)) | (1L << (NOEXPAND - 343)) | (1L << (NORECOMPUTE - 343)) | (1L << (NTILE - 343)) | (1L << (NUMBER - 343)) | (1L << (OFFSET - 343)) | (1L << (ONLY - 343)) | (1L << (OPTIMISTIC - 343)) | (1L << (OPTIMIZE - 343)) | (1L << (OUT - 343)) | (1L << (OUTPUT - 343)) | (1L << (OWNER - 343)) | (1L << (PARTITION - 343)) | (1L << (PATH - 343)) | (1L << (PRECEDING - 343)) | (1L << (PRIOR - 343)) | (1L << (RANGE - 343)) | (1L << (RANK - 343)) | (1L << (READONLY - 343)) | (1L << (READ_ONLY - 343)) | (1L << (RECOMPILE - 343)) | (1L << (RELATIVE - 343)) | (1L << (REMOTE - 343)) | (1L << (REPEATABLE - 343)) | (1L << (ROOT - 343)) | (1L << (ROW - 343)) | (1L << (ROWGUID - 343)) | (1L << (ROWS - 343)) | (1L << (ROW_NUMBER - 343)) | (1L << (SAMPLE - 343)) | (1L << (SCHEMABINDING - 343)) | (1L << (SCROLL - 343)) | (1L << (SCROLL_LOCKS - 343)) | (1L << (SELF - 343)) | (1L << (SERIALIZABLE - 343)) | (1L << (SNAPSHOT - 343)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 343)) | (1L << (STATIC - 343)) | (1L << (STATS_STREAM - 343)) | (1L << (STDEV - 343)) | (1L << (STDEVP - 343)) | (1L << (SUM - 343)) | (1L << (THROW - 343)) | (1L << (TIES - 343)) | (1L << (TIME - 343)) | (1L << (TRY - 343)) | (1L << (TYPE - 343)))) != 0) || ((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (TYPE_WARNING - 407)) | (1L << (UNBOUNDED - 407)) | (1L << (UNCOMMITTED - 407)) | (1L << (UNKNOWN - 407)) | (1L << (USING - 407)) | (1L << (VAR - 407)) | (1L << (VARP - 407)) | (1L << (VIEW_METADATA - 407)) | (1L << (WORK - 407)) | (1L << (XML - 407)) | (1L << (XMLNAMESPACES - 407)) | (1L << (DOUBLE_QUOTE_ID - 407)) | (1L << (SQUARE_BRACKET_ID - 407)) | (1L << (ID - 407)) | (1L << (LR_BRACKET - 407)))) != 0)) {
					{
					{
					setState(348); sql_clause();
					}
					}
					setState(353);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(354); match(END);
				setState(356);
				switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					setState(355); match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new Begin_parallel_statementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(358); match(BEGIN);
				setState(359); match(PARALLEL);
				setState(360); match(IQ);
				setState(364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==CREATE) {
					{
					{
					setState(361); create_index();
					}
					}
					setState(366);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(367); match(END);
				setState(368); match(PARALLEL);
				setState(369); match(IQ);
				setState(371);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(370); match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new Exception_statementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(373); match(EXCEPTION);
				setState(374); wot_statement();
				}
				break;

			case 4:
				_localctx = new If_statementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(375); match(IF);
				setState(376); search_condition();
				setState(377); match(THEN);
				setState(378); then_condition_list();
				setState(384);
				_la = _input.LA(1);
				if (_la==ELSEIF) {
					{
					setState(379); match(ELSEIF);
					setState(380); search_condition();
					setState(381); match(THEN);
					setState(382); then_condition_list();
					}
				}

				setState(401);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(386); match(ELSE);
					setState(399);
					switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
					case 1:
						{
						setState(390);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CALL) | (1L << CLOSE) | (1L << COMMENT) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (DEALLOCATE - 71)) | (1L << (DECLARE - 71)) | (1L << (DELETE - 71)) | (1L << (DROP - 71)) | (1L << (EXCEPTION - 71)) | (1L << (EXEC - 71)) | (1L << (EXECUTE - 71)) | (1L << (FETCH - 71)) | (1L << (FORCESEEK - 71)) | (1L << (GOTO - 71)) | (1L << (GRANT - 71)) | (1L << (IF - 71)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (INSERT - 140)) | (1L << (MESSAGE - 140)) | (1L << (OPEN - 140)) | (1L << (PARAMETERS - 140)) | (1L << (PRINT - 140)))) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (RAISERROR - 209)) | (1L << (RETURN - 209)) | (1L << (ROLLBACK - 209)) | (1L << (SAVE - 209)) | (1L << (SELECT - 209)) | (1L << (SET - 209)) | (1L << (TRUNCATE - 209)))) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (UPDATE - 279)) | (1L << (USE - 279)) | (1L << (WAITFOR - 279)) | (1L << (WHILE - 279)) | (1L << (WITH - 279)) | (1L << (ABSOLUTE - 279)) | (1L << (APPLY - 279)) | (1L << (AUTO - 279)) | (1L << (AVG - 279)) | (1L << (BASE64 - 279)) | (1L << (CALLER - 279)) | (1L << (CAST - 279)) | (1L << (CATCH - 279)) | (1L << (CHECKSUM_AGG - 279)) | (1L << (COMMITTED - 279)) | (1L << (CONCAT - 279)) | (1L << (COOKIE - 279)) | (1L << (COUNT - 279)) | (1L << (COUNT_BIG - 279)) | (1L << (DELAY - 279)) | (1L << (DELETED - 279)) | (1L << (DENSE_RANK - 279)) | (1L << (DISABLE - 279)) | (1L << (DYNAMIC - 279)) | (1L << (ENCRYPTION - 279)) | (1L << (FAST - 279)) | (1L << (FAST_FORWARD - 279)) | (1L << (FIRST - 279)) | (1L << (FOLLOWING - 279)) | (1L << (FORWARD_ONLY - 279)) | (1L << (FULLSCAN - 279)) | (1L << (GLOBAL - 279)) | (1L << (GO - 279)) | (1L << (GROUPING - 279)) | (1L << (GROUPING_ID - 279)) | (1L << (HASH - 279)) | (1L << (INSENSITIVE - 279)) | (1L << (INSERTED - 279)) | (1L << (ISOLATION - 279)) | (1L << (KEEPFIXED - 279)))) != 0) || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (KEYSET - 343)) | (1L << (LAST - 343)) | (1L << (LEVEL - 343)) | (1L << (LOCAL - 343)) | (1L << (LOCK_ESCALATION - 343)) | (1L << (LOGIN - 343)) | (1L << (LOOP - 343)) | (1L << (MARK - 343)) | (1L << (MAX - 343)) | (1L << (MIN - 343)) | (1L << (MODIFY - 343)) | (1L << (NEXT - 343)) | (1L << (NAME - 343)) | (1L << (NOCOUNT - 343)) | (1L << (NOEXPAND - 343)) | (1L << (NORECOMPUTE - 343)) | (1L << (NTILE - 343)) | (1L << (NUMBER - 343)) | (1L << (OFFSET - 343)) | (1L << (ONLY - 343)) | (1L << (OPTIMISTIC - 343)) | (1L << (OPTIMIZE - 343)) | (1L << (OUT - 343)) | (1L << (OUTPUT - 343)) | (1L << (OWNER - 343)) | (1L << (PARTITION - 343)) | (1L << (PATH - 343)) | (1L << (PRECEDING - 343)) | (1L << (PRIOR - 343)) | (1L << (RANGE - 343)) | (1L << (RANK - 343)) | (1L << (READONLY - 343)) | (1L << (READ_ONLY - 343)) | (1L << (RECOMPILE - 343)) | (1L << (RELATIVE - 343)) | (1L << (REMOTE - 343)) | (1L << (REPEATABLE - 343)) | (1L << (ROOT - 343)) | (1L << (ROW - 343)) | (1L << (ROWGUID - 343)) | (1L << (ROWS - 343)) | (1L << (ROW_NUMBER - 343)) | (1L << (SAMPLE - 343)) | (1L << (SCHEMABINDING - 343)) | (1L << (SCROLL - 343)) | (1L << (SCROLL_LOCKS - 343)) | (1L << (SELF - 343)) | (1L << (SERIALIZABLE - 343)) | (1L << (SNAPSHOT - 343)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 343)) | (1L << (STATIC - 343)) | (1L << (STATS_STREAM - 343)) | (1L << (STDEV - 343)) | (1L << (STDEVP - 343)) | (1L << (SUM - 343)) | (1L << (THROW - 343)) | (1L << (TIES - 343)) | (1L << (TIME - 343)) | (1L << (TRY - 343)) | (1L << (TYPE - 343)))) != 0) || ((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (TYPE_WARNING - 407)) | (1L << (UNBOUNDED - 407)) | (1L << (UNCOMMITTED - 407)) | (1L << (UNKNOWN - 407)) | (1L << (USING - 407)) | (1L << (VAR - 407)) | (1L << (VARP - 407)) | (1L << (VIEW_METADATA - 407)) | (1L << (WORK - 407)) | (1L << (XML - 407)) | (1L << (XMLNAMESPACES - 407)) | (1L << (DOUBLE_QUOTE_ID - 407)) | (1L << (SQUARE_BRACKET_ID - 407)) | (1L << (ID - 407)) | (1L << (LR_BRACKET - 407)))) != 0)) {
							{
							{
							setState(387); sql_clause();
							}
							}
							setState(392);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;

					case 2:
						{
						setState(396);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << COALESCE) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DEFAULT - 76)) | (1L << (FORCESEEK - 76)) | (1L << (IDENTITY - 76)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (LEFT - 152)) | (1L << (NULL - 152)) | (1L << (NULLIF - 152)) | (1L << (REPLACE - 152)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (RIGHT - 224)) | (1L << (SESSION_USER - 224)) | (1L << (SYSTEM_USER - 224)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ABSOLUTE - 300)) | (1L << (APPLY - 300)) | (1L << (AUTO - 300)) | (1L << (AVG - 300)) | (1L << (BASE64 - 300)) | (1L << (BINARY_CHECKSUM - 300)) | (1L << (CALLER - 300)) | (1L << (CAST - 300)) | (1L << (CATCH - 300)) | (1L << (CHECKSUM - 300)) | (1L << (CHECKSUM_AGG - 300)) | (1L << (COMMITTED - 300)) | (1L << (CONCAT - 300)) | (1L << (COOKIE - 300)) | (1L << (COUNT - 300)) | (1L << (COUNT_BIG - 300)) | (1L << (DATEADD - 300)) | (1L << (DATEDIFF - 300)) | (1L << (DATENAME - 300)) | (1L << (DATEPART - 300)) | (1L << (DELAY - 300)) | (1L << (DELETED - 300)) | (1L << (DENSE_RANK - 300)) | (1L << (DISABLE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (FAST - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FIRST - 300)) | (1L << (FOLLOWING - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (FULLSCAN - 300)) | (1L << (GLOBAL - 300)) | (1L << (GO - 300)) | (1L << (GROUPING - 300)) | (1L << (GROUPING_ID - 300)) | (1L << (HASH - 300)) | (1L << (INSENSITIVE - 300)) | (1L << (INSERTED - 300)) | (1L << (ISOLATION - 300)) | (1L << (KEEPFIXED - 300)) | (1L << (KEYSET - 300)) | (1L << (LAST - 300)) | (1L << (LEVEL - 300)) | (1L << (LOCAL - 300)) | (1L << (LOCK_ESCALATION - 300)) | (1L << (LOGIN - 300)) | (1L << (LOOP - 300)) | (1L << (MARK - 300)) | (1L << (MAX - 300)) | (1L << (MIN - 300)) | (1L << (MIN_ACTIVE_ROWVERSION - 300)) | (1L << (MOD - 300)) | (1L << (MODIFY - 300)) | (1L << (NEXT - 300)) | (1L << (NAME - 300)) | (1L << (NOCOUNT - 300)) | (1L << (NOEXPAND - 300)) | (1L << (NORECOMPUTE - 300)) | (1L << (NTILE - 300)) | (1L << (NUMBER - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (OFFSET - 364)) | (1L << (ONLY - 364)) | (1L << (OPTIMISTIC - 364)) | (1L << (OPTIMIZE - 364)) | (1L << (OUT - 364)) | (1L << (OUTPUT - 364)) | (1L << (OWNER - 364)) | (1L << (PARTITION - 364)) | (1L << (PATH - 364)) | (1L << (PRECEDING - 364)) | (1L << (PRIOR - 364)) | (1L << (RANGE - 364)) | (1L << (RANK - 364)) | (1L << (READONLY - 364)) | (1L << (READ_ONLY - 364)) | (1L << (RECOMPILE - 364)) | (1L << (RELATIVE - 364)) | (1L << (REMOTE - 364)) | (1L << (REPEATABLE - 364)) | (1L << (ROOT - 364)) | (1L << (ROW - 364)) | (1L << (ROWGUID - 364)) | (1L << (ROWS - 364)) | (1L << (ROW_NUMBER - 364)) | (1L << (SAMPLE - 364)) | (1L << (SCHEMABINDING - 364)) | (1L << (SCROLL - 364)) | (1L << (SCROLL_LOCKS - 364)) | (1L << (SELF - 364)) | (1L << (SERIALIZABLE - 364)) | (1L << (SNAPSHOT - 364)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 364)) | (1L << (STATIC - 364)) | (1L << (STATS_STREAM - 364)) | (1L << (STDEV - 364)) | (1L << (STDEVP - 364)) | (1L << (SUM - 364)) | (1L << (THROW - 364)) | (1L << (TIES - 364)) | (1L << (TIME - 364)) | (1L << (TRY - 364)) | (1L << (TYPE - 364)) | (1L << (TYPE_WARNING - 364)) | (1L << (UNBOUNDED - 364)) | (1L << (UNCOMMITTED - 364)) | (1L << (UNKNOWN - 364)) | (1L << (USING - 364)) | (1L << (VAR - 364)) | (1L << (VARP - 364)) | (1L << (VIEW_METADATA - 364)) | (1L << (WORK - 364)) | (1L << (XML - 364)) | (1L << (XMLNAMESPACES - 364)) | (1L << (DOUBLE_QUOTE_ID - 364)) | (1L << (SQUARE_BRACKET_ID - 364)) | (1L << (LOCAL_ID - 364)) | (1L << (DECIMAL - 364)) | (1L << (ID - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (STRING - 428)) | (1L << (BINARY - 428)) | (1L << (FLOAT - 428)) | (1L << (REAL - 428)) | (1L << (DOLLAR - 428)) | (1L << (LR_BRACKET - 428)) | (1L << (PLUS - 428)) | (1L << (MINUS - 428)) | (1L << (BIT_NOT - 428)))) != 0)) {
							{
							{
							setState(393); expression(0);
							}
							}
							setState(398);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					}
					}
				}

				setState(406);
				switch (_input.LA(1)) {
				case END:
					{
					setState(403); match(END);
					setState(404); match(IF);
					}
					break;
				case ENDIF:
					{
					setState(405); match(ENDIF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(409);
				switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					setState(408); match(SEMI);
					}
					break;
				}
				}
				break;

			case 5:
				_localctx = new Return_statementContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(411); match(RETURN);
				setState(413);
				switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					setState(412); expression(0);
					}
					break;
				}
				setState(416);
				switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					setState(415); match(SEMI);
					}
					break;
				}
				}
				break;

			case 6:
				_localctx = new Try_catch_statementContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(418); match(TRY);
				setState(422);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,17,_ctx);
				while ( _alt!=2 && _alt!=-1 ) {
					if ( _alt==1 ) {
						{
						{
						setState(419); sql_clause();
						}
						} 
					}
					setState(424);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,17,_ctx);
				}
				setState(436); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(425); match(CATCH);
					setState(426); match(LR_BRACKET);
					setState(427); expression(0);
					setState(428); expression(0);
					setState(429); match(RR_BRACKET);
					setState(433);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,18,_ctx);
					while ( _alt!=2 && _alt!=-1 ) {
						if ( _alt==1 ) {
							{
							{
							setState(430); sql_clause();
							}
							} 
						}
						setState(435);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,18,_ctx);
					}
					}
					}
					setState(438); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CATCH );
				setState(447);
				_la = _input.LA(1);
				if (_la==FINALLY) {
					{
					setState(440); match(FINALLY);
					setState(444);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CALL) | (1L << CLOSE) | (1L << COMMENT) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (DEALLOCATE - 71)) | (1L << (DECLARE - 71)) | (1L << (DELETE - 71)) | (1L << (DROP - 71)) | (1L << (EXCEPTION - 71)) | (1L << (EXEC - 71)) | (1L << (EXECUTE - 71)) | (1L << (FETCH - 71)) | (1L << (FORCESEEK - 71)) | (1L << (GOTO - 71)) | (1L << (GRANT - 71)) | (1L << (IF - 71)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (INSERT - 140)) | (1L << (MESSAGE - 140)) | (1L << (OPEN - 140)) | (1L << (PARAMETERS - 140)) | (1L << (PRINT - 140)))) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (RAISERROR - 209)) | (1L << (RETURN - 209)) | (1L << (ROLLBACK - 209)) | (1L << (SAVE - 209)) | (1L << (SELECT - 209)) | (1L << (SET - 209)) | (1L << (TRUNCATE - 209)))) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (UPDATE - 279)) | (1L << (USE - 279)) | (1L << (WAITFOR - 279)) | (1L << (WHILE - 279)) | (1L << (WITH - 279)) | (1L << (ABSOLUTE - 279)) | (1L << (APPLY - 279)) | (1L << (AUTO - 279)) | (1L << (AVG - 279)) | (1L << (BASE64 - 279)) | (1L << (CALLER - 279)) | (1L << (CAST - 279)) | (1L << (CATCH - 279)) | (1L << (CHECKSUM_AGG - 279)) | (1L << (COMMITTED - 279)) | (1L << (CONCAT - 279)) | (1L << (COOKIE - 279)) | (1L << (COUNT - 279)) | (1L << (COUNT_BIG - 279)) | (1L << (DELAY - 279)) | (1L << (DELETED - 279)) | (1L << (DENSE_RANK - 279)) | (1L << (DISABLE - 279)) | (1L << (DYNAMIC - 279)) | (1L << (ENCRYPTION - 279)) | (1L << (FAST - 279)) | (1L << (FAST_FORWARD - 279)) | (1L << (FIRST - 279)) | (1L << (FOLLOWING - 279)) | (1L << (FORWARD_ONLY - 279)) | (1L << (FULLSCAN - 279)) | (1L << (GLOBAL - 279)) | (1L << (GO - 279)) | (1L << (GROUPING - 279)) | (1L << (GROUPING_ID - 279)) | (1L << (HASH - 279)) | (1L << (INSENSITIVE - 279)) | (1L << (INSERTED - 279)) | (1L << (ISOLATION - 279)) | (1L << (KEEPFIXED - 279)))) != 0) || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (KEYSET - 343)) | (1L << (LAST - 343)) | (1L << (LEVEL - 343)) | (1L << (LOCAL - 343)) | (1L << (LOCK_ESCALATION - 343)) | (1L << (LOGIN - 343)) | (1L << (LOOP - 343)) | (1L << (MARK - 343)) | (1L << (MAX - 343)) | (1L << (MIN - 343)) | (1L << (MODIFY - 343)) | (1L << (NEXT - 343)) | (1L << (NAME - 343)) | (1L << (NOCOUNT - 343)) | (1L << (NOEXPAND - 343)) | (1L << (NORECOMPUTE - 343)) | (1L << (NTILE - 343)) | (1L << (NUMBER - 343)) | (1L << (OFFSET - 343)) | (1L << (ONLY - 343)) | (1L << (OPTIMISTIC - 343)) | (1L << (OPTIMIZE - 343)) | (1L << (OUT - 343)) | (1L << (OUTPUT - 343)) | (1L << (OWNER - 343)) | (1L << (PARTITION - 343)) | (1L << (PATH - 343)) | (1L << (PRECEDING - 343)) | (1L << (PRIOR - 343)) | (1L << (RANGE - 343)) | (1L << (RANK - 343)) | (1L << (READONLY - 343)) | (1L << (READ_ONLY - 343)) | (1L << (RECOMPILE - 343)) | (1L << (RELATIVE - 343)) | (1L << (REMOTE - 343)) | (1L << (REPEATABLE - 343)) | (1L << (ROOT - 343)) | (1L << (ROW - 343)) | (1L << (ROWGUID - 343)) | (1L << (ROWS - 343)) | (1L << (ROW_NUMBER - 343)) | (1L << (SAMPLE - 343)) | (1L << (SCHEMABINDING - 343)) | (1L << (SCROLL - 343)) | (1L << (SCROLL_LOCKS - 343)) | (1L << (SELF - 343)) | (1L << (SERIALIZABLE - 343)) | (1L << (SNAPSHOT - 343)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 343)) | (1L << (STATIC - 343)) | (1L << (STATS_STREAM - 343)) | (1L << (STDEV - 343)) | (1L << (STDEVP - 343)) | (1L << (SUM - 343)) | (1L << (THROW - 343)) | (1L << (TIES - 343)) | (1L << (TIME - 343)) | (1L << (TRY - 343)) | (1L << (TYPE - 343)))) != 0) || ((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (TYPE_WARNING - 407)) | (1L << (UNBOUNDED - 407)) | (1L << (UNCOMMITTED - 407)) | (1L << (UNKNOWN - 407)) | (1L << (USING - 407)) | (1L << (VAR - 407)) | (1L << (VARP - 407)) | (1L << (VIEW_METADATA - 407)) | (1L << (WORK - 407)) | (1L << (XML - 407)) | (1L << (XMLNAMESPACES - 407)) | (1L << (DOUBLE_QUOTE_ID - 407)) | (1L << (SQUARE_BRACKET_ID - 407)) | (1L << (ID - 407)) | (1L << (LR_BRACKET - 407)))) != 0)) {
						{
						{
						setState(441); sql_clause();
						}
						}
						setState(446);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(449); match(END);
				setState(450); match(TRY);
				}
				break;

			case 7:
				_localctx = new Waitfor_statementContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(452); match(WAITFOR);
				setState(453);
				_la = _input.LA(1);
				if ( !(_la==DELAY || _la==TIME) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(454); expression(0);
				setState(456);
				switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
				case 1:
					{
					setState(455); match(SEMI);
					}
					break;
				}
				}
				break;

			case 8:
				_localctx = new While_statementContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(458); match(WHILE);
				setState(459); search_condition();
				setState(469);
				switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
				case 1:
					{
					setState(460); sql_clause();
					}
					break;

				case 2:
					{
					setState(461); match(BREAK);
					setState(463);
					switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
					case 1:
						{
						setState(462); match(SEMI);
						}
						break;
					}
					}
					break;

				case 3:
					{
					setState(465); match(CONTINUE);
					setState(467);
					switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
					case 1:
						{
						setState(466); match(SEMI);
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 9:
				_localctx = new Loop_statementContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(471); match(WHILE);
				setState(472); search_condition();
				setState(473); match(LOOP);
				setState(488);
				switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					setState(477);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CALL) | (1L << CLOSE) | (1L << COMMENT) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (DEALLOCATE - 71)) | (1L << (DECLARE - 71)) | (1L << (DELETE - 71)) | (1L << (DROP - 71)) | (1L << (EXCEPTION - 71)) | (1L << (EXEC - 71)) | (1L << (EXECUTE - 71)) | (1L << (FETCH - 71)) | (1L << (FORCESEEK - 71)) | (1L << (GOTO - 71)) | (1L << (GRANT - 71)) | (1L << (IF - 71)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (INSERT - 140)) | (1L << (MESSAGE - 140)) | (1L << (OPEN - 140)) | (1L << (PARAMETERS - 140)) | (1L << (PRINT - 140)))) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (RAISERROR - 209)) | (1L << (RETURN - 209)) | (1L << (ROLLBACK - 209)) | (1L << (SAVE - 209)) | (1L << (SELECT - 209)) | (1L << (SET - 209)) | (1L << (TRUNCATE - 209)))) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (UPDATE - 279)) | (1L << (USE - 279)) | (1L << (WAITFOR - 279)) | (1L << (WHILE - 279)) | (1L << (WITH - 279)) | (1L << (ABSOLUTE - 279)) | (1L << (APPLY - 279)) | (1L << (AUTO - 279)) | (1L << (AVG - 279)) | (1L << (BASE64 - 279)) | (1L << (CALLER - 279)) | (1L << (CAST - 279)) | (1L << (CATCH - 279)) | (1L << (CHECKSUM_AGG - 279)) | (1L << (COMMITTED - 279)) | (1L << (CONCAT - 279)) | (1L << (COOKIE - 279)) | (1L << (COUNT - 279)) | (1L << (COUNT_BIG - 279)) | (1L << (DELAY - 279)) | (1L << (DELETED - 279)) | (1L << (DENSE_RANK - 279)) | (1L << (DISABLE - 279)) | (1L << (DYNAMIC - 279)) | (1L << (ENCRYPTION - 279)) | (1L << (FAST - 279)) | (1L << (FAST_FORWARD - 279)) | (1L << (FIRST - 279)) | (1L << (FOLLOWING - 279)) | (1L << (FORWARD_ONLY - 279)) | (1L << (FULLSCAN - 279)) | (1L << (GLOBAL - 279)) | (1L << (GO - 279)) | (1L << (GROUPING - 279)) | (1L << (GROUPING_ID - 279)) | (1L << (HASH - 279)) | (1L << (INSENSITIVE - 279)) | (1L << (INSERTED - 279)) | (1L << (ISOLATION - 279)) | (1L << (KEEPFIXED - 279)))) != 0) || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (KEYSET - 343)) | (1L << (LAST - 343)) | (1L << (LEVEL - 343)) | (1L << (LOCAL - 343)) | (1L << (LOCK_ESCALATION - 343)) | (1L << (LOGIN - 343)) | (1L << (LOOP - 343)) | (1L << (MARK - 343)) | (1L << (MAX - 343)) | (1L << (MIN - 343)) | (1L << (MODIFY - 343)) | (1L << (NEXT - 343)) | (1L << (NAME - 343)) | (1L << (NOCOUNT - 343)) | (1L << (NOEXPAND - 343)) | (1L << (NORECOMPUTE - 343)) | (1L << (NTILE - 343)) | (1L << (NUMBER - 343)) | (1L << (OFFSET - 343)) | (1L << (ONLY - 343)) | (1L << (OPTIMISTIC - 343)) | (1L << (OPTIMIZE - 343)) | (1L << (OUT - 343)) | (1L << (OUTPUT - 343)) | (1L << (OWNER - 343)) | (1L << (PARTITION - 343)) | (1L << (PATH - 343)) | (1L << (PRECEDING - 343)) | (1L << (PRIOR - 343)) | (1L << (RANGE - 343)) | (1L << (RANK - 343)) | (1L << (READONLY - 343)) | (1L << (READ_ONLY - 343)) | (1L << (RECOMPILE - 343)) | (1L << (RELATIVE - 343)) | (1L << (REMOTE - 343)) | (1L << (REPEATABLE - 343)) | (1L << (ROOT - 343)) | (1L << (ROW - 343)) | (1L << (ROWGUID - 343)) | (1L << (ROWS - 343)) | (1L << (ROW_NUMBER - 343)) | (1L << (SAMPLE - 343)) | (1L << (SCHEMABINDING - 343)) | (1L << (SCROLL - 343)) | (1L << (SCROLL_LOCKS - 343)) | (1L << (SELF - 343)) | (1L << (SERIALIZABLE - 343)) | (1L << (SNAPSHOT - 343)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 343)) | (1L << (STATIC - 343)) | (1L << (STATS_STREAM - 343)) | (1L << (STDEV - 343)) | (1L << (STDEVP - 343)) | (1L << (SUM - 343)) | (1L << (THROW - 343)) | (1L << (TIES - 343)) | (1L << (TIME - 343)) | (1L << (TRY - 343)) | (1L << (TYPE - 343)))) != 0) || ((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (TYPE_WARNING - 407)) | (1L << (UNBOUNDED - 407)) | (1L << (UNCOMMITTED - 407)) | (1L << (UNKNOWN - 407)) | (1L << (USING - 407)) | (1L << (VAR - 407)) | (1L << (VARP - 407)) | (1L << (VIEW_METADATA - 407)) | (1L << (WORK - 407)) | (1L << (XML - 407)) | (1L << (XMLNAMESPACES - 407)) | (1L << (DOUBLE_QUOTE_ID - 407)) | (1L << (SQUARE_BRACKET_ID - 407)) | (1L << (ID - 407)) | (1L << (LR_BRACKET - 407)))) != 0)) {
						{
						{
						setState(474); sql_clause();
						}
						}
						setState(479);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;

				case 2:
					{
					setState(480); match(BREAK);
					setState(482);
					_la = _input.LA(1);
					if (_la==SEMI) {
						{
						setState(481); match(SEMI);
						}
					}

					}
					break;

				case 3:
					{
					setState(484); match(CONTINUE);
					setState(486);
					_la = _input.LA(1);
					if (_la==SEMI) {
						{
						setState(485); match(SEMI);
						}
					}

					}
					break;
				}
				setState(490); match(END);
				setState(491); match(LOOP);
				setState(493);
				switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
				case 1:
					{
					setState(492); match(SEMI);
					}
					break;
				}
				}
				break;

			case 10:
				_localctx = new Print_statementContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(495); match(PRINT);
				setState(496); expression(0);
				setState(498);
				switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
				case 1:
					{
					setState(497); match(SEMI);
					}
					break;
				}
				}
				break;

			case 11:
				_localctx = new Raiseerror_statementContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(500); match(RAISERROR);
				setState(501); match(LR_BRACKET);
				setState(502);
				((Raiseerror_statementContext)_localctx).msg = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 425)) & ~0x3f) == 0 && ((1L << (_la - 425)) & ((1L << (LOCAL_ID - 425)) | (1L << (DECIMAL - 425)) | (1L << (STRING - 425)))) != 0)) ) {
					((Raiseerror_statementContext)_localctx).msg = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(503); match(COMMA);
				setState(506);
				switch (_input.LA(1)) {
				case DECIMAL:
				case PLUS:
				case MINUS:
					{
					setState(504); number();
					}
					break;
				case LOCAL_ID:
					{
					setState(505); match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(508); match(COMMA);
				setState(511);
				switch (_input.LA(1)) {
				case DECIMAL:
				case PLUS:
				case MINUS:
					{
					setState(509); number();
					}
					break;
				case LOCAL_ID:
					{
					setState(510); match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(513); match(COMMA);
					setState(516);
					switch (_input.LA(1)) {
					case DECIMAL:
					case STRING:
					case BINARY:
					case FLOAT:
					case REAL:
					case DOLLAR:
					case PLUS:
					case MINUS:
						{
						setState(514); constant();
						}
						break;
					case LOCAL_ID:
						{
						setState(515); match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(522);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(523); match(RR_BRACKET);
				setState(525);
				switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					setState(524); match(SEMI);
					}
					break;
				}
				}
				break;

			case 12:
				_localctx = new Break_statementContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(527); match(BREAK);
				setState(529);
				switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
				case 1:
					{
					setState(528); match(SEMI);
					}
					break;
				}
				}
				break;

			case 13:
				_localctx = new Continue_statementContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(531); match(CONTINUE);
				setState(533);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(532); match(SEMI);
					}
					break;
				}
				}
				break;

			case 14:
				_localctx = new Goto_statementContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(535); match(GOTO);
				setState(536); id();
				setState(538);
				switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					setState(537); match(SEMI);
					}
					break;
				}
				}
				break;

			case 15:
				_localctx = new Goto_statementContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(540); id();
				setState(541); match(COLON);
				setState(543);
				switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					setState(542); match(SEMI);
					}
					break;
				}
				}
				break;

			case 16:
				_localctx = new Parameter_statementContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(545); match(PARAMETERS);
				setState(546); id();
				setState(551);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,41,_ctx);
				while ( _alt!=2 && _alt!=-1 ) {
					if ( _alt==1 ) {
						{
						{
						setState(547); match(COMMA);
						setState(548); id();
						}
						} 
					}
					setState(553);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,41,_ctx);
				}
				setState(555);
				switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					setState(554); match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Another_statementContext extends ParserRuleContext {
		public Create_schemaContext create_schema() {
			return getRuleContext(Create_schemaContext.class,0);
		}
		public Call_statementContext call_statement() {
			return getRuleContext(Call_statementContext.class,0);
		}
		public Use_statementContext use_statement() {
			return getRuleContext(Use_statementContext.class,0);
		}
		public Transaction_statementContext transaction_statement() {
			return getRuleContext(Transaction_statementContext.class,0);
		}
		public Go_statementContext go_statement() {
			return getRuleContext(Go_statementContext.class,0);
		}
		public Cursor_statementContext cursor_statement() {
			return getRuleContext(Cursor_statementContext.class,0);
		}
		public Grant_rightsContext grant_rights() {
			return getRuleContext(Grant_rightsContext.class,0);
		}
		public Set_statementContext set_statement() {
			return getRuleContext(Set_statementContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public Comment_on_statementContext comment_on_statement() {
			return getRuleContext(Comment_on_statementContext.class,0);
		}
		public Declare_statementContext declare_statement() {
			return getRuleContext(Declare_statementContext.class,0);
		}
		public Message_statementContext message_statement() {
			return getRuleContext(Message_statementContext.class,0);
		}
		public Declare_local_temporary_tableContext declare_local_temporary_table() {
			return getRuleContext(Declare_local_temporary_tableContext.class,0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_another_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitAnother_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Another_statementContext another_statement() throws RecognitionException {
		Another_statementContext _localctx = new Another_statementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_another_statement);
		try {
			setState(572);
			switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(559); declare_statement();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(560); declare_local_temporary_table();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(561); cursor_statement();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(562); execute_statement();
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(563); set_statement();
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(564); transaction_statement();
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(565); go_statement();
				}
				break;

			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(566); use_statement();
				}
				break;

			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(567); call_statement();
				}
				break;

			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(568); grant_rights();
				}
				break;

			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(569); create_schema();
				}
				break;

			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(570); comment_on_statement();
				}
				break;

			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(571); message_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public Token table_var;
		public Token cursor_var;
		public List<TerminalNode> LOCAL_ID() { return getTokens(sybaseiqParser.LOCAL_ID); }
		public TerminalNode PERCENT() { return getToken(sybaseiqParser.PERCENT, 0); }
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Table_sourceContext table_source(int i) {
			return getRuleContext(Table_sourceContext.class,i);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(sybaseiqParser.CURRENT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID(int i) {
			return getToken(sybaseiqParser.LOCAL_ID, i);
		}
		public TerminalNode TOP() { return getToken(sybaseiqParser.TOP, 0); }
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public TerminalNode FROM(int i) {
			return getToken(sybaseiqParser.FROM, i);
		}
		public TerminalNode WHERE() { return getToken(sybaseiqParser.WHERE, 0); }
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(sybaseiqParser.GLOBAL, 0); }
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public List<Table_sourceContext> table_source() {
			return getRuleContexts(Table_sourceContext.class);
		}
		public TerminalNode OF() { return getToken(sybaseiqParser.OF, 0); }
		public TerminalNode DELETE() { return getToken(sybaseiqParser.DELETE, 0); }
		public List<TerminalNode> FROM() { return getTokens(sybaseiqParser.FROM); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_delete_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(575);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(574); with_expression();
				}
			}

			setState(577); match(DELETE);
			setState(585);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(578); match(TOP);
				setState(579); match(LR_BRACKET);
				setState(580); expression(0);
				setState(581); match(RR_BRACKET);
				setState(583);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(582); match(PERCENT);
					}
				}

				}
			}

			setState(588);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(587); match(FROM);
				}
			}

			setState(594);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				setState(590); table_source();
				}
				break;

			case 2:
				{
				setState(591); ddl_object();
				}
				break;

			case 3:
				{
				setState(592); rowset_function_limited();
				}
				break;

			case 4:
				{
				setState(593); ((Delete_statementContext)_localctx).table_var = match(LOCAL_ID);
				}
				break;
			}
			setState(597);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				setState(596); output_clause();
				}
				break;
			}
			setState(608);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				setState(599); match(FROM);
				setState(600); table_source();
				setState(605);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,51,_ctx);
				while ( _alt!=2 && _alt!=-1 ) {
					if ( _alt==1 ) {
						{
						{
						setState(601); match(COMMA);
						setState(602); table_source();
						}
						} 
					}
					setState(607);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,51,_ctx);
				}
				}
				break;
			}
			setState(623);
			switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				setState(610); match(WHERE);
				setState(621);
				switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					setState(611); search_condition();
					}
					break;

				case 2:
					{
					setState(612); match(CURRENT);
					setState(613); match(OF);
					setState(619);
					switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
					case 1:
						{
						setState(615);
						switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
						case 1:
							{
							setState(614); match(GLOBAL);
							}
							break;
						}
						setState(617); cursor_name();
						}
						break;

					case 2:
						{
						setState(618); ((Delete_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			setState(626);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				setState(625); for_clause();
				}
				break;
			}
			setState(629);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				setState(628); option_clause();
				}
				break;
			}
			setState(632);
			switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				setState(631); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public Ddl_objectContext tablename;
		public ExpressionContext servername;
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public TerminalNode INTO() { return getToken(sybaseiqParser.INTO, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(sybaseiqParser.INSERT, 0); }
		public TerminalNode LOCATION() { return getToken(sybaseiqParser.LOCATION, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public Dml_table_sourceContext dml_table_source() {
			return getRuleContext(Dml_table_sourceContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(sybaseiqParser.DEFAULT, 0); }
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public Location_optionsContext location_options() {
			return getRuleContext(Location_optionsContext.class,0);
		}
		public Insert_select_load_optionsContext insert_select_load_options() {
			return getRuleContext(Insert_select_load_optionsContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(sybaseiqParser.VALUES, 0); }
		public Insert_load_optionsContext insert_load_options() {
			return getRuleContext(Insert_load_optionsContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(635);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(634); with_expression();
				}
			}

			setState(637); match(INSERT);
			setState(639);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(638); match(INTO);
				}
			}

			setState(643);
			switch (_input.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(641); ((Insert_statementContext)_localctx).tablename = ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(642); rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(649);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(645); match(LR_BRACKET);
				setState(646); column_name_list();
				setState(647); match(RR_BRACKET);
				}
			}

			setState(652);
			_la = _input.LA(1);
			if (_la==LIMIT || _la==NOTIFY || _la==SKIP) {
				{
				setState(651); insert_load_options();
				}
			}

			setState(655);
			_la = _input.LA(1);
			if (((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (IGNORE - 132)) | (1L << (LOG - 132)) | (1L << (MESSAGE - 132)))) != 0) || _la==WORD) {
				{
				setState(654); insert_select_load_options();
				}
			}

			setState(659);
			_la = _input.LA(1);
			if (_la==LOCATION) {
				{
				setState(657); match(LOCATION);
				setState(658); ((Insert_statementContext)_localctx).servername = expression(0);
				}
			}

			setState(662);
			_la = _input.LA(1);
			if (_la==PACKETSIZE || _la==QUOTED_IDENTIFIER || _la==ENCRYPTED || _la==ISOLATION) {
				{
				setState(661); location_options();
				}
			}

			setState(684);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(664); match(VALUES);
				setState(665); match(LR_BRACKET);
				setState(666); expression_list();
				setState(667); match(RR_BRACKET);
				setState(675);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(668); match(COMMA);
					setState(669); match(LR_BRACKET);
					setState(670); expression_list();
					setState(671); match(RR_BRACKET);
					}
					}
					setState(677);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(678); derived_table();
				}
				break;
			case EXEC:
			case EXECUTE:
				{
				setState(680); execute_statement();
				}
				break;
			case SELECT:
				{
				setState(681); dml_table_source();
				}
				break;
			case DEFAULT:
				{
				setState(682); match(DEFAULT);
				setState(683); match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(687);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				setState(686); for_clause();
				}
				break;
			}
			setState(690);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				setState(689); option_clause();
				}
				break;
			}
			setState(693);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				setState(692); subquery();
				}
				break;
			}
			setState(696);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				setState(695); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(699);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(698); with_expression();
				}
			}

			setState(701); query_expression();
			setState(703);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				setState(702); order_by_clause();
				}
				break;
			}
			setState(706);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				setState(705); for_clause();
				}
				break;
			}
			setState(709);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				setState(708); option_clause();
				}
				break;
			}
			setState(712);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				setState(711); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode SET() { return getToken(sybaseiqParser.SET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(sybaseiqParser.LOCAL_ID, 0); }
		public TerminalNode PERCENT() { return getToken(sybaseiqParser.PERCENT, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Table_sourceContext table_source(int i) {
			return getRuleContext(Table_sourceContext.class,i);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public TerminalNode CURRENT() { return getToken(sybaseiqParser.CURRENT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(sybaseiqParser.TOP, 0); }
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(sybaseiqParser.WHERE, 0); }
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(sybaseiqParser.GLOBAL, 0); }
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public List<Table_sourceContext> table_source() {
			return getRuleContexts(Table_sourceContext.class);
		}
		public Search_condition_listContext search_condition_list() {
			return getRuleContext(Search_condition_listContext.class,0);
		}
		public TerminalNode OF() { return getToken(sybaseiqParser.OF, 0); }
		public TerminalNode UPDATE() { return getToken(sybaseiqParser.UPDATE, 0); }
		public TerminalNode FROM() { return getToken(sybaseiqParser.FROM, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_update_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(715);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(714); with_expression();
				}
			}

			setState(717); match(UPDATE);
			setState(725);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(718); match(TOP);
				setState(719); match(LR_BRACKET);
				setState(720); expression(0);
				setState(721); match(RR_BRACKET);
				setState(723);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(722); match(PERCENT);
					}
				}

				}
			}

			setState(729);
			switch (_input.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(727); ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(728); rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(732);
			_la = _input.LA(1);
			if (_la==AS || _la==FORCESEEK || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ABSOLUTE - 300)) | (1L << (APPLY - 300)) | (1L << (AUTO - 300)) | (1L << (AVG - 300)) | (1L << (BASE64 - 300)) | (1L << (CALLER - 300)) | (1L << (CAST - 300)) | (1L << (CATCH - 300)) | (1L << (CHECKSUM_AGG - 300)) | (1L << (COMMITTED - 300)) | (1L << (CONCAT - 300)) | (1L << (COOKIE - 300)) | (1L << (COUNT - 300)) | (1L << (COUNT_BIG - 300)) | (1L << (DELAY - 300)) | (1L << (DELETED - 300)) | (1L << (DENSE_RANK - 300)) | (1L << (DISABLE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (FAST - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FIRST - 300)) | (1L << (FOLLOWING - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (FULLSCAN - 300)) | (1L << (GLOBAL - 300)) | (1L << (GO - 300)) | (1L << (GROUPING - 300)) | (1L << (GROUPING_ID - 300)) | (1L << (HASH - 300)) | (1L << (INSENSITIVE - 300)) | (1L << (INSERTED - 300)) | (1L << (ISOLATION - 300)) | (1L << (KEEPFIXED - 300)) | (1L << (KEYSET - 300)) | (1L << (LAST - 300)) | (1L << (LEVEL - 300)) | (1L << (LOCAL - 300)) | (1L << (LOCK_ESCALATION - 300)) | (1L << (LOGIN - 300)) | (1L << (LOOP - 300)) | (1L << (MARK - 300)) | (1L << (MAX - 300)) | (1L << (MIN - 300)) | (1L << (MODIFY - 300)) | (1L << (NEXT - 300)) | (1L << (NAME - 300)) | (1L << (NOCOUNT - 300)) | (1L << (NOEXPAND - 300)) | (1L << (NORECOMPUTE - 300)) | (1L << (NTILE - 300)) | (1L << (NUMBER - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (OFFSET - 364)) | (1L << (ONLY - 364)) | (1L << (OPTIMISTIC - 364)) | (1L << (OPTIMIZE - 364)) | (1L << (OUT - 364)) | (1L << (OUTPUT - 364)) | (1L << (OWNER - 364)) | (1L << (PARTITION - 364)) | (1L << (PATH - 364)) | (1L << (PRECEDING - 364)) | (1L << (PRIOR - 364)) | (1L << (RANGE - 364)) | (1L << (RANK - 364)) | (1L << (READONLY - 364)) | (1L << (READ_ONLY - 364)) | (1L << (RECOMPILE - 364)) | (1L << (RELATIVE - 364)) | (1L << (REMOTE - 364)) | (1L << (REPEATABLE - 364)) | (1L << (ROOT - 364)) | (1L << (ROW - 364)) | (1L << (ROWGUID - 364)) | (1L << (ROWS - 364)) | (1L << (ROW_NUMBER - 364)) | (1L << (SAMPLE - 364)) | (1L << (SCHEMABINDING - 364)) | (1L << (SCROLL - 364)) | (1L << (SCROLL_LOCKS - 364)) | (1L << (SELF - 364)) | (1L << (SERIALIZABLE - 364)) | (1L << (SNAPSHOT - 364)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 364)) | (1L << (STATIC - 364)) | (1L << (STATS_STREAM - 364)) | (1L << (STDEV - 364)) | (1L << (STDEVP - 364)) | (1L << (SUM - 364)) | (1L << (THROW - 364)) | (1L << (TIES - 364)) | (1L << (TIME - 364)) | (1L << (TRY - 364)) | (1L << (TYPE - 364)) | (1L << (TYPE_WARNING - 364)) | (1L << (UNBOUNDED - 364)) | (1L << (UNCOMMITTED - 364)) | (1L << (UNKNOWN - 364)) | (1L << (USING - 364)) | (1L << (VAR - 364)) | (1L << (VARP - 364)) | (1L << (VIEW_METADATA - 364)) | (1L << (WORK - 364)) | (1L << (XML - 364)) | (1L << (XMLNAMESPACES - 364)) | (1L << (DOUBLE_QUOTE_ID - 364)) | (1L << (SQUARE_BRACKET_ID - 364)) | (1L << (ID - 364)))) != 0)) {
				{
				setState(731); as_table_alias();
				}
			}

			setState(734); match(SET);
			setState(735); update_elem();
			setState(740);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,84,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					setState(736); match(COMMA);
					setState(737); update_elem();
					}
					} 
				}
				setState(742);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,84,_ctx);
			}
			setState(744);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				setState(743); output_clause();
				}
				break;
			}
			setState(755);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				setState(746); match(FROM);
				setState(747); table_source();
				setState(752);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
				while ( _alt!=2 && _alt!=-1 ) {
					if ( _alt==1 ) {
						{
						{
						setState(748); match(COMMA);
						setState(749); table_source();
						}
						} 
					}
					setState(754);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
				}
				}
				break;
			}
			setState(770);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				setState(757); match(WHERE);
				setState(768);
				switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
				case 1:
					{
					setState(758); search_condition_list();
					}
					break;

				case 2:
					{
					setState(759); match(CURRENT);
					setState(760); match(OF);
					setState(766);
					switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
					case 1:
						{
						setState(762);
						switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
						case 1:
							{
							setState(761); match(GLOBAL);
							}
							break;
						}
						setState(764); cursor_name();
						}
						break;

					case 2:
						{
						setState(765); ((Update_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			setState(773);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				setState(772); for_clause();
				}
				break;
			}
			setState(776);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				setState(775); option_clause();
				}
				break;
			}
			setState(779);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				{
				setState(778); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_clauseContext extends ParserRuleContext {
		public ExpressionContext filename;
		public TerminalNode HEXADECIMAL() { return getToken(sybaseiqParser.HEXADECIMAL, 0); }
		public TerminalNode ESCAPE() { return getToken(sybaseiqParser.ESCAPE, 0); }
		public TerminalNode ALL() { return getToken(sybaseiqParser.ALL, 0); }
		public TerminalNode FORMAT() { return getToken(sybaseiqParser.FORMAT, 0); }
		public TerminalNode APPEND() { return getToken(sybaseiqParser.APPEND, 0); }
		public TerminalNode VERBOSE() { return getToken(sybaseiqParser.VERBOSE, 0); }
		public TerminalNode WITH() { return getToken(sybaseiqParser.WITH, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode COLUMN(int i) {
			return getToken(sybaseiqParser.COLUMN, i);
		}
		public TerminalNode ASIS() { return getToken(sybaseiqParser.ASIS, 0); }
		public TerminalNode ENCODING() { return getToken(sybaseiqParser.ENCODING, 0); }
		public List<TerminalNode> COLUMN() { return getTokens(sybaseiqParser.COLUMN); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode OFF() { return getToken(sybaseiqParser.OFF, 0); }
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public TerminalNode NAMES() { return getToken(sybaseiqParser.NAMES, 0); }
		public TerminalNode QUOTE() { return getToken(sybaseiqParser.QUOTE, 0); }
		public TerminalNode CHARACTER() { return getToken(sybaseiqParser.CHARACTER, 0); }
		public Output_formatContext output_format() {
			return getRuleContext(Output_formatContext.class,0);
		}
		public TerminalNode DELIMITED() { return getToken(sybaseiqParser.DELIMITED, 0); }
		public TerminalNode BY() { return getToken(sybaseiqParser.BY, 0); }
		public TerminalNode OUTPUT() { return getToken(sybaseiqParser.OUTPUT, 0); }
		public TerminalNode WIDTHS() { return getToken(sybaseiqParser.WIDTHS, 0); }
		public TerminalNode TO() { return getToken(sybaseiqParser.TO, 0); }
		public Output_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitOutput_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_clauseContext output_clause() throws RecognitionException {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_output_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(781); match(OUTPUT);
			setState(782); match(TO);
			setState(783); ((Output_clauseContext)_localctx).filename = expression(0);
			setState(785);
			_la = _input.LA(1);
			if (_la==APPEND) {
				{
				setState(784); match(APPEND);
				}
			}

			setState(788);
			_la = _input.LA(1);
			if (_la==VERBOSE) {
				{
				setState(787); match(VERBOSE);
				}
			}

			setState(792);
			_la = _input.LA(1);
			if (_la==FORMAT) {
				{
				setState(790); match(FORMAT);
				setState(791); output_format();
				}
			}

			setState(797);
			_la = _input.LA(1);
			if (_la==ESCAPE) {
				{
				setState(794); match(ESCAPE);
				setState(795); match(CHARACTER);
				setState(796); expression(0);
				}
			}

			setState(802);
			_la = _input.LA(1);
			if (_la==DELIMITED) {
				{
				setState(799); match(DELIMITED);
				setState(800); match(BY);
				setState(801); expression(0);
				}
			}

			setState(809);
			_la = _input.LA(1);
			if (_la==QUOTE) {
				{
				setState(804); match(QUOTE);
				setState(805); expression(0);
				setState(807);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(806); match(ALL);
					}
				}

				}
			}

			setState(818);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(811); match(COLUMN);
				setState(812); match(WIDTHS);
				setState(813); expression(0);
				setState(816);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(814); match(COMMA);
					setState(815); expression(0);
					}
				}

				}
			}

			setState(822);
			_la = _input.LA(1);
			if (_la==HEXADECIMAL) {
				{
				setState(820); match(HEXADECIMAL);
				setState(821);
				_la = _input.LA(1);
				if ( !(_la==ASIS || _la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			{
			setState(824); match(ENCODING);
			setState(825); expression(0);
			}
			{
			setState(827); match(WITH);
			setState(828); match(COLUMN);
			setState(829); match(NAMES);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_formatContext extends ParserRuleContext {
		public TerminalNode HTML() { return getToken(sybaseiqParser.HTML, 0); }
		public TerminalNode TEXT() { return getToken(sybaseiqParser.TEXT, 0); }
		public TerminalNode FIXED() { return getToken(sybaseiqParser.FIXED, 0); }
		public TerminalNode SQL() { return getToken(sybaseiqParser.SQL, 0); }
		public TerminalNode XML() { return getToken(sybaseiqParser.XML, 0); }
		public Output_formatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_format; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitOutput_format(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_formatContext output_format() throws RecognitionException {
		Output_formatContext _localctx = new Output_formatContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_output_format);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(831);
			_la = _input.LA(1);
			if ( !(_la==FIXED || _la==HTML || _la==SQL || _la==TEXT || _la==XML) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_load_optionsContext extends ParserRuleContext {
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(sybaseiqParser.LIMIT, 0); }
		public TerminalNode NOTIFY() { return getToken(sybaseiqParser.NOTIFY, 0); }
		public TerminalNode SKIP() { return getToken(sybaseiqParser.SKIP, 0); }
		public Insert_load_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_load_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitInsert_load_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_load_optionsContext insert_load_options() throws RecognitionException {
		Insert_load_optionsContext _localctx = new Insert_load_optionsContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_insert_load_options);
		try {
			setState(839);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(833); match(LIMIT);
				setState(834); number();
				}
				break;
			case NOTIFY:
				enterOuterAlt(_localctx, 2);
				{
				setState(835); match(NOTIFY);
				setState(836); number();
				}
				break;
			case SKIP:
				enterOuterAlt(_localctx, 3);
				{
				setState(837); match(SKIP);
				setState(838); number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_select_load_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP() { return getToken(sybaseiqParser.SKIP, 0); }
		public List<TerminalNode> LOG() { return getTokens(sybaseiqParser.LOG); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode IGNORE() { return getToken(sybaseiqParser.IGNORE, 0); }
		public Log_whatContext log_what(int i) {
			return getRuleContext(Log_whatContext.class,i);
		}
		public TerminalNode WORD() { return getToken(sybaseiqParser.WORD, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public Constraint_typeContext constraint_type(int i) {
			return getRuleContext(Constraint_typeContext.class,i);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode ROW() { return getToken(sybaseiqParser.ROW, 0); }
		public TerminalNode DELIMITED() { return getToken(sybaseiqParser.DELIMITED, 0); }
		public TerminalNode BY() { return getToken(sybaseiqParser.BY, 0); }
		public TerminalNode ONLY() { return getToken(sybaseiqParser.ONLY, 0); }
		public TerminalNode CONSTRAINT() { return getToken(sybaseiqParser.CONSTRAINT, 0); }
		public List<Log_whatContext> log_what() {
			return getRuleContexts(Log_whatContext.class);
		}
		public TerminalNode LOG(int i) {
			return getToken(sybaseiqParser.LOG, i);
		}
		public TerminalNode MESSAGE() { return getToken(sybaseiqParser.MESSAGE, 0); }
		public List<Constraint_typeContext> constraint_type() {
			return getRuleContexts(Constraint_typeContext.class);
		}
		public Insert_select_load_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_select_load_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitInsert_select_load_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_select_load_optionsContext insert_select_load_options() throws RecognitionException {
		Insert_select_load_optionsContext _localctx = new Insert_select_load_optionsContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_insert_select_load_options);
		int _la;
		try {
			setState(876);
			switch (_input.LA(1)) {
			case WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(841); match(WORD);
				setState(842); match(SKIP);
				setState(843); number();
				}
				break;
			case IGNORE:
				enterOuterAlt(_localctx, 2);
				{
				setState(844); match(IGNORE);
				setState(845); match(CONSTRAINT);
				setState(846); constraint_type();
				setState(851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(847); match(COMMA);
					setState(848); constraint_type();
					}
					}
					setState(853);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case MESSAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(854); match(MESSAGE);
				setState(855); match(LOG);
				setState(856); expression(0);
				setState(857); match(ROW);
				setState(858); match(LOG);
				setState(859); expression(0);
				setState(870);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(860); match(ONLY);
					setState(861); match(LOG);
					setState(862); log_what();
					setState(867);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(863); match(COMMA);
						setState(864); log_what();
						}
						}
						setState(869);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case LOG:
				enterOuterAlt(_localctx, 4);
				{
				setState(872); match(LOG);
				setState(873); match(DELIMITED);
				setState(874); match(BY);
				setState(875); expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_typeContext extends ParserRuleContext {
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(sybaseiqParser.CHECK, 0); }
		public TerminalNode ALL() { return getToken(sybaseiqParser.ALL, 0); }
		public TerminalNode VALUE() { return getToken(sybaseiqParser.VALUE, 0); }
		public TerminalNode DATA() { return getToken(sybaseiqParser.DATA, 0); }
		public TerminalNode KEY() { return getToken(sybaseiqParser.KEY, 0); }
		public TerminalNode NULL() { return getToken(sybaseiqParser.NULL, 0); }
		public TerminalNode FOREIGN() { return getToken(sybaseiqParser.FOREIGN, 0); }
		public TerminalNode UNIQUE() { return getToken(sybaseiqParser.UNIQUE, 0); }
		public Constraint_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitConstraint_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_typeContext constraint_type() throws RecognitionException {
		Constraint_typeContext _localctx = new Constraint_typeContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_constraint_type);
		try {
			setState(892);
			switch (_input.LA(1)) {
			case CHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(878); match(CHECK);
				setState(879); number();
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(880); match(UNIQUE);
				setState(881); number();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 3);
				{
				setState(882); match(NULL);
				setState(883); number();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 4);
				{
				setState(884); match(FOREIGN);
				setState(885); match(KEY);
				setState(886); number();
				}
				break;
			case DATA:
				enterOuterAlt(_localctx, 5);
				{
				setState(887); match(DATA);
				setState(888); match(VALUE);
				setState(889); number();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 6);
				{
				setState(890); match(ALL);
				setState(891); number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Log_whatContext extends ParserRuleContext {
		public TerminalNode WORD() { return getToken(sybaseiqParser.WORD, 0); }
		public TerminalNode CHECK() { return getToken(sybaseiqParser.CHECK, 0); }
		public TerminalNode ALL() { return getToken(sybaseiqParser.ALL, 0); }
		public TerminalNode VALUE() { return getToken(sybaseiqParser.VALUE, 0); }
		public TerminalNode DATA() { return getToken(sybaseiqParser.DATA, 0); }
		public TerminalNode KEY() { return getToken(sybaseiqParser.KEY, 0); }
		public TerminalNode NULL() { return getToken(sybaseiqParser.NULL, 0); }
		public TerminalNode FOREIGN() { return getToken(sybaseiqParser.FOREIGN, 0); }
		public TerminalNode UNIQUE() { return getToken(sybaseiqParser.UNIQUE, 0); }
		public Log_whatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_log_what; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitLog_what(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Log_whatContext log_what() throws RecognitionException {
		Log_whatContext _localctx = new Log_whatContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_log_what);
		try {
			setState(903);
			switch (_input.LA(1)) {
			case CHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(894); match(CHECK);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(895); match(ALL);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 3);
				{
				setState(896); match(NULL);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(897); match(UNIQUE);
				}
				break;
			case DATA:
				enterOuterAlt(_localctx, 5);
				{
				setState(898); match(DATA);
				setState(899); match(VALUE);
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 6);
				{
				setState(900); match(FOREIGN);
				setState(901); match(KEY);
				}
				break;
			case WORD:
				enterOuterAlt(_localctx, 7);
				{
				setState(902); match(WORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Location_optionsContext extends ParserRuleContext {
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(sybaseiqParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(sybaseiqParser.SERIALIZABLE, 0); }
		public TerminalNode ENCRYPTED() { return getToken(sybaseiqParser.ENCRYPTED, 0); }
		public TerminalNode LEVEL() { return getToken(sybaseiqParser.LEVEL, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(sybaseiqParser.UNCOMMITTED, 0); }
		public TerminalNode PASSWORD() { return getToken(sybaseiqParser.PASSWORD, 0); }
		public TerminalNode ISOLATION() { return getToken(sybaseiqParser.ISOLATION, 0); }
		public TerminalNode PACKETSIZE() { return getToken(sybaseiqParser.PACKETSIZE, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public TerminalNode OFF() { return getToken(sybaseiqParser.OFF, 0); }
		public TerminalNode COMMITTED() { return getToken(sybaseiqParser.COMMITTED, 0); }
		public TerminalNode READ() { return getToken(sybaseiqParser.READ, 0); }
		public Location_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_location_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitLocation_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Location_optionsContext location_options() throws RecognitionException {
		Location_optionsContext _localctx = new Location_optionsContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_location_options);
		int _la;
		try {
			setState(920);
			switch (_input.LA(1)) {
			case ENCRYPTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(905); match(ENCRYPTED);
				setState(906); match(PASSWORD);
				}
				break;
			case PACKETSIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(907); match(PACKETSIZE);
				setState(908); number();
				}
				break;
			case QUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 3);
				{
				setState(909); match(QUOTED_IDENTIFIER);
				setState(910);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case ISOLATION:
				enterOuterAlt(_localctx, 4);
				{
				setState(911); match(ISOLATION);
				setState(912); match(LEVEL);
				setState(918);
				switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					setState(913); match(READ);
					setState(914); match(UNCOMMITTED);
					}
					break;

				case 2:
					{
					setState(915); match(READ);
					setState(916); match(COMMITTED);
					}
					break;

				case 3:
					{
					setState(917); match(SERIALIZABLE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public IdContext indexname;
		public Table_nameContext tablename;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public TerminalNode CREATE() { return getToken(sybaseiqParser.CREATE, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Index_typeContext index_type() {
			return getRuleContext(Index_typeContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(sybaseiqParser.UNIQUE, 0); }
		public TerminalNode INDEX() { return getToken(sybaseiqParser.INDEX, 0); }
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitCreate_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(922); match(CREATE);
			setState(924);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(923); match(UNIQUE);
				}
			}

			setState(927);
			_la = _input.LA(1);
			if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (CMP - 38)) | (1L << (DATE - 38)) | (1L << (DTTM - 38)))) != 0) || ((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (HG - 125)) | (1L << (HNG - 125)) | (1L << (LF - 125)))) != 0) || _la==TIME) {
				{
				setState(926); index_type();
				}
			}

			setState(929); match(INDEX);
			setState(930); ((Create_indexContext)_localctx).indexname = id();
			setState(931); match(ON);
			setState(932); ((Create_indexContext)_localctx).tablename = table_name();
			setState(933); match(LR_BRACKET);
			setState(934); column_name_list();
			setState(935); match(RR_BRACKET);
			setState(937);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				setState(936); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_typeContext extends ParserRuleContext {
		public TerminalNode DTTM() { return getToken(sybaseiqParser.DTTM, 0); }
		public TerminalNode LF() { return getToken(sybaseiqParser.LF, 0); }
		public TerminalNode DATE() { return getToken(sybaseiqParser.DATE, 0); }
		public TerminalNode CMP() { return getToken(sybaseiqParser.CMP, 0); }
		public TerminalNode TIME() { return getToken(sybaseiqParser.TIME, 0); }
		public TerminalNode HNG() { return getToken(sybaseiqParser.HNG, 0); }
		public TerminalNode HG() { return getToken(sybaseiqParser.HG, 0); }
		public Index_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitIndex_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_typeContext index_type() throws RecognitionException {
		Index_typeContext _localctx = new Index_typeContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_index_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(939);
			_la = _input.LA(1);
			if ( !(((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (CMP - 38)) | (1L << (DATE - 38)) | (1L << (DTTM - 38)))) != 0) || ((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (HG - 125)) | (1L << (HNG - 125)) | (1L << (LF - 125)))) != 0) || _la==TIME) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedureContext extends ParserRuleContext {
		public Procedure_nameContext procedurename;
		public TerminalNode SET() { return getToken(sybaseiqParser.SET, 0); }
		public TerminalNode INVOKER() { return getToken(sybaseiqParser.INVOKER, 0); }
		public TerminalNode DEFINER() { return getToken(sybaseiqParser.DEFINER, 0); }
		public TerminalNode CREATE() { return getToken(sybaseiqParser.CREATE, 0); }
		public Result_columnContext result_column() {
			return getRuleContext(Result_columnContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(sybaseiqParser.TEMPORARY, 0); }
		public TerminalNode OR() { return getToken(sybaseiqParser.OR, 0); }
		public TerminalNode PROCEDURE() { return getToken(sybaseiqParser.PROCEDURE, 0); }
		public TerminalNode NO() { return getToken(sybaseiqParser.NO, 0); }
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public TerminalNode SQL() { return getToken(sybaseiqParser.SQL, 0); }
		public TerminalNode RESULT() { return getToken(sybaseiqParser.RESULT, 0); }
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public TerminalNode EXCEPTION() { return getToken(sybaseiqParser.EXCEPTION, 0); }
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode SECURITY() { return getToken(sybaseiqParser.SECURITY, 0); }
		public TerminalNode REPLACE() { return getToken(sybaseiqParser.REPLACE, 0); }
		public TerminalNode RESUME() { return getToken(sybaseiqParser.RESUME, 0); }
		public Create_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitCreate_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedureContext create_procedure() throws RecognitionException {
		Create_procedureContext _localctx = new Create_procedureContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_create_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(941); match(CREATE);
			setState(945);
			switch (_input.LA(1)) {
			case OR:
				{
				{
				setState(942); match(OR);
				setState(943); match(REPLACE);
				}
				}
				break;
			case TEMPORARY:
				{
				{
				setState(944); match(TEMPORARY);
				}
				}
				break;
			case PROCEDURE:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(947); match(PROCEDURE);
			setState(948); ((Create_procedureContext)_localctx).procedurename = procedure_name();
			setState(950);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(949); match(LR_BRACKET);
				}
				break;
			}
			setState(960);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				setState(952); procedure_param();
				setState(957);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,119,_ctx);
				while ( _alt!=2 && _alt!=-1 ) {
					if ( _alt==1 ) {
						{
						{
						setState(953); match(COMMA);
						setState(954); procedure_param();
						}
						} 
					}
					setState(959);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,119,_ctx);
				}
				}
				break;
			}
			setState(963);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				setState(962); match(RR_BRACKET);
				}
				break;
			}
			setState(970);
			switch (_input.LA(1)) {
			case RESULT:
				{
				setState(965); match(RESULT);
				setState(966); result_column();
				}
				break;
			case NO:
				{
				setState(967); match(NO);
				setState(968); match(RESULT);
				setState(969); match(SET);
				}
				break;
			case EOF:
			case ALTER:
			case AS:
			case BEGIN:
			case BREAK:
			case CALL:
			case CASE:
			case CLOSE:
			case COALESCE:
			case COMMENT:
			case COMMIT:
			case CONTINUE:
			case CONVERT:
			case CREATE:
			case CROSS:
			case CURRENT:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DROP:
			case ELSE:
			case ELSEIF:
			case END:
			case ENDIF:
			case EXCEPT:
			case EXCEPTION:
			case EXEC:
			case EXECUTE:
			case FETCH:
			case FOR:
			case FORCESEEK:
			case FROM:
			case FULL:
			case GOTO:
			case GRANT:
			case GROUP:
			case HAVING:
			case IDENTITY:
			case IF:
			case INNER:
			case INSERT:
			case INTERSECT:
			case INTO:
			case JOIN:
			case LEFT:
			case MERGE:
			case MESSAGE:
			case NULL:
			case NULLIF:
			case ON:
			case OPEN:
			case OPTION:
			case ORDER:
			case OUTER:
			case PARAMETERS:
			case PRINT:
			case RAISERROR:
			case REPLACE:
			case RESIGNAL:
			case RETURN:
			case RIGHT:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SESSION_USER:
			case SET:
			case SQL:
			case SYSTEM_USER:
			case TRUNCATE:
			case UNION:
			case UPDATE:
			case USE:
			case WAITFOR:
			case WHERE:
			case WHILE:
			case WITH:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case BINARY_CHECKSUM:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case FAST:
			case FAST_FORWARD:
			case FINALLY:
			case FIRST:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MOD:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
			case PLUS:
			case MINUS:
			case BIT_NOT:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(975);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(972); match(SQL);
				setState(973); match(SECURITY);
				setState(974);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(980);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				setState(977); match(ON);
				setState(978); match(EXCEPTION);
				setState(979); match(RESUME);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_paramContext extends ParserRuleContext {
		public Column_nameContext columnname;
		public Declare_typeContext declaretype;
		public TerminalNode IN() { return getToken(sybaseiqParser.IN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode OUT() { return getToken(sybaseiqParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(sybaseiqParser.INOUT, 0); }
		public Declare_typeContext declare_type() {
			return getRuleContext(Declare_typeContext.class,0);
		}
		public Procedure_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_param; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitProcedure_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_paramContext procedure_param() throws RecognitionException {
		Procedure_paramContext _localctx = new Procedure_paramContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_procedure_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(982);
			_la = _input.LA(1);
			if ( !(_la==IN || _la==INOUT || _la==OUT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(983); ((Procedure_paramContext)_localctx).columnname = column_name();
			setState(984); ((Procedure_paramContext)_localctx).declaretype = declare_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_columnContext extends ParserRuleContext {
		public Column_nameContext columnname;
		public Declare_typeContext declaretype;
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Declare_typeContext> declare_type() {
			return getRuleContexts(Declare_typeContext.class);
		}
		public Declare_typeContext declare_type(int i) {
			return getRuleContext(Declare_typeContext.class,i);
		}
		public Result_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_column; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitResult_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Result_columnContext result_column() throws RecognitionException {
		Result_columnContext _localctx = new Result_columnContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_result_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(986); match(LR_BRACKET);
			setState(987); ((Result_columnContext)_localctx).columnname = column_name();
			setState(988); ((Result_columnContext)_localctx).declaretype = declare_type();
			setState(995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(989); match(COMMA);
				setState(990); ((Result_columnContext)_localctx).columnname = column_name();
				setState(991); ((Result_columnContext)_localctx).declaretype = declare_type();
				}
				}
				setState(997);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(998); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_statisticsContext extends ParserRuleContext {
		public IdContext statisticname;
		public Table_name_with_hintContext tablename;
		public On_offContext INCREMENTAL;
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(sybaseiqParser.CREATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STATS_STREAM() { return getToken(sybaseiqParser.STATS_STREAM, 0); }
		public TerminalNode PERCENT() { return getToken(sybaseiqParser.PERCENT, 0); }
		public TerminalNode WITH() { return getToken(sybaseiqParser.WITH, 0); }
		public TerminalNode FULLSCAN() { return getToken(sybaseiqParser.FULLSCAN, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(sybaseiqParser.NORECOMPUTE, 0); }
		public TerminalNode STATISTICS() { return getToken(sybaseiqParser.STATISTICS, 0); }
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(sybaseiqParser.ROWS, 0); }
		public TerminalNode SAMPLE() { return getToken(sybaseiqParser.SAMPLE, 0); }
		public TerminalNode DECIMAL() { return getToken(sybaseiqParser.DECIMAL, 0); }
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_statistics; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitCreate_statistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_statisticsContext create_statistics() throws RecognitionException {
		Create_statisticsContext _localctx = new Create_statisticsContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_create_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1000); match(CREATE);
			setState(1001); match(STATISTICS);
			setState(1002); ((Create_statisticsContext)_localctx).statisticname = id();
			setState(1003); match(ON);
			setState(1004); ((Create_statisticsContext)_localctx).tablename = table_name_with_hint();
			setState(1005); match(LR_BRACKET);
			setState(1006); column_name_list();
			setState(1007); match(RR_BRACKET);
			setState(1024);
			switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				setState(1008); match(WITH);
				setState(1014);
				switch (_input.LA(1)) {
				case FULLSCAN:
					{
					setState(1009); match(FULLSCAN);
					}
					break;
				case SAMPLE:
					{
					setState(1010); match(SAMPLE);
					setState(1011); match(DECIMAL);
					setState(1012);
					_la = _input.LA(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				case STATS_STREAM:
					{
					setState(1013); match(STATS_STREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1018);
				switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					setState(1016); match(COMMA);
					setState(1017); match(NORECOMPUTE);
					}
					break;
				}
				setState(1022);
				switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					setState(1020); match(COMMA);
					setState(1021); ((Create_statisticsContext)_localctx).INCREMENTAL = on_off();
					}
					break;
				}
				}
				break;
			}
			setState(1027);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				setState(1026); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public Table_nameContext tablename;
		public TerminalNode IN() { return getToken(sybaseiqParser.IN, 0); }
		public TerminalNode DEFAULT() { return getToken(sybaseiqParser.DEFAULT, 0); }
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(sybaseiqParser.CREATE, 0); }
		public List<Column_def_table_constraintContext> column_def_table_constraint() {
			return getRuleContexts(Column_def_table_constraintContext.class);
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return getRuleContext(Column_def_table_constraintContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(sybaseiqParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitCreate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_create_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1029); match(CREATE);
			setState(1030); match(TABLE);
			setState(1031); ((Create_tableContext)_localctx).tablename = table_name();
			setState(1032); match(LR_BRACKET);
			setState(1033); column_def_table_constraint();
			setState(1040);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,132,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					setState(1035);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1034); match(COMMA);
						}
					}

					setState(1037); column_def_table_constraint();
					}
					} 
				}
				setState(1042);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,132,_ctx);
			}
			setState(1044);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1043); match(COMMA);
				}
			}

			setState(1046); match(RR_BRACKET);
			setState(1052);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				setState(1047); match(IN);
				setState(1048); id();
				}
				break;

			case 2:
				{
				setState(1049); match(ON);
				setState(1050); id();
				}
				break;

			case 3:
				{
				setState(1051); match(DEFAULT);
				}
				break;
			}
			setState(1055);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				setState(1054); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public View_nameContext viewname;
		public TerminalNode AS() { return getToken(sybaseiqParser.AS, 0); }
		public TerminalNode CHECK() { return getToken(sybaseiqParser.CHECK, 0); }
		public TerminalNode VIEW() { return getToken(sybaseiqParser.VIEW, 0); }
		public TerminalNode CREATE() { return getToken(sybaseiqParser.CREATE, 0); }
		public List<View_attributeContext> view_attribute() {
			return getRuleContexts(View_attributeContext.class);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public View_nameContext view_name() {
			return getRuleContext(View_nameContext.class,0);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> WITH() { return getTokens(sybaseiqParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(sybaseiqParser.WITH, i);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public View_attributeContext view_attribute(int i) {
			return getRuleContext(View_attributeContext.class,i);
		}
		public TerminalNode OPTION() { return getToken(sybaseiqParser.OPTION, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitCreate_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1057); match(CREATE);
			setState(1058); match(VIEW);
			setState(1059); ((Create_viewContext)_localctx).viewname = view_name();
			setState(1071);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1060); match(LR_BRACKET);
				setState(1061); column_name();
				setState(1066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1062); match(COMMA);
					setState(1063); column_name();
					}
					}
					setState(1068);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1069); match(RR_BRACKET);
				}
			}

			setState(1082);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1073); match(WITH);
				setState(1074); view_attribute();
				setState(1079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1075); match(COMMA);
					setState(1076); view_attribute();
					}
					}
					setState(1081);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1084); match(AS);
			setState(1085); select_statement();
			setState(1089);
			switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
			case 1:
				{
				setState(1086); match(WITH);
				setState(1087); match(CHECK);
				setState(1088); match(OPTION);
				}
				break;
			}
			setState(1092);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				{
				setState(1091); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_attributeContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(sybaseiqParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(sybaseiqParser.SCHEMABINDING, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(sybaseiqParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_attribute; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitView_attribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_attributeContext view_attribute() throws RecognitionException {
		View_attributeContext _localctx = new View_attributeContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_view_attribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1094);
			_la = _input.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public Table_nameContext tablename;
		public TerminalNode SET() { return getToken(sybaseiqParser.SET, 0); }
		public TerminalNode TABLE(int i) {
			return getToken(sybaseiqParser.TABLE, i);
		}
		public TerminalNode ALTER() { return getToken(sybaseiqParser.ALTER, 0); }
		public List<TerminalNode> TABLE() { return getTokens(sybaseiqParser.TABLE); }
		public TerminalNode LOCK_ESCALATION() { return getToken(sybaseiqParser.LOCK_ESCALATION, 0); }
		public TerminalNode DISABLE() { return getToken(sybaseiqParser.DISABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Add_listContext add_list() {
			return getRuleContext(Add_listContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(sybaseiqParser.AUTO, 0); }
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitAlter_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_alter_table);
		int _la;
		try {
			setState(1115);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1096); match(ALTER);
				setState(1097); match(TABLE);
				setState(1098); ((Alter_tableContext)_localctx).tablename = table_name();
				setState(1099); match(SET);
				setState(1100); match(LR_BRACKET);
				setState(1101); match(LOCK_ESCALATION);
				setState(1102); match(EQUAL);
				setState(1103);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1104); match(RR_BRACKET);
				setState(1106);
				switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
				case 1:
					{
					setState(1105); match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1108); match(ALTER);
				setState(1109); match(TABLE);
				setState(1110); ((Alter_tableContext)_localctx).tablename = table_name();
				setState(1111); add_list();
				setState(1113);
				switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
				case 1:
					{
					setState(1112); match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_listContext extends ParserRuleContext {
		public List<Column_def_table_constraintContext> column_def_table_constraint() {
			return getRuleContexts(Column_def_table_constraintContext.class);
		}
		public TerminalNode ADD(int i) {
			return getToken(sybaseiqParser.ADD, i);
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return getRuleContext(Column_def_table_constraintContext.class,i);
		}
		public List<TerminalNode> ADD() { return getTokens(sybaseiqParser.ADD); }
		public Add_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitAdd_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_listContext add_list() throws RecognitionException {
		Add_listContext _localctx = new Add_listContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_add_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1117); match(ADD);
			setState(1118); column_def_table_constraint();
			setState(1124);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,145,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					setState(1119); match(COMMA);
					setState(1120); match(ADD);
					setState(1121); column_def_table_constraint();
					}
					} 
				}
				setState(1126);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,145,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_databaseContext extends ParserRuleContext {
		public IdContext database;
		public IdContext new_name;
		public IdContext collation;
		public TerminalNode SET() { return getToken(sybaseiqParser.SET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public TerminalNode DATABASE() { return getToken(sybaseiqParser.DATABASE, 0); }
		public TerminalNode COLLATE() { return getToken(sybaseiqParser.COLLATE, 0); }
		public TerminalNode ALTER() { return getToken(sybaseiqParser.ALTER, 0); }
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Database_optionContext database_option() {
			return getRuleContext(Database_optionContext.class,0);
		}
		public TerminalNode NAME() { return getToken(sybaseiqParser.NAME, 0); }
		public TerminalNode MODIFY() { return getToken(sybaseiqParser.MODIFY, 0); }
		public TerminalNode CURRENT() { return getToken(sybaseiqParser.CURRENT, 0); }
		public Alter_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitAlter_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_databaseContext alter_database() throws RecognitionException {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_alter_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1127); match(ALTER);
			setState(1128); match(DATABASE);
			setState(1131);
			switch (_input.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(1129); ((Alter_databaseContext)_localctx).database = id();
				}
				break;
			case CURRENT:
				{
				setState(1130); match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1141);
			switch (_input.LA(1)) {
			case MODIFY:
				{
				setState(1133); match(MODIFY);
				setState(1134); match(NAME);
				setState(1135); match(EQUAL);
				setState(1136); ((Alter_databaseContext)_localctx).new_name = id();
				}
				break;
			case COLLATE:
				{
				setState(1137); match(COLLATE);
				setState(1138); ((Alter_databaseContext)_localctx).collation = id();
				}
				break;
			case SET:
				{
				setState(1139); match(SET);
				setState(1140); database_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1144);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				setState(1143); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_optionContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public TerminalNode FULL() { return getToken(sybaseiqParser.FULL, 0); }
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Database_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDatabase_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_optionContext database_option() throws RecognitionException {
		Database_optionContext _localctx = new Database_optionContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_database_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1146); id();
			setState(1149);
			switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
			case 1:
				{
				setState(1147); id();
				}
				break;

			case 2:
				{
				setState(1148); match(FULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_indexContext extends ParserRuleContext {
		public IdContext indexname;
		public TerminalNode IF() { return getToken(sybaseiqParser.IF, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(sybaseiqParser.EXISTS, 0); }
		public TerminalNode DROP() { return getToken(sybaseiqParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(sybaseiqParser.INDEX, 0); }
		public Drop_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDrop_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_indexContext drop_index() throws RecognitionException {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_drop_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1151); match(DROP);
			setState(1152); match(INDEX);
			setState(1155);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1153); match(IF);
				setState(1154); match(EXISTS);
				}
			}

			setState(1157); ((Drop_indexContext)_localctx).indexname = id();
			setState(1159);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				setState(1158); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public Func_proc_nameContext procedurename;
		public TerminalNode IF() { return getToken(sybaseiqParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(sybaseiqParser.EXISTS, 0); }
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(sybaseiqParser.PROCEDURE, 0); }
		public TerminalNode DROP() { return getToken(sybaseiqParser.DROP, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_drop_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1161); match(DROP);
			setState(1162); match(PROCEDURE);
			setState(1165);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1163); match(IF);
				setState(1164); match(EXISTS);
				}
			}

			setState(1167); ((Drop_procedureContext)_localctx).procedurename = func_proc_name();
			setState(1169);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				setState(1168); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statisticsContext extends ParserRuleContext {
		public IdContext statisticname;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode DROP() { return getToken(sybaseiqParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(sybaseiqParser.STATISTICS, 0); }
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDrop_statistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_statisticsContext drop_statistics() throws RecognitionException {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_drop_statistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1171); match(DROP);
			setState(1172); match(STATISTICS);
			setState(1176);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(1173); table_name();
				setState(1174); match(DOT);
				}
				break;
			}
			setState(1178); ((Drop_statisticsContext)_localctx).statisticname = id();
			setState(1179); match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public Table_nameContext tablename;
		public TerminalNode IF() { return getToken(sybaseiqParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(sybaseiqParser.EXISTS, 0); }
		public TerminalNode TABLE() { return getToken(sybaseiqParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode DROP() { return getToken(sybaseiqParser.DROP, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDrop_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_drop_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1181); match(DROP);
			setState(1182); match(TABLE);
			setState(1185);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1183); match(IF);
				setState(1184); match(EXISTS);
				}
			}

			setState(1187); ((Drop_tableContext)_localctx).tablename = table_name();
			setState(1189);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(1188); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_viewContext extends ParserRuleContext {
		public View_nameContext viewname;
		public TerminalNode IF() { return getToken(sybaseiqParser.IF, 0); }
		public TerminalNode VIEW() { return getToken(sybaseiqParser.VIEW, 0); }
		public TerminalNode EXISTS() { return getToken(sybaseiqParser.EXISTS, 0); }
		public View_nameContext view_name(int i) {
			return getRuleContext(View_nameContext.class,i);
		}
		public List<View_nameContext> view_name() {
			return getRuleContexts(View_nameContext.class);
		}
		public TerminalNode DROP() { return getToken(sybaseiqParser.DROP, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDrop_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_viewContext drop_view() throws RecognitionException {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_drop_view);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1191); match(DROP);
			setState(1192); match(VIEW);
			setState(1195);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1193); match(IF);
				setState(1194); match(EXISTS);
				}
			}

			setState(1197); ((Drop_viewContext)_localctx).viewname = view_name();
			setState(1202);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,158,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					setState(1198); match(COMMA);
					setState(1199); ((Drop_viewContext)_localctx).viewname = view_name();
					}
					} 
				}
				setState(1204);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,158,_ctx);
			}
			setState(1206);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				setState(1205); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truncate_statementContext extends ParserRuleContext {
		public Table_nameContext tablename;
		public TerminalNode TABLE() { return getToken(sybaseiqParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(sybaseiqParser.TRUNCATE, 0); }
		public Truncate_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitTruncate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_statementContext truncate_statement() throws RecognitionException {
		Truncate_statementContext _localctx = new Truncate_statementContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_truncate_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1208); match(TRUNCATE);
			setState(1209); match(TABLE);
			setState(1210); ((Truncate_statementContext)_localctx).tablename = table_name();
			setState(1212);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				setState(1211); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_function_limitedContext extends ParserRuleContext {
		public OpendatasourceContext opendatasource() {
			return getRuleContext(OpendatasourceContext.class,0);
		}
		public OpenqueryContext openquery() {
			return getRuleContext(OpenqueryContext.class,0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function_limited; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitRowset_function_limited(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowset_function_limitedContext rowset_function_limited() throws RecognitionException {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_rowset_function_limited);
		try {
			setState(1216);
			switch (_input.LA(1)) {
			case OPENQUERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1214); openquery();
				}
				break;
			case OPENDATASOURCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1215); opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpenqueryContext extends ParserRuleContext {
		public IdContext linked_server;
		public Token query;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(sybaseiqParser.STRING, 0); }
		public TerminalNode OPENQUERY() { return getToken(sybaseiqParser.OPENQUERY, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openquery; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitOpenquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpenqueryContext openquery() throws RecognitionException {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_openquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1218); match(OPENQUERY);
			setState(1219); match(LR_BRACKET);
			setState(1220); ((OpenqueryContext)_localctx).linked_server = id();
			setState(1221); match(COMMA);
			setState(1222); ((OpenqueryContext)_localctx).query = match(STRING);
			setState(1223); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpendatasourceContext extends ParserRuleContext {
		public Token provider;
		public Token init;
		public IdContext database;
		public IdContext scheme;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public TerminalNode STRING(int i) {
			return getToken(sybaseiqParser.STRING, i);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(sybaseiqParser.STRING); }
		public TerminalNode OPENDATASOURCE() { return getToken(sybaseiqParser.OPENDATASOURCE, 0); }
		public OpendatasourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opendatasource; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitOpendatasource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpendatasourceContext opendatasource() throws RecognitionException {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_opendatasource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1225); match(OPENDATASOURCE);
			setState(1226); match(LR_BRACKET);
			setState(1227); ((OpendatasourceContext)_localctx).provider = match(STRING);
			setState(1228); match(COMMA);
			setState(1229); ((OpendatasourceContext)_localctx).init = match(STRING);
			setState(1230); match(RR_BRACKET);
			setState(1231); match(DOT);
			setState(1233);
			_la = _input.LA(1);
			if (_la==FORCESEEK || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ABSOLUTE - 300)) | (1L << (APPLY - 300)) | (1L << (AUTO - 300)) | (1L << (AVG - 300)) | (1L << (BASE64 - 300)) | (1L << (CALLER - 300)) | (1L << (CAST - 300)) | (1L << (CATCH - 300)) | (1L << (CHECKSUM_AGG - 300)) | (1L << (COMMITTED - 300)) | (1L << (CONCAT - 300)) | (1L << (COOKIE - 300)) | (1L << (COUNT - 300)) | (1L << (COUNT_BIG - 300)) | (1L << (DELAY - 300)) | (1L << (DELETED - 300)) | (1L << (DENSE_RANK - 300)) | (1L << (DISABLE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (FAST - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FIRST - 300)) | (1L << (FOLLOWING - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (FULLSCAN - 300)) | (1L << (GLOBAL - 300)) | (1L << (GO - 300)) | (1L << (GROUPING - 300)) | (1L << (GROUPING_ID - 300)) | (1L << (HASH - 300)) | (1L << (INSENSITIVE - 300)) | (1L << (INSERTED - 300)) | (1L << (ISOLATION - 300)) | (1L << (KEEPFIXED - 300)) | (1L << (KEYSET - 300)) | (1L << (LAST - 300)) | (1L << (LEVEL - 300)) | (1L << (LOCAL - 300)) | (1L << (LOCK_ESCALATION - 300)) | (1L << (LOGIN - 300)) | (1L << (LOOP - 300)) | (1L << (MARK - 300)) | (1L << (MAX - 300)) | (1L << (MIN - 300)) | (1L << (MODIFY - 300)) | (1L << (NEXT - 300)) | (1L << (NAME - 300)) | (1L << (NOCOUNT - 300)) | (1L << (NOEXPAND - 300)) | (1L << (NORECOMPUTE - 300)) | (1L << (NTILE - 300)) | (1L << (NUMBER - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (OFFSET - 364)) | (1L << (ONLY - 364)) | (1L << (OPTIMISTIC - 364)) | (1L << (OPTIMIZE - 364)) | (1L << (OUT - 364)) | (1L << (OUTPUT - 364)) | (1L << (OWNER - 364)) | (1L << (PARTITION - 364)) | (1L << (PATH - 364)) | (1L << (PRECEDING - 364)) | (1L << (PRIOR - 364)) | (1L << (RANGE - 364)) | (1L << (RANK - 364)) | (1L << (READONLY - 364)) | (1L << (READ_ONLY - 364)) | (1L << (RECOMPILE - 364)) | (1L << (RELATIVE - 364)) | (1L << (REMOTE - 364)) | (1L << (REPEATABLE - 364)) | (1L << (ROOT - 364)) | (1L << (ROW - 364)) | (1L << (ROWGUID - 364)) | (1L << (ROWS - 364)) | (1L << (ROW_NUMBER - 364)) | (1L << (SAMPLE - 364)) | (1L << (SCHEMABINDING - 364)) | (1L << (SCROLL - 364)) | (1L << (SCROLL_LOCKS - 364)) | (1L << (SELF - 364)) | (1L << (SERIALIZABLE - 364)) | (1L << (SNAPSHOT - 364)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 364)) | (1L << (STATIC - 364)) | (1L << (STATS_STREAM - 364)) | (1L << (STDEV - 364)) | (1L << (STDEVP - 364)) | (1L << (SUM - 364)) | (1L << (THROW - 364)) | (1L << (TIES - 364)) | (1L << (TIME - 364)) | (1L << (TRY - 364)) | (1L << (TYPE - 364)) | (1L << (TYPE_WARNING - 364)) | (1L << (UNBOUNDED - 364)) | (1L << (UNCOMMITTED - 364)) | (1L << (UNKNOWN - 364)) | (1L << (USING - 364)) | (1L << (VAR - 364)) | (1L << (VARP - 364)) | (1L << (VIEW_METADATA - 364)) | (1L << (WORK - 364)) | (1L << (XML - 364)) | (1L << (XMLNAMESPACES - 364)) | (1L << (DOUBLE_QUOTE_ID - 364)) | (1L << (SQUARE_BRACKET_ID - 364)) | (1L << (ID - 364)))) != 0)) {
				{
				setState(1232); ((OpendatasourceContext)_localctx).database = id();
				}
			}

			setState(1235); match(DOT);
			setState(1237);
			_la = _input.LA(1);
			if (_la==FORCESEEK || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ABSOLUTE - 300)) | (1L << (APPLY - 300)) | (1L << (AUTO - 300)) | (1L << (AVG - 300)) | (1L << (BASE64 - 300)) | (1L << (CALLER - 300)) | (1L << (CAST - 300)) | (1L << (CATCH - 300)) | (1L << (CHECKSUM_AGG - 300)) | (1L << (COMMITTED - 300)) | (1L << (CONCAT - 300)) | (1L << (COOKIE - 300)) | (1L << (COUNT - 300)) | (1L << (COUNT_BIG - 300)) | (1L << (DELAY - 300)) | (1L << (DELETED - 300)) | (1L << (DENSE_RANK - 300)) | (1L << (DISABLE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (FAST - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FIRST - 300)) | (1L << (FOLLOWING - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (FULLSCAN - 300)) | (1L << (GLOBAL - 300)) | (1L << (GO - 300)) | (1L << (GROUPING - 300)) | (1L << (GROUPING_ID - 300)) | (1L << (HASH - 300)) | (1L << (INSENSITIVE - 300)) | (1L << (INSERTED - 300)) | (1L << (ISOLATION - 300)) | (1L << (KEEPFIXED - 300)) | (1L << (KEYSET - 300)) | (1L << (LAST - 300)) | (1L << (LEVEL - 300)) | (1L << (LOCAL - 300)) | (1L << (LOCK_ESCALATION - 300)) | (1L << (LOGIN - 300)) | (1L << (LOOP - 300)) | (1L << (MARK - 300)) | (1L << (MAX - 300)) | (1L << (MIN - 300)) | (1L << (MODIFY - 300)) | (1L << (NEXT - 300)) | (1L << (NAME - 300)) | (1L << (NOCOUNT - 300)) | (1L << (NOEXPAND - 300)) | (1L << (NORECOMPUTE - 300)) | (1L << (NTILE - 300)) | (1L << (NUMBER - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (OFFSET - 364)) | (1L << (ONLY - 364)) | (1L << (OPTIMISTIC - 364)) | (1L << (OPTIMIZE - 364)) | (1L << (OUT - 364)) | (1L << (OUTPUT - 364)) | (1L << (OWNER - 364)) | (1L << (PARTITION - 364)) | (1L << (PATH - 364)) | (1L << (PRECEDING - 364)) | (1L << (PRIOR - 364)) | (1L << (RANGE - 364)) | (1L << (RANK - 364)) | (1L << (READONLY - 364)) | (1L << (READ_ONLY - 364)) | (1L << (RECOMPILE - 364)) | (1L << (RELATIVE - 364)) | (1L << (REMOTE - 364)) | (1L << (REPEATABLE - 364)) | (1L << (ROOT - 364)) | (1L << (ROW - 364)) | (1L << (ROWGUID - 364)) | (1L << (ROWS - 364)) | (1L << (ROW_NUMBER - 364)) | (1L << (SAMPLE - 364)) | (1L << (SCHEMABINDING - 364)) | (1L << (SCROLL - 364)) | (1L << (SCROLL_LOCKS - 364)) | (1L << (SELF - 364)) | (1L << (SERIALIZABLE - 364)) | (1L << (SNAPSHOT - 364)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 364)) | (1L << (STATIC - 364)) | (1L << (STATS_STREAM - 364)) | (1L << (STDEV - 364)) | (1L << (STDEVP - 364)) | (1L << (SUM - 364)) | (1L << (THROW - 364)) | (1L << (TIES - 364)) | (1L << (TIME - 364)) | (1L << (TRY - 364)) | (1L << (TYPE - 364)) | (1L << (TYPE_WARNING - 364)) | (1L << (UNBOUNDED - 364)) | (1L << (UNCOMMITTED - 364)) | (1L << (UNKNOWN - 364)) | (1L << (USING - 364)) | (1L << (VAR - 364)) | (1L << (VARP - 364)) | (1L << (VIEW_METADATA - 364)) | (1L << (WORK - 364)) | (1L << (XML - 364)) | (1L << (XMLNAMESPACES - 364)) | (1L << (DOUBLE_QUOTE_ID - 364)) | (1L << (SQUARE_BRACKET_ID - 364)) | (1L << (ID - 364)))) != 0)) {
				{
				setState(1236); ((OpendatasourceContext)_localctx).scheme = id();
				}
			}

			setState(1239); match(DOT);
			{
			setState(1240); ((OpendatasourceContext)_localctx).table = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_statementContext extends ParserRuleContext {
		public Simple_idContext name;
		public Declare_typeContext declaretype;
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(sybaseiqParser.DEFAULT, 0); }
		public TerminalNode DECLARE() { return getToken(sybaseiqParser.DECLARE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Declare_typeContext declare_type() {
			return getRuleContext(Declare_typeContext.class,0);
		}
		public Declare_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDeclare_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_statementContext declare_statement() throws RecognitionException {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_declare_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1242); match(DECLARE);
			setState(1243); ((Declare_statementContext)_localctx).name = simple_id();
			setState(1245);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				setState(1244); ((Declare_statementContext)_localctx).declaretype = declare_type();
				}
				break;
			}
			setState(1249);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				setState(1247); match(DEFAULT);
				setState(1248); expression(0);
				}
				break;
			}
			setState(1253);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(1251); match(EQUAL);
				setState(1252); expression(0);
				}
			}

			setState(1256);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				setState(1255); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_local_temporary_tableContext extends ParserRuleContext {
		public Table_nameContext tablename;
		public List<Column_def_table_constraintContext> column_def_table_constraint() {
			return getRuleContexts(Column_def_table_constraintContext.class);
		}
		public TerminalNode DECLARE() { return getToken(sybaseiqParser.DECLARE, 0); }
		public TerminalNode TEMPORARY() { return getToken(sybaseiqParser.TEMPORARY, 0); }
		public TerminalNode PRESERVE() { return getToken(sybaseiqParser.PRESERVE, 0); }
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public TerminalNode ROWS() { return getToken(sybaseiqParser.ROWS, 0); }
		public TerminalNode COMMIT() { return getToken(sybaseiqParser.COMMIT, 0); }
		public TerminalNode NOT() { return getToken(sybaseiqParser.NOT, 0); }
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return getRuleContext(Column_def_table_constraintContext.class,i);
		}
		public TerminalNode DELETE() { return getToken(sybaseiqParser.DELETE, 0); }
		public TerminalNode LOCAL() { return getToken(sybaseiqParser.LOCAL, 0); }
		public TerminalNode TABLE() { return getToken(sybaseiqParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode TRANSACTIONAL() { return getToken(sybaseiqParser.TRANSACTIONAL, 0); }
		public Declare_local_temporary_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_local_temporary_table; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDeclare_local_temporary_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_local_temporary_tableContext declare_local_temporary_table() throws RecognitionException {
		Declare_local_temporary_tableContext _localctx = new Declare_local_temporary_tableContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_declare_local_temporary_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1258); match(DECLARE);
			setState(1259); match(LOCAL);
			setState(1260); match(TEMPORARY);
			setState(1261); match(TABLE);
			setState(1262); ((Declare_local_temporary_tableContext)_localctx).tablename = table_name();
			setState(1263); match(LR_BRACKET);
			setState(1264); column_def_table_constraint();
			setState(1269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1265); match(COMMA);
				setState(1266); column_def_table_constraint();
				}
				}
				setState(1271);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1272); match(RR_BRACKET);
			setState(1277);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(1273); match(ON);
				setState(1274); match(COMMIT);
				setState(1275);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1276); match(ROWS);
				}
				break;
			}
			setState(1281);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1279); match(NOT);
				setState(1280); match(TRANSACTIONAL);
				}
			}

			setState(1284);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				setState(1283); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_statementContext extends ParserRuleContext {
		public TerminalNode GLOBAL() { return getToken(sybaseiqParser.GLOBAL, 0); }
		public TerminalNode OPEN() { return getToken(sybaseiqParser.OPEN, 0); }
		public TerminalNode CLOSE() { return getToken(sybaseiqParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return getRuleContext(Fetch_cursorContext.class,0);
		}
		public Declare_cursorContext declare_cursor() {
			return getRuleContext(Declare_cursorContext.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(sybaseiqParser.DEALLOCATE, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitCursor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_statementContext cursor_statement() throws RecognitionException {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_cursor_statement);
		try {
			setState(1312);
			switch (_input.LA(1)) {
			case CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1286); match(CLOSE);
				setState(1288);
				switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
				case 1:
					{
					setState(1287); match(GLOBAL);
					}
					break;
				}
				setState(1290); cursor_name();
				setState(1292);
				switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
				case 1:
					{
					setState(1291); match(SEMI);
					}
					break;
				}
				}
				break;
			case DEALLOCATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1294); match(DEALLOCATE);
				setState(1296);
				switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
				case 1:
					{
					setState(1295); match(GLOBAL);
					}
					break;
				}
				setState(1298); cursor_name();
				setState(1300);
				switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
				case 1:
					{
					setState(1299); match(SEMI);
					}
					break;
				}
				}
				break;
			case DECLARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1302); declare_cursor();
				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 4);
				{
				setState(1303); fetch_cursor();
				}
				break;
			case OPEN:
				enterOuterAlt(_localctx, 5);
				{
				setState(1304); match(OPEN);
				setState(1306);
				switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
				case 1:
					{
					setState(1305); match(GLOBAL);
					}
					break;
				}
				setState(1308); cursor_name();
				setState(1310);
				switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
				case 1:
					{
					setState(1309); match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statementContext extends ParserRuleContext {
		public Token return_status;
		public TerminalNode AS() { return getToken(sybaseiqParser.AS, 0); }
		public TerminalNode EXEC() { return getToken(sybaseiqParser.EXEC, 0); }
		public TerminalNode LOCAL_ID() { return getToken(sybaseiqParser.LOCAL_ID, 0); }
		public List<Execute_statement_argContext> execute_statement_arg() {
			return getRuleContexts(Execute_statement_argContext.class);
		}
		public TerminalNode EXECUTE() { return getToken(sybaseiqParser.EXECUTE, 0); }
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return getRuleContext(Execute_statement_argContext.class,i);
		}
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode USER() { return getToken(sybaseiqParser.USER, 0); }
		public TerminalNode LOGIN() { return getToken(sybaseiqParser.LOGIN, 0); }
		public TerminalNode STRING() { return getToken(sybaseiqParser.STRING, 0); }
		public TerminalNode IMMEDIATE() { return getToken(sybaseiqParser.IMMEDIATE, 0); }
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitExecute_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statementContext execute_statement() throws RecognitionException {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_execute_statement);
		int _la;
		try {
			int _alt;
			setState(1361);
			switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1314);
				_la = _input.LA(1);
				if ( !(_la==EXEC || _la==EXECUTE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1316);
				_la = _input.LA(1);
				if (_la==IMMEDIATE) {
					{
					setState(1315); match(IMMEDIATE);
					}
				}

				setState(1320);
				_la = _input.LA(1);
				if (_la==LOCAL_ID) {
					{
					setState(1318); ((Execute_statementContext)_localctx).return_status = match(LOCAL_ID);
					setState(1319); match(EQUAL);
					}
				}

				setState(1322); func_proc_name();
				setState(1331);
				switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
				case 1:
					{
					setState(1323); execute_statement_arg();
					setState(1328);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,181,_ctx);
					while ( _alt!=2 && _alt!=-1 ) {
						if ( _alt==1 ) {
							{
							{
							setState(1324); match(COMMA);
							setState(1325); execute_statement_arg();
							}
							} 
						}
						setState(1330);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,181,_ctx);
					}
					}
					break;
				}
				setState(1334);
				switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
				case 1:
					{
					setState(1333); match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1336);
				_la = _input.LA(1);
				if ( !(_la==EXEC || _la==EXECUTE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1338);
				_la = _input.LA(1);
				if (_la==IMMEDIATE) {
					{
					setState(1337); match(IMMEDIATE);
					}
				}

				setState(1340); match(LR_BRACKET);
				setState(1341); execute_var_string();
				setState(1346);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(1342); match(PLUS);
					setState(1343); execute_var_string();
					}
					}
					setState(1348);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1349); match(RR_BRACKET);
				setState(1356);
				switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
				case 1:
					{
					setState(1351);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1350); match(AS);
						}
					}

					setState(1353);
					_la = _input.LA(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(1354); match(EQUAL);
					setState(1355); match(STRING);
					}
					break;
				}
				setState(1359);
				switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
				case 1:
					{
					setState(1358); match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statement_argContext extends ParserRuleContext {
		public Token parameter;
		public TerminalNode DEFAULT() { return getToken(sybaseiqParser.DEFAULT, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(sybaseiqParser.LOCAL_ID); }
		public TerminalNode OUT() { return getToken(sybaseiqParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(sybaseiqParser.OUTPUT, 0); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(sybaseiqParser.LOCAL_ID, i);
		}
		public TerminalNode NULL() { return getToken(sybaseiqParser.NULL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitExecute_statement_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statement_argContext execute_statement_arg() throws RecognitionException {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_execute_statement_arg);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1365);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				setState(1363); ((Execute_statement_argContext)_localctx).parameter = match(LOCAL_ID);
				setState(1364); match(EQUAL);
				}
				break;
			}
			setState(1374);
			switch (_input.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				setState(1367); constant();
				}
				break;
			case LOCAL_ID:
				{
				setState(1368); match(LOCAL_ID);
				setState(1370);
				switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
				case 1:
					{
					setState(1369);
					_la = _input.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				}
				}
				break;
			case DEFAULT:
				{
				setState(1372); match(DEFAULT);
				}
				break;
			case NULL:
				{
				setState(1373); match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_var_stringContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(sybaseiqParser.LOCAL_ID, 0); }
		public TerminalNode STRING() { return getToken(sybaseiqParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_var_string; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitExecute_var_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_var_stringContext execute_var_string() throws RecognitionException {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_execute_var_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1376);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statementContext extends ParserRuleContext {
		public Simple_idContext simpleid1;
		public IdContext member_name;
		public Simple_idContext simpleid2;
		public Set_specialContext set_special() {
			return getRuleContext(Set_specialContext.class,0);
		}
		public TerminalNode SET() { return getToken(sybaseiqParser.SET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_statementContext set_statement() throws RecognitionException {
		Set_statementContext _localctx = new Set_statementContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_set_statement);
		int _la;
		try {
			setState(1397);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1378); match(SET);
				setState(1379); ((Set_statementContext)_localctx).simpleid1 = simple_id();
				setState(1382);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(1380); match(DOT);
					setState(1381); ((Set_statementContext)_localctx).member_name = id();
					}
				}

				setState(1384); match(EQUAL);
				setState(1385); expression(0);
				setState(1387);
				switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
				case 1:
					{
					setState(1386); match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1389); match(SET);
				setState(1390); ((Set_statementContext)_localctx).simpleid2 = simple_id();
				setState(1391); assignment_operator();
				setState(1392); expression(0);
				setState(1394);
				switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
				case 1:
					{
					setState(1393); match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1396); set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_statementContext extends ParserRuleContext {
		public Token DELAYED_DURABILITY;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(sybaseiqParser.SAVE, 0); }
		public TerminalNode TRAN() { return getToken(sybaseiqParser.TRAN, 0); }
		public TerminalNode LOCAL_ID() { return getToken(sybaseiqParser.LOCAL_ID, 0); }
		public TerminalNode TRANSACTION() { return getToken(sybaseiqParser.TRANSACTION, 0); }
		public TerminalNode WITH() { return getToken(sybaseiqParser.WITH, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(sybaseiqParser.DISTRIBUTED, 0); }
		public TerminalNode OFF() { return getToken(sybaseiqParser.OFF, 0); }
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public TerminalNode MARK() { return getToken(sybaseiqParser.MARK, 0); }
		public TerminalNode WORK() { return getToken(sybaseiqParser.WORK, 0); }
		public TerminalNode ROLLBACK() { return getToken(sybaseiqParser.ROLLBACK, 0); }
		public TerminalNode COMMIT() { return getToken(sybaseiqParser.COMMIT, 0); }
		public TerminalNode BEGIN() { return getToken(sybaseiqParser.BEGIN, 0); }
		public TerminalNode STRING() { return getToken(sybaseiqParser.STRING, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitTransaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_statementContext transaction_statement() throws RecognitionException {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_transaction_statement);
		int _la;
		try {
			setState(1474);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1399); match(BEGIN);
				setState(1400); match(DISTRIBUTED);
				setState(1401);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1404);
				switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
				case 1:
					{
					setState(1402); id();
					}
					break;

				case 2:
					{
					setState(1403); match(LOCAL_ID);
					}
					break;
				}
				setState(1407);
				switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					setState(1406); match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1409); match(BEGIN);
				setState(1410);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1420);
				switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
				case 1:
					{
					setState(1413);
					switch (_input.LA(1)) {
					case FORCESEEK:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case BASE64:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GO:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MIN:
					case MODIFY:
					case NEXT:
					case NAME:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(1411); id();
						}
						break;
					case LOCAL_ID:
						{
						setState(1412); match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1418);
					switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
					case 1:
						{
						setState(1415); match(WITH);
						setState(1416); match(MARK);
						setState(1417); match(STRING);
						}
						break;
					}
					}
					break;
				}
				setState(1423);
				switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
				case 1:
					{
					setState(1422); match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1425); match(COMMIT);
				setState(1426);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1437);
				switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
				case 1:
					{
					setState(1429);
					switch (_input.LA(1)) {
					case FORCESEEK:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case BASE64:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GO:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MIN:
					case MODIFY:
					case NEXT:
					case NAME:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(1427); id();
						}
						break;
					case LOCAL_ID:
						{
						setState(1428); match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1435);
					switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
					case 1:
						{
						setState(1431); match(WITH);
						setState(1432); match(LR_BRACKET);
						setState(1433);
						((Transaction_statementContext)_localctx).DELAYED_DURABILITY = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
							((Transaction_statementContext)_localctx).DELAYED_DURABILITY = (Token)_errHandler.recoverInline(this);
						}
						consume();
						setState(1434); match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				setState(1440);
				switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					setState(1439); match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1442); match(COMMIT);
				setState(1444);
				switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
				case 1:
					{
					setState(1443); match(WORK);
					}
					break;
				}
				setState(1447);
				switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					setState(1446); match(SEMI);
					}
					break;
				}
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1449); match(ROLLBACK);
				setState(1450);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1453);
				switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
				case 1:
					{
					setState(1451); id();
					}
					break;

				case 2:
					{
					setState(1452); match(LOCAL_ID);
					}
					break;
				}
				setState(1456);
				switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
				case 1:
					{
					setState(1455); match(SEMI);
					}
					break;
				}
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1458); match(ROLLBACK);
				setState(1460);
				switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
				case 1:
					{
					setState(1459); match(WORK);
					}
					break;
				}
				setState(1463);
				switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
				case 1:
					{
					setState(1462); match(SEMI);
					}
					break;
				}
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1465); match(SAVE);
				setState(1466);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1469);
				switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
				case 1:
					{
					setState(1467); id();
					}
					break;

				case 2:
					{
					setState(1468); match(LOCAL_ID);
					}
					break;
				}
				setState(1472);
				switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
				case 1:
					{
					setState(1471); match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Go_statementContext extends ParserRuleContext {
		public Token count;
		public TerminalNode GO() { return getToken(sybaseiqParser.GO, 0); }
		public TerminalNode DECIMAL() { return getToken(sybaseiqParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_go_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitGo_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Go_statementContext go_statement() throws RecognitionException {
		Go_statementContext _localctx = new Go_statementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_go_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1476); match(GO);
			setState(1478);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				setState(1477); ((Go_statementContext)_localctx).count = match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_statementContext extends ParserRuleContext {
		public IdContext database;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode USE() { return getToken(sybaseiqParser.USE, 0); }
		public Use_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitUse_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Use_statementContext use_statement() throws RecognitionException {
		Use_statementContext _localctx = new Use_statementContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_use_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1480); match(USE);
			setState(1481); ((Use_statementContext)_localctx).database = id();
			setState(1483);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				setState(1482); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_typeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(sybaseiqParser.TIMESTAMP, 0); }
		public TerminalNode BIT() { return getToken(sybaseiqParser.BIT, 0); }
		public TerminalNode DATETIMN() { return getToken(sybaseiqParser.DATETIMN, 0); }
		public TerminalNode TIME() { return getToken(sybaseiqParser.TIME, 0); }
		public TerminalNode TEXT() { return getToken(sybaseiqParser.TEXT, 0); }
		public TerminalNode NUMERICN() { return getToken(sybaseiqParser.NUMERICN, 0); }
		public TerminalNode BLOB() { return getToken(sybaseiqParser.BLOB, 0); }
		public TerminalNode NVARCHAR() { return getToken(sybaseiqParser.NVARCHAR, 0); }
		public TerminalNode FLOATN() { return getToken(sybaseiqParser.FLOATN, 0); }
		public TerminalNode TYP_ZEITWERT() { return getToken(sybaseiqParser.TYP_ZEITWERT, 0); }
		public TerminalNode SMALLMONEY() { return getToken(sybaseiqParser.SMALLMONEY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode DOUBLE() { return getToken(sybaseiqParser.DOUBLE, 0); }
		public TerminalNode TYP_ZEITDIMENSION() { return getToken(sybaseiqParser.TYP_ZEITDIMENSION, 0); }
		public TerminalNode UNSIGNED() { return getToken(sybaseiqParser.UNSIGNED, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode CLOB() { return getToken(sybaseiqParser.CLOB, 0); }
		public TerminalNode BOOLEAN() { return getToken(sybaseiqParser.BOOLEAN, 0); }
		public TerminalNode CHARACTER() { return getToken(sybaseiqParser.CHARACTER, 0); }
		public TerminalNode DATETIMEOFFSET() { return getToken(sybaseiqParser.DATETIMEOFFSET, 0); }
		public TerminalNode REAL() { return getToken(sybaseiqParser.REAL, 0); }
		public TerminalNode CHAR() { return getToken(sybaseiqParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(sybaseiqParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(sybaseiqParser.VARBINARY, 0); }
		public TerminalNode SMALLDATETIME() { return getToken(sybaseiqParser.SMALLDATETIME, 0); }
		public TerminalNode DECIMALN() { return getToken(sybaseiqParser.DECIMALN, 0); }
		public TerminalNode TINYINT() { return getToken(sybaseiqParser.TINYINT, 0); }
		public TerminalNode FLOAT() { return getToken(sybaseiqParser.FLOAT, 0); }
		public TerminalNode MONEY() { return getToken(sybaseiqParser.MONEY, 0); }
		public TerminalNode VARCHAR() { return getToken(sybaseiqParser.VARCHAR, 0); }
		public TerminalNode NUMERIC() { return getToken(sybaseiqParser.NUMERIC, 0); }
		public TerminalNode DATE() { return getToken(sybaseiqParser.DATE, 0); }
		public Unsigned_additionContext unsigned_addition() {
			return getRuleContext(Unsigned_additionContext.class,0);
		}
		public TerminalNode IMAGE() { return getToken(sybaseiqParser.IMAGE, 0); }
		public TerminalNode DATETIME() { return getToken(sybaseiqParser.DATETIME, 0); }
		public TerminalNode TYP_MONEY() { return getToken(sybaseiqParser.TYP_MONEY, 0); }
		public TerminalNode SYSNAME() { return getToken(sybaseiqParser.SYSNAME, 0); }
		public TerminalNode NCHAR() { return getToken(sybaseiqParser.NCHAR, 0); }
		public TerminalNode TYP_VERBRAUCH() { return getToken(sybaseiqParser.TYP_VERBRAUCH, 0); }
		public TerminalNode MONEYN() { return getToken(sybaseiqParser.MONEYN, 0); }
		public TerminalNode DATETIME2() { return getToken(sybaseiqParser.DATETIME2, 0); }
		public TerminalNode UNIQUEIDENTIFIER() { return getToken(sybaseiqParser.UNIQUEIDENTIFIER, 0); }
		public TerminalNode NTEXT() { return getToken(sybaseiqParser.NTEXT, 0); }
		public TerminalNode INTEGER() { return getToken(sybaseiqParser.INTEGER, 0); }
		public TerminalNode DECIMAL() { return getToken(sybaseiqParser.DECIMAL, 0); }
		public Declare_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDeclare_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_typeContext declare_type() throws RecognitionException {
		Declare_typeContext _localctx = new Declare_typeContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_declare_type);
		int _la;
		try {
			setState(1642);
			switch (_input.LA(1)) {
			case BIGINT:
			case BIGINTN:
			case INT:
			case INTN:
			case SMALLINT:
			case SMALLINTN:
			case UNSIGNED:
				enterOuterAlt(_localctx, 1);
				{
				setState(1486);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(1485); match(UNSIGNED);
					}
				}

				setState(1488); unsigned_addition();
				}
				break;
			case BINARY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1489); match(BINARY);
				setState(1494);
				switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
				case 1:
					{
					setState(1490); match(LR_BRACKET);
					setState(1491); expression(0);
					setState(1492); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case BIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1496); match(BIT);
				setState(1501);
				switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					setState(1497); match(LR_BRACKET);
					setState(1498); expression(0);
					setState(1499); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 4);
				{
				setState(1503); match(BLOB);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 5);
				{
				setState(1504); match(BOOLEAN);
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 6);
				{
				setState(1505); match(CHAR);
				setState(1510);
				switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
				case 1:
					{
					setState(1506); match(LR_BRACKET);
					setState(1507); expression(0);
					setState(1508); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 7);
				{
				setState(1512); match(CHARACTER);
				setState(1517);
				switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
				case 1:
					{
					setState(1513); match(LR_BRACKET);
					setState(1514); expression(0);
					setState(1515); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 8);
				{
				setState(1519); match(CLOB);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 9);
				{
				setState(1520); match(DATE);
				setState(1525);
				switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
				case 1:
					{
					setState(1521); match(LR_BRACKET);
					setState(1522); expression(0);
					setState(1523); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case DATETIME:
				enterOuterAlt(_localctx, 10);
				{
				setState(1527); match(DATETIME);
				setState(1532);
				switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
				case 1:
					{
					setState(1528); match(LR_BRACKET);
					setState(1529); expression(0);
					setState(1530); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case DATETIMN:
				enterOuterAlt(_localctx, 11);
				{
				setState(1534); match(DATETIMN);
				setState(1539);
				switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
				case 1:
					{
					setState(1535); match(LR_BRACKET);
					setState(1536); expression(0);
					setState(1537); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case DATETIME2:
				enterOuterAlt(_localctx, 12);
				{
				setState(1541); match(DATETIME2);
				}
				break;
			case DATETIMEOFFSET:
				enterOuterAlt(_localctx, 13);
				{
				setState(1542); match(DATETIMEOFFSET);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 14);
				{
				setState(1543); match(DECIMAL);
				setState(1548);
				switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
				case 1:
					{
					setState(1544); match(LR_BRACKET);
					setState(1545); expression(0);
					setState(1546); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case DECIMALN:
				enterOuterAlt(_localctx, 15);
				{
				setState(1550); match(DECIMALN);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 16);
				{
				setState(1551); match(DOUBLE);
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 17);
				{
				setState(1552); match(FLOAT);
				setState(1557);
				switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
				case 1:
					{
					setState(1553); match(LR_BRACKET);
					setState(1554); expression(0);
					setState(1555); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case FLOATN:
				enterOuterAlt(_localctx, 18);
				{
				setState(1559); match(FLOATN);
				setState(1564);
				switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
				case 1:
					{
					setState(1560); match(LR_BRACKET);
					setState(1561); expression(0);
					setState(1562); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case IMAGE:
				enterOuterAlt(_localctx, 19);
				{
				setState(1566); match(IMAGE);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 20);
				{
				setState(1567); match(INTEGER);
				}
				break;
			case MONEY:
				enterOuterAlt(_localctx, 21);
				{
				setState(1568); match(MONEY);
				}
				break;
			case MONEYN:
				enterOuterAlt(_localctx, 22);
				{
				setState(1569); match(MONEYN);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 23);
				{
				setState(1570); match(NCHAR);
				{
				setState(1571); match(LR_BRACKET);
				setState(1572); expression(0);
				setState(1573); match(RR_BRACKET);
				}
				}
				break;
			case NVARCHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(1575); match(NVARCHAR);
				{
				setState(1576); match(LR_BRACKET);
				setState(1577); expression(0);
				setState(1578); match(RR_BRACKET);
				}
				}
				break;
			case NTEXT:
				enterOuterAlt(_localctx, 25);
				{
				setState(1580); match(NTEXT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 26);
				{
				setState(1581); match(NUMERIC);
				setState(1588);
				switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
				case 1:
					{
					setState(1582); match(LR_BRACKET);
					setState(1583); expression(0);
					setState(1584); match(COMMA);
					setState(1585); expression(0);
					setState(1586); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NUMERICN:
				enterOuterAlt(_localctx, 27);
				{
				setState(1590); match(NUMERICN);
				setState(1597);
				switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
				case 1:
					{
					setState(1591); match(LR_BRACKET);
					setState(1592); expression(0);
					setState(1593); match(COMMA);
					setState(1594); expression(0);
					setState(1595); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 28);
				{
				setState(1599); match(REAL);
				}
				break;
			case SMALLMONEY:
				enterOuterAlt(_localctx, 29);
				{
				setState(1600); match(SMALLMONEY);
				}
				break;
			case SMALLDATETIME:
				enterOuterAlt(_localctx, 30);
				{
				setState(1601); match(SMALLDATETIME);
				setState(1606);
				switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
				case 1:
					{
					setState(1602); match(LR_BRACKET);
					setState(1603); expression(0);
					setState(1604); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case SYSNAME:
				enterOuterAlt(_localctx, 31);
				{
				setState(1608); match(SYSNAME);
				}
				break;
			case TEXT:
				enterOuterAlt(_localctx, 32);
				{
				setState(1609); match(TEXT);
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 33);
				{
				setState(1610); match(TIME);
				setState(1615);
				switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
				case 1:
					{
					setState(1611); match(LR_BRACKET);
					setState(1612); expression(0);
					setState(1613); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 34);
				{
				setState(1617); match(TIMESTAMP);
				setState(1622);
				switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
				case 1:
					{
					setState(1618); match(LR_BRACKET);
					setState(1619); expression(0);
					setState(1620); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case TINYINT:
				enterOuterAlt(_localctx, 35);
				{
				setState(1624); match(TINYINT);
				}
				break;
			case TYP_MONEY:
				enterOuterAlt(_localctx, 36);
				{
				setState(1625); match(TYP_MONEY);
				}
				break;
			case TYP_VERBRAUCH:
				enterOuterAlt(_localctx, 37);
				{
				setState(1626); match(TYP_VERBRAUCH);
				}
				break;
			case TYP_ZEITDIMENSION:
				enterOuterAlt(_localctx, 38);
				{
				setState(1627); match(TYP_ZEITDIMENSION);
				}
				break;
			case TYP_ZEITWERT:
				enterOuterAlt(_localctx, 39);
				{
				setState(1628); match(TYP_ZEITWERT);
				}
				break;
			case UNIQUEIDENTIFIER:
				enterOuterAlt(_localctx, 40);
				{
				setState(1629); match(UNIQUEIDENTIFIER);
				}
				break;
			case VARBINARY:
				enterOuterAlt(_localctx, 41);
				{
				setState(1630); match(VARBINARY);
				setState(1635);
				switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
				case 1:
					{
					setState(1631); match(LR_BRACKET);
					setState(1632); expression(0);
					setState(1633); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 42);
				{
				setState(1637); match(VARCHAR);
				{
				setState(1638); match(LR_BRACKET);
				setState(1639); expression(0);
				setState(1640); match(RR_BRACKET);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_additionContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(sybaseiqParser.INT, 0); }
		public TerminalNode SMALLINTN() { return getToken(sybaseiqParser.SMALLINTN, 0); }
		public TerminalNode BIGINTN() { return getToken(sybaseiqParser.BIGINTN, 0); }
		public TerminalNode INTN() { return getToken(sybaseiqParser.INTN, 0); }
		public TerminalNode BIGINT() { return getToken(sybaseiqParser.BIGINT, 0); }
		public TerminalNode SMALLINT() { return getToken(sybaseiqParser.SMALLINT, 0); }
		public Unsigned_additionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_addition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitUnsigned_addition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unsigned_additionContext unsigned_addition() throws RecognitionException {
		Unsigned_additionContext _localctx = new Unsigned_additionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_unsigned_addition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1644);
			_la = _input.LA(1);
			if ( !(_la==BIGINT || _la==BIGINTN || _la==INT || _la==INTN || _la==SMALLINT || _la==SMALLINTN) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_localContext extends ParserRuleContext {
		public Declare_typeContext declaretype;
		public TerminalNode AS() { return getToken(sybaseiqParser.AS, 0); }
		public TerminalNode LOCAL_ID() { return getToken(sybaseiqParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Declare_typeContext declare_type() {
			return getRuleContext(Declare_typeContext.class,0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_local; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDeclare_local(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_localContext declare_local() throws RecognitionException {
		Declare_localContext _localctx = new Declare_localContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_declare_local);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1646); match(LOCAL_ID);
			setState(1648);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1647); match(AS);
				}
			}

			setState(1650); ((Declare_localContext)_localctx).declaretype = declare_type();
			setState(1653);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(1651); match(EQUAL);
				setState(1652); expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_definitionContext extends ParserRuleContext {
		public List<Column_def_table_constraintContext> column_def_table_constraint() {
			return getRuleContexts(Column_def_table_constraintContext.class);
		}
		public TerminalNode GLOBAL() { return getToken(sybaseiqParser.GLOBAL, 0); }
		public TerminalNode TEMPORARY() { return getToken(sybaseiqParser.TEMPORARY, 0); }
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return getRuleContext(Column_def_table_constraintContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(sybaseiqParser.TABLE, 0); }
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_definition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitTable_type_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_type_definitionContext table_type_definition() throws RecognitionException {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_table_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1655); match(TABLE);
			setState(1657);
			_la = _input.LA(1);
			if (_la==TEMPORARY || _la==GLOBAL) {
				{
				setState(1656);
				_la = _input.LA(1);
				if ( !(_la==TEMPORARY || _la==GLOBAL) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(1659); match(LR_BRACKET);
			setState(1660); column_def_table_constraint();
			setState(1667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CHECK || _la==CONSTRAINT || _la==FORCESEEK || _la==PRIMARY || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (UNIQUE - 275)) | (1L << (ABSOLUTE - 275)) | (1L << (APPLY - 275)) | (1L << (AUTO - 275)) | (1L << (AVG - 275)) | (1L << (BASE64 - 275)) | (1L << (CALLER - 275)) | (1L << (CAST - 275)) | (1L << (CATCH - 275)) | (1L << (CHECKSUM_AGG - 275)) | (1L << (COMMITTED - 275)) | (1L << (CONCAT - 275)) | (1L << (COOKIE - 275)) | (1L << (COUNT - 275)) | (1L << (COUNT_BIG - 275)) | (1L << (DELAY - 275)) | (1L << (DELETED - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (DISABLE - 275)) | (1L << (DYNAMIC - 275)) | (1L << (ENCRYPTION - 275)) | (1L << (FAST - 275)) | (1L << (FAST_FORWARD - 275)) | (1L << (FIRST - 275)) | (1L << (FOLLOWING - 275)) | (1L << (FORWARD_ONLY - 275)) | (1L << (FULLSCAN - 275)) | (1L << (GLOBAL - 275)) | (1L << (GO - 275)) | (1L << (GROUPING - 275)) | (1L << (GROUPING_ID - 275)) | (1L << (HASH - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (INSENSITIVE - 339)) | (1L << (INSERTED - 339)) | (1L << (ISOLATION - 339)) | (1L << (KEEPFIXED - 339)) | (1L << (KEYSET - 339)) | (1L << (LAST - 339)) | (1L << (LEVEL - 339)) | (1L << (LOCAL - 339)) | (1L << (LOCK_ESCALATION - 339)) | (1L << (LOGIN - 339)) | (1L << (LOOP - 339)) | (1L << (MARK - 339)) | (1L << (MAX - 339)) | (1L << (MIN - 339)) | (1L << (MODIFY - 339)) | (1L << (NEXT - 339)) | (1L << (NAME - 339)) | (1L << (NOCOUNT - 339)) | (1L << (NOEXPAND - 339)) | (1L << (NORECOMPUTE - 339)) | (1L << (NTILE - 339)) | (1L << (NUMBER - 339)) | (1L << (OFFSET - 339)) | (1L << (ONLY - 339)) | (1L << (OPTIMISTIC - 339)) | (1L << (OPTIMIZE - 339)) | (1L << (OUT - 339)) | (1L << (OUTPUT - 339)) | (1L << (OWNER - 339)) | (1L << (PARTITION - 339)) | (1L << (PATH - 339)) | (1L << (PRECEDING - 339)) | (1L << (PRIOR - 339)) | (1L << (RANGE - 339)) | (1L << (RANK - 339)) | (1L << (READONLY - 339)) | (1L << (READ_ONLY - 339)) | (1L << (RECOMPILE - 339)) | (1L << (RELATIVE - 339)) | (1L << (REMOTE - 339)) | (1L << (REPEATABLE - 339)) | (1L << (ROOT - 339)) | (1L << (ROW - 339)) | (1L << (ROWGUID - 339)) | (1L << (ROWS - 339)) | (1L << (ROW_NUMBER - 339)) | (1L << (SAMPLE - 339)) | (1L << (SCHEMABINDING - 339)) | (1L << (SCROLL - 339)) | (1L << (SCROLL_LOCKS - 339)) | (1L << (SELF - 339)) | (1L << (SERIALIZABLE - 339)) | (1L << (SNAPSHOT - 339)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 339)) | (1L << (STATIC - 339)) | (1L << (STATS_STREAM - 339)) | (1L << (STDEV - 339)) | (1L << (STDEVP - 339)) | (1L << (SUM - 339)) | (1L << (THROW - 339)) | (1L << (TIES - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (TIME - 403)) | (1L << (TRY - 403)) | (1L << (TYPE - 403)) | (1L << (TYPE_WARNING - 403)) | (1L << (UNBOUNDED - 403)) | (1L << (UNCOMMITTED - 403)) | (1L << (UNKNOWN - 403)) | (1L << (USING - 403)) | (1L << (VAR - 403)) | (1L << (VARP - 403)) | (1L << (VIEW_METADATA - 403)) | (1L << (WORK - 403)) | (1L << (XML - 403)) | (1L << (XMLNAMESPACES - 403)) | (1L << (DOUBLE_QUOTE_ID - 403)) | (1L << (SQUARE_BRACKET_ID - 403)) | (1L << (ID - 403)) | (1L << (COMMA - 403)))) != 0)) {
				{
				{
				setState(1662);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1661); match(COMMA);
					}
				}

				setState(1664); column_def_table_constraint();
				}
				}
				setState(1669);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1670); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitColumn_def_table_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_def_table_constraintContext column_def_table_constraint() throws RecognitionException {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_column_def_table_constraint);
		try {
			setState(1674);
			switch (_input.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1672); column_definition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1673); table_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public Column_nameContext columnname;
		public Declare_typeContext declaretype;
		public TerminalNode IN() { return getToken(sybaseiqParser.IN, 0); }
		public TerminalNode IDENTITY() { return getToken(sybaseiqParser.IDENTITY, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(sybaseiqParser.DEFAULT, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Column_constraintContext column_constraint() {
			return getRuleContext(Column_constraintContext.class,0);
		}
		public TerminalNode AUTOINCREMENT() { return getToken(sybaseiqParser.AUTOINCREMENT, 0); }
		public TerminalNode KEY() { return getToken(sybaseiqParser.KEY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode PRIMARY() { return getToken(sybaseiqParser.PRIMARY, 0); }
		public Declare_typeContext declare_type() {
			return getRuleContext(Declare_typeContext.class,0);
		}
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_column_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1676); ((Column_definitionContext)_localctx).columnname = column_name();
			setState(1677); ((Column_definitionContext)_localctx).declaretype = declare_type();
			setState(1680);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				setState(1678); match(PRIMARY);
				setState(1679); match(KEY);
				}
				break;
			}
			setState(1683);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				setState(1682); null_notnull();
				}
				break;
			}
			setState(1687);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				{
				setState(1685); match(IN);
				setState(1686); expression(0);
				}
				break;
			}
			setState(1711);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				{
				{
				setState(1695);
				switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					setState(1689); match(DEFAULT);
					setState(1692);
					switch (_input.LA(1)) {
					case CASE:
					case COALESCE:
					case CONVERT:
					case CURRENT:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case DEFAULT:
					case FORCESEEK:
					case IDENTITY:
					case LEFT:
					case NULL:
					case NULLIF:
					case REPLACE:
					case RIGHT:
					case SESSION_USER:
					case SYSTEM_USER:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case BASE64:
					case BINARY_CHECKSUM:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GO:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MOD:
					case MODIFY:
					case NEXT:
					case NAME:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case LOCAL_ID:
					case DECIMAL:
					case ID:
					case STRING:
					case BINARY:
					case FLOAT:
					case REAL:
					case DOLLAR:
					case LR_BRACKET:
					case PLUS:
					case MINUS:
					case BIT_NOT:
						{
						setState(1690); expression(0);
						}
						break;
					case AUTOINCREMENT:
						{
						setState(1691); match(AUTOINCREMENT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;

				case 2:
					{
					setState(1694); match(IDENTITY);
					}
					break;
				}
				setState(1698);
				switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					setState(1697); column_constraint();
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				{
				setState(1701);
				switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					setState(1700); column_constraint();
					}
					break;
				}
				setState(1709);
				switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
				case 1:
					{
					setState(1703); match(DEFAULT);
					setState(1706);
					switch (_input.LA(1)) {
					case CASE:
					case COALESCE:
					case CONVERT:
					case CURRENT:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case DEFAULT:
					case FORCESEEK:
					case IDENTITY:
					case LEFT:
					case NULL:
					case NULLIF:
					case REPLACE:
					case RIGHT:
					case SESSION_USER:
					case SYSTEM_USER:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case BASE64:
					case BINARY_CHECKSUM:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GO:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MOD:
					case MODIFY:
					case NEXT:
					case NAME:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case LOCAL_ID:
					case DECIMAL:
					case ID:
					case STRING:
					case BINARY:
					case FLOAT:
					case REAL:
					case DOLLAR:
					case LR_BRACKET:
					case PLUS:
					case MINUS:
					case BIT_NOT:
						{
						setState(1704); expression(0);
						}
						break;
					case AUTOINCREMENT:
						{
						setState(1705); match(AUTOINCREMENT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;

				case 2:
					{
					setState(1708); match(IDENTITY);
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraintContext extends ParserRuleContext {
		public IdContext dbspaceName;
		public TerminalNode CHECK() { return getToken(sybaseiqParser.CHECK, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode KEY() { return getToken(sybaseiqParser.KEY, 0); }
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode RESTRICT() { return getToken(sybaseiqParser.RESTRICT, 0); }
		public TerminalNode UNIQUE() { return getToken(sybaseiqParser.UNIQUE, 0); }
		public TerminalNode REFERENCES() { return getToken(sybaseiqParser.REFERENCES, 0); }
		public TerminalNode IN() { return getToken(sybaseiqParser.IN, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(sybaseiqParser.DELETE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(sybaseiqParser.CONSTRAINT, 0); }
		public TerminalNode PRIMARY() { return getToken(sybaseiqParser.PRIMARY, 0); }
		public TerminalNode UPDATE() { return getToken(sybaseiqParser.UPDATE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode IQ() { return getToken(sybaseiqParser.IQ, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitColumn_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_column_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1715);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1713); match(CONSTRAINT);
				setState(1714); id();
				}
			}

			setState(1743);
			switch (_input.LA(1)) {
			case PRIMARY:
			case REFERENCES:
			case UNIQUE:
				{
				setState(1728);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(1717); match(PRIMARY);
					setState(1718); match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(1719); match(UNIQUE);
					}
					break;
				case REFERENCES:
					{
					setState(1720); match(REFERENCES);
					setState(1721); table_name();
					setState(1723);
					_la = _input.LA(1);
					if (_la==FORCESEEK || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ABSOLUTE - 300)) | (1L << (APPLY - 300)) | (1L << (AUTO - 300)) | (1L << (AVG - 300)) | (1L << (BASE64 - 300)) | (1L << (CALLER - 300)) | (1L << (CAST - 300)) | (1L << (CATCH - 300)) | (1L << (CHECKSUM_AGG - 300)) | (1L << (COMMITTED - 300)) | (1L << (CONCAT - 300)) | (1L << (COOKIE - 300)) | (1L << (COUNT - 300)) | (1L << (COUNT_BIG - 300)) | (1L << (DELAY - 300)) | (1L << (DELETED - 300)) | (1L << (DENSE_RANK - 300)) | (1L << (DISABLE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (FAST - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FIRST - 300)) | (1L << (FOLLOWING - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (FULLSCAN - 300)) | (1L << (GLOBAL - 300)) | (1L << (GO - 300)) | (1L << (GROUPING - 300)) | (1L << (GROUPING_ID - 300)) | (1L << (HASH - 300)) | (1L << (INSENSITIVE - 300)) | (1L << (INSERTED - 300)) | (1L << (ISOLATION - 300)) | (1L << (KEEPFIXED - 300)) | (1L << (KEYSET - 300)) | (1L << (LAST - 300)) | (1L << (LEVEL - 300)) | (1L << (LOCAL - 300)) | (1L << (LOCK_ESCALATION - 300)) | (1L << (LOGIN - 300)) | (1L << (LOOP - 300)) | (1L << (MARK - 300)) | (1L << (MAX - 300)) | (1L << (MIN - 300)) | (1L << (MODIFY - 300)) | (1L << (NEXT - 300)) | (1L << (NAME - 300)) | (1L << (NOCOUNT - 300)) | (1L << (NOEXPAND - 300)) | (1L << (NORECOMPUTE - 300)) | (1L << (NTILE - 300)) | (1L << (NUMBER - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (OFFSET - 364)) | (1L << (ONLY - 364)) | (1L << (OPTIMISTIC - 364)) | (1L << (OPTIMIZE - 364)) | (1L << (OUT - 364)) | (1L << (OUTPUT - 364)) | (1L << (OWNER - 364)) | (1L << (PARTITION - 364)) | (1L << (PATH - 364)) | (1L << (PRECEDING - 364)) | (1L << (PRIOR - 364)) | (1L << (RANGE - 364)) | (1L << (RANK - 364)) | (1L << (READONLY - 364)) | (1L << (READ_ONLY - 364)) | (1L << (RECOMPILE - 364)) | (1L << (RELATIVE - 364)) | (1L << (REMOTE - 364)) | (1L << (REPEATABLE - 364)) | (1L << (ROOT - 364)) | (1L << (ROW - 364)) | (1L << (ROWGUID - 364)) | (1L << (ROWS - 364)) | (1L << (ROW_NUMBER - 364)) | (1L << (SAMPLE - 364)) | (1L << (SCHEMABINDING - 364)) | (1L << (SCROLL - 364)) | (1L << (SCROLL_LOCKS - 364)) | (1L << (SELF - 364)) | (1L << (SERIALIZABLE - 364)) | (1L << (SNAPSHOT - 364)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 364)) | (1L << (STATIC - 364)) | (1L << (STATS_STREAM - 364)) | (1L << (STDEV - 364)) | (1L << (STDEVP - 364)) | (1L << (SUM - 364)) | (1L << (THROW - 364)) | (1L << (TIES - 364)) | (1L << (TIME - 364)) | (1L << (TRY - 364)) | (1L << (TYPE - 364)) | (1L << (TYPE_WARNING - 364)) | (1L << (UNBOUNDED - 364)) | (1L << (UNCOMMITTED - 364)) | (1L << (UNKNOWN - 364)) | (1L << (USING - 364)) | (1L << (VAR - 364)) | (1L << (VARP - 364)) | (1L << (VIEW_METADATA - 364)) | (1L << (WORK - 364)) | (1L << (XML - 364)) | (1L << (XMLNAMESPACES - 364)) | (1L << (DOUBLE_QUOTE_ID - 364)) | (1L << (SQUARE_BRACKET_ID - 364)) | (1L << (ID - 364)))) != 0)) {
						{
						setState(1722); column_name();
						}
					}

					{
					setState(1725); match(ON);
					setState(1726);
					_la = _input.LA(1);
					if ( !(_la==DELETE || _la==RESTRICT || _la==UPDATE) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case IN:
				{
				setState(1730); match(IN);
				setState(1731); ((Column_constraintContext)_localctx).dbspaceName = id();
				}
				break;
			case CHECK:
				{
				setState(1732); match(CHECK);
				setState(1733); match(LR_BRACKET);
				setState(1734); search_condition();
				setState(1735); match(RR_BRACKET);
				}
				break;
			case IQ:
				{
				setState(1737); match(IQ);
				setState(1738); match(UNIQUE);
				setState(1739); match(LR_BRACKET);
				setState(1740); number();
				setState(1741); match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(sybaseiqParser.CHECK, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode KEY() { return getToken(sybaseiqParser.KEY, 0); }
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode UNIQUE() { return getToken(sybaseiqParser.UNIQUE, 0); }
		public TerminalNode REPLICATION() { return getToken(sybaseiqParser.REPLICATION, 0); }
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public TerminalNode FOR() { return getToken(sybaseiqParser.FOR, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(sybaseiqParser.NOT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(sybaseiqParser.CONSTRAINT, 0); }
		public TerminalNode PRIMARY() { return getToken(sybaseiqParser.PRIMARY, 0); }
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitTable_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1747);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1745); match(CONSTRAINT);
				setState(1746); id();
				}
			}

			setState(1777);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(1752);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(1749); match(PRIMARY);
					setState(1750); match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(1751); match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1755);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(1754); clustered();
					}
				}

				setState(1757); match(LR_BRACKET);
				setState(1758); column_name_list();
				setState(1759); match(RR_BRACKET);
				setState(1761);
				switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					setState(1760); index_options();
					}
					break;
				}
				setState(1765);
				switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
				case 1:
					{
					setState(1763); match(ON);
					setState(1764); id();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				setState(1767); match(CHECK);
				setState(1771);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1768); match(NOT);
					setState(1769); match(FOR);
					setState(1770); match(REPLICATION);
					}
				}

				setState(1773); match(LR_BRACKET);
				setState(1774); search_condition();
				setState(1775); match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionsContext extends ParserRuleContext {
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public TerminalNode WITH() { return getToken(sybaseiqParser.WITH, 0); }
		public Index_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitIndex_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_optionsContext index_options() throws RecognitionException {
		Index_optionsContext _localctx = new Index_optionsContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_index_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1779); match(WITH);
			setState(1780); match(LR_BRACKET);
			setState(1781); index_option();
			setState(1786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1782); match(COMMA);
				setState(1783); index_option();
				}
				}
				setState(1788);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1789); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wot_statementContext extends ParserRuleContext {
		public TerminalNode THEN() { return getToken(sybaseiqParser.THEN, 0); }
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public TerminalNode OTHERS() { return getToken(sybaseiqParser.OTHERS, 0); }
		public TerminalNode RESIGNAL() { return getToken(sybaseiqParser.RESIGNAL, 0); }
		public TerminalNode WHEN() { return getToken(sybaseiqParser.WHEN, 0); }
		public Wot_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wot_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitWot_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Wot_statementContext wot_statement() throws RecognitionException {
		Wot_statementContext _localctx = new Wot_statementContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_wot_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1791); match(WHEN);
			setState(1792); match(OTHERS);
			setState(1793); match(THEN);
			setState(1797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CALL) | (1L << CLOSE) | (1L << COMMENT) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (DEALLOCATE - 71)) | (1L << (DECLARE - 71)) | (1L << (DELETE - 71)) | (1L << (DROP - 71)) | (1L << (EXCEPTION - 71)) | (1L << (EXEC - 71)) | (1L << (EXECUTE - 71)) | (1L << (FETCH - 71)) | (1L << (FORCESEEK - 71)) | (1L << (GOTO - 71)) | (1L << (GRANT - 71)) | (1L << (IF - 71)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (INSERT - 140)) | (1L << (MESSAGE - 140)) | (1L << (OPEN - 140)) | (1L << (PARAMETERS - 140)) | (1L << (PRINT - 140)))) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (RAISERROR - 209)) | (1L << (RETURN - 209)) | (1L << (ROLLBACK - 209)) | (1L << (SAVE - 209)) | (1L << (SELECT - 209)) | (1L << (SET - 209)) | (1L << (TRUNCATE - 209)))) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (UPDATE - 279)) | (1L << (USE - 279)) | (1L << (WAITFOR - 279)) | (1L << (WHILE - 279)) | (1L << (WITH - 279)) | (1L << (ABSOLUTE - 279)) | (1L << (APPLY - 279)) | (1L << (AUTO - 279)) | (1L << (AVG - 279)) | (1L << (BASE64 - 279)) | (1L << (CALLER - 279)) | (1L << (CAST - 279)) | (1L << (CATCH - 279)) | (1L << (CHECKSUM_AGG - 279)) | (1L << (COMMITTED - 279)) | (1L << (CONCAT - 279)) | (1L << (COOKIE - 279)) | (1L << (COUNT - 279)) | (1L << (COUNT_BIG - 279)) | (1L << (DELAY - 279)) | (1L << (DELETED - 279)) | (1L << (DENSE_RANK - 279)) | (1L << (DISABLE - 279)) | (1L << (DYNAMIC - 279)) | (1L << (ENCRYPTION - 279)) | (1L << (FAST - 279)) | (1L << (FAST_FORWARD - 279)) | (1L << (FIRST - 279)) | (1L << (FOLLOWING - 279)) | (1L << (FORWARD_ONLY - 279)) | (1L << (FULLSCAN - 279)) | (1L << (GLOBAL - 279)) | (1L << (GO - 279)) | (1L << (GROUPING - 279)) | (1L << (GROUPING_ID - 279)) | (1L << (HASH - 279)) | (1L << (INSENSITIVE - 279)) | (1L << (INSERTED - 279)) | (1L << (ISOLATION - 279)) | (1L << (KEEPFIXED - 279)))) != 0) || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (KEYSET - 343)) | (1L << (LAST - 343)) | (1L << (LEVEL - 343)) | (1L << (LOCAL - 343)) | (1L << (LOCK_ESCALATION - 343)) | (1L << (LOGIN - 343)) | (1L << (LOOP - 343)) | (1L << (MARK - 343)) | (1L << (MAX - 343)) | (1L << (MIN - 343)) | (1L << (MODIFY - 343)) | (1L << (NEXT - 343)) | (1L << (NAME - 343)) | (1L << (NOCOUNT - 343)) | (1L << (NOEXPAND - 343)) | (1L << (NORECOMPUTE - 343)) | (1L << (NTILE - 343)) | (1L << (NUMBER - 343)) | (1L << (OFFSET - 343)) | (1L << (ONLY - 343)) | (1L << (OPTIMISTIC - 343)) | (1L << (OPTIMIZE - 343)) | (1L << (OUT - 343)) | (1L << (OUTPUT - 343)) | (1L << (OWNER - 343)) | (1L << (PARTITION - 343)) | (1L << (PATH - 343)) | (1L << (PRECEDING - 343)) | (1L << (PRIOR - 343)) | (1L << (RANGE - 343)) | (1L << (RANK - 343)) | (1L << (READONLY - 343)) | (1L << (READ_ONLY - 343)) | (1L << (RECOMPILE - 343)) | (1L << (RELATIVE - 343)) | (1L << (REMOTE - 343)) | (1L << (REPEATABLE - 343)) | (1L << (ROOT - 343)) | (1L << (ROW - 343)) | (1L << (ROWGUID - 343)) | (1L << (ROWS - 343)) | (1L << (ROW_NUMBER - 343)) | (1L << (SAMPLE - 343)) | (1L << (SCHEMABINDING - 343)) | (1L << (SCROLL - 343)) | (1L << (SCROLL_LOCKS - 343)) | (1L << (SELF - 343)) | (1L << (SERIALIZABLE - 343)) | (1L << (SNAPSHOT - 343)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 343)) | (1L << (STATIC - 343)) | (1L << (STATS_STREAM - 343)) | (1L << (STDEV - 343)) | (1L << (STDEVP - 343)) | (1L << (SUM - 343)) | (1L << (THROW - 343)) | (1L << (TIES - 343)) | (1L << (TIME - 343)) | (1L << (TRY - 343)) | (1L << (TYPE - 343)))) != 0) || ((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (TYPE_WARNING - 407)) | (1L << (UNBOUNDED - 407)) | (1L << (UNCOMMITTED - 407)) | (1L << (UNKNOWN - 407)) | (1L << (USING - 407)) | (1L << (VAR - 407)) | (1L << (VARP - 407)) | (1L << (VIEW_METADATA - 407)) | (1L << (WORK - 407)) | (1L << (XML - 407)) | (1L << (XMLNAMESPACES - 407)) | (1L << (DOUBLE_QUOTE_ID - 407)) | (1L << (SQUARE_BRACKET_ID - 407)) | (1L << (ID - 407)) | (1L << (LR_BRACKET - 407)))) != 0)) {
				{
				{
				setState(1794); sql_clause();
				}
				}
				setState(1799);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1800); match(RESIGNAL);
			setState(1801); match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_statementContext extends ParserRuleContext {
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode CALL() { return getToken(sybaseiqParser.CALL, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public Call_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitCall_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Call_statementContext call_statement() throws RecognitionException {
		Call_statementContext _localctx = new Call_statementContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_call_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1803); match(CALL);
			setState(1804); procedure_name();
			setState(1805); match(LR_BRACKET);
			setState(1814);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << COALESCE) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DEFAULT - 76)) | (1L << (FORCESEEK - 76)) | (1L << (IDENTITY - 76)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (LEFT - 152)) | (1L << (NULL - 152)) | (1L << (NULLIF - 152)) | (1L << (REPLACE - 152)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (RIGHT - 224)) | (1L << (SESSION_USER - 224)) | (1L << (SYSTEM_USER - 224)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ABSOLUTE - 300)) | (1L << (APPLY - 300)) | (1L << (AUTO - 300)) | (1L << (AVG - 300)) | (1L << (BASE64 - 300)) | (1L << (BINARY_CHECKSUM - 300)) | (1L << (CALLER - 300)) | (1L << (CAST - 300)) | (1L << (CATCH - 300)) | (1L << (CHECKSUM - 300)) | (1L << (CHECKSUM_AGG - 300)) | (1L << (COMMITTED - 300)) | (1L << (CONCAT - 300)) | (1L << (COOKIE - 300)) | (1L << (COUNT - 300)) | (1L << (COUNT_BIG - 300)) | (1L << (DATEADD - 300)) | (1L << (DATEDIFF - 300)) | (1L << (DATENAME - 300)) | (1L << (DATEPART - 300)) | (1L << (DELAY - 300)) | (1L << (DELETED - 300)) | (1L << (DENSE_RANK - 300)) | (1L << (DISABLE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (FAST - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FIRST - 300)) | (1L << (FOLLOWING - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (FULLSCAN - 300)) | (1L << (GLOBAL - 300)) | (1L << (GO - 300)) | (1L << (GROUPING - 300)) | (1L << (GROUPING_ID - 300)) | (1L << (HASH - 300)) | (1L << (INSENSITIVE - 300)) | (1L << (INSERTED - 300)) | (1L << (ISOLATION - 300)) | (1L << (KEEPFIXED - 300)) | (1L << (KEYSET - 300)) | (1L << (LAST - 300)) | (1L << (LEVEL - 300)) | (1L << (LOCAL - 300)) | (1L << (LOCK_ESCALATION - 300)) | (1L << (LOGIN - 300)) | (1L << (LOOP - 300)) | (1L << (MARK - 300)) | (1L << (MAX - 300)) | (1L << (MIN - 300)) | (1L << (MIN_ACTIVE_ROWVERSION - 300)) | (1L << (MOD - 300)) | (1L << (MODIFY - 300)) | (1L << (NEXT - 300)) | (1L << (NAME - 300)) | (1L << (NOCOUNT - 300)) | (1L << (NOEXPAND - 300)) | (1L << (NORECOMPUTE - 300)) | (1L << (NTILE - 300)) | (1L << (NUMBER - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (OFFSET - 364)) | (1L << (ONLY - 364)) | (1L << (OPTIMISTIC - 364)) | (1L << (OPTIMIZE - 364)) | (1L << (OUT - 364)) | (1L << (OUTPUT - 364)) | (1L << (OWNER - 364)) | (1L << (PARTITION - 364)) | (1L << (PATH - 364)) | (1L << (PRECEDING - 364)) | (1L << (PRIOR - 364)) | (1L << (RANGE - 364)) | (1L << (RANK - 364)) | (1L << (READONLY - 364)) | (1L << (READ_ONLY - 364)) | (1L << (RECOMPILE - 364)) | (1L << (RELATIVE - 364)) | (1L << (REMOTE - 364)) | (1L << (REPEATABLE - 364)) | (1L << (ROOT - 364)) | (1L << (ROW - 364)) | (1L << (ROWGUID - 364)) | (1L << (ROWS - 364)) | (1L << (ROW_NUMBER - 364)) | (1L << (SAMPLE - 364)) | (1L << (SCHEMABINDING - 364)) | (1L << (SCROLL - 364)) | (1L << (SCROLL_LOCKS - 364)) | (1L << (SELF - 364)) | (1L << (SERIALIZABLE - 364)) | (1L << (SNAPSHOT - 364)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 364)) | (1L << (STATIC - 364)) | (1L << (STATS_STREAM - 364)) | (1L << (STDEV - 364)) | (1L << (STDEVP - 364)) | (1L << (SUM - 364)) | (1L << (THROW - 364)) | (1L << (TIES - 364)) | (1L << (TIME - 364)) | (1L << (TRY - 364)) | (1L << (TYPE - 364)) | (1L << (TYPE_WARNING - 364)) | (1L << (UNBOUNDED - 364)) | (1L << (UNCOMMITTED - 364)) | (1L << (UNKNOWN - 364)) | (1L << (USING - 364)) | (1L << (VAR - 364)) | (1L << (VARP - 364)) | (1L << (VIEW_METADATA - 364)) | (1L << (WORK - 364)) | (1L << (XML - 364)) | (1L << (XMLNAMESPACES - 364)) | (1L << (DOUBLE_QUOTE_ID - 364)) | (1L << (SQUARE_BRACKET_ID - 364)) | (1L << (LOCAL_ID - 364)) | (1L << (DECIMAL - 364)) | (1L << (ID - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (STRING - 428)) | (1L << (BINARY - 428)) | (1L << (FLOAT - 428)) | (1L << (REAL - 428)) | (1L << (DOLLAR - 428)) | (1L << (LR_BRACKET - 428)) | (1L << (PLUS - 428)) | (1L << (MINUS - 428)) | (1L << (BIT_NOT - 428)))) != 0)) {
				{
				setState(1806); expression(0);
				setState(1811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1807); match(COMMA);
					setState(1808); expression(0);
					}
					}
					setState(1813);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1816); match(RR_BRACKET);
			setState(1817); match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_rightsContext extends ParserRuleContext {
		public ExpressionContext schemanname;
		public ExpressionContext procname;
		public TerminalNode CALL() { return getToken(sybaseiqParser.CALL, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode PUBLIC() { return getToken(sybaseiqParser.PUBLIC, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Permission_listContext permission_list() {
			return getRuleContext(Permission_listContext.class,0);
		}
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public TerminalNode GRANT_PERMISSION() { return getToken(sybaseiqParser.GRANT_PERMISSION, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public View_nameContext view_name() {
			return getRuleContext(View_nameContext.class,0);
		}
		public TerminalNode SECURITY() { return getToken(sybaseiqParser.SECURITY, 0); }
		public TerminalNode GRANT() { return getToken(sybaseiqParser.GRANT, 0); }
		public TerminalNode MANAGE_PERMISSION() { return getToken(sybaseiqParser.MANAGE_PERMISSION, 0); }
		public TerminalNode TO() { return getToken(sybaseiqParser.TO, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Grant_rightsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_rights; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitGrant_rights(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_rightsContext grant_rights() throws RecognitionException {
		Grant_rightsContext _localctx = new Grant_rightsContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_grant_rights);
		try {
			setState(1855);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1819); match(CALL);
				setState(1820); match(SECURITY);
				setState(1821); match(DOT);
				setState(1822); match(GRANT_PERMISSION);
				setState(1823); match(LR_BRACKET);
				setState(1824); ((Grant_rightsContext)_localctx).schemanname = expression(0);
				setState(1825); match(COMMA);
				setState(1826); ((Grant_rightsContext)_localctx).procname = expression(0);
				setState(1827); match(RR_BRACKET);
				setState(1828); match(SEMI);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1830); match(CALL);
				setState(1831); match(SECURITY);
				setState(1832); match(DOT);
				setState(1833); match(MANAGE_PERMISSION);
				setState(1834); match(LR_BRACKET);
				setState(1835); ((Grant_rightsContext)_localctx).schemanname = expression(0);
				setState(1836); match(COMMA);
				setState(1837); ((Grant_rightsContext)_localctx).procname = expression(0);
				setState(1838); match(RR_BRACKET);
				setState(1839); match(SEMI);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1841); match(GRANT);
				setState(1842); permission_list();
				setState(1843); match(ON);
				setState(1846);
				switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
				case 1:
					{
					setState(1844); table_name();
					}
					break;

				case 2:
					{
					setState(1845); view_name();
					}
					break;
				}
				setState(1848); match(TO);
				setState(1851);
				switch (_input.LA(1)) {
				case PUBLIC:
					{
					setState(1849); match(PUBLIC);
					}
					break;
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MIN:
				case MODIFY:
				case NEXT:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(1850); column_name_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1853); match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Permission_listContext extends ParserRuleContext {
		public List<PermissionContext> permission() {
			return getRuleContexts(PermissionContext.class);
		}
		public PermissionContext permission(int i) {
			return getRuleContext(PermissionContext.class,i);
		}
		public Permission_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permission_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitPermission_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Permission_listContext permission_list() throws RecognitionException {
		Permission_listContext _localctx = new Permission_listContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_permission_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1857); permission();
			setState(1862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1858); match(COMMA);
				setState(1859); permission();
				}
				}
				setState(1864);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PermissionContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(sybaseiqParser.EXECUTE, 0); }
		public TerminalNode DELETE() { return getToken(sybaseiqParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(sybaseiqParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(sybaseiqParser.UPDATE, 0); }
		public TerminalNode SELECT() { return getToken(sybaseiqParser.SELECT, 0); }
		public TerminalNode DECRYPT() { return getToken(sybaseiqParser.DECRYPT, 0); }
		public TerminalNode REFERENCES() { return getToken(sybaseiqParser.REFERENCES, 0); }
		public PermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permission; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PermissionContext permission() throws RecognitionException {
		PermissionContext _localctx = new PermissionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_permission);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1865);
			_la = _input.LA(1);
			if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (DECRYPT - 75)) | (1L << (DELETE - 75)) | (1L << (EXECUTE - 75)))) != 0) || _la==INSERT || _la==REFERENCES || _la==SELECT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schemaContext extends ParserRuleContext {
		public ExpressionContext tablename;
		public Create_noteContext create_note() {
			return getRuleContext(Create_noteContext.class,0);
		}
		public TerminalNode CALL() { return getToken(sybaseiqParser.CALL, 0); }
		public TerminalNode SECURITY() { return getToken(sybaseiqParser.SECURITY, 0); }
		public TerminalNode CREATE_SCHEMA() { return getToken(sybaseiqParser.CREATE_SCHEMA, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitCreate_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_schemaContext create_schema() throws RecognitionException {
		Create_schemaContext _localctx = new Create_schemaContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_create_schema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1867); match(CALL);
			setState(1868); match(SECURITY);
			setState(1869); match(DOT);
			setState(1870); match(CREATE_SCHEMA);
			setState(1871); match(LR_BRACKET);
			setState(1872); ((Create_schemaContext)_localctx).tablename = expression(0);
			setState(1873); match(RR_BRACKET);
			setState(1874); match(SEMI);
			setState(1875); create_note();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_noteContext extends ParserRuleContext {
		public ExpressionContext tablename;
		public TerminalNode CREATE_NOTE() { return getToken(sybaseiqParser.CREATE_NOTE, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode CALL() { return getToken(sybaseiqParser.CALL, 0); }
		public TerminalNode SECURITY() { return getToken(sybaseiqParser.SECURITY, 0); }
		public Create_associationContext create_association(int i) {
			return getRuleContext(Create_associationContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public List<Create_associationContext> create_association() {
			return getRuleContexts(Create_associationContext.class);
		}
		public Create_noteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_note; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitCreate_note(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_noteContext create_note() throws RecognitionException {
		Create_noteContext _localctx = new Create_noteContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_create_note);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1877); match(CALL);
			setState(1878); match(SECURITY);
			setState(1879); match(DOT);
			setState(1880); match(CREATE_NOTE);
			setState(1881); match(LR_BRACKET);
			setState(1882); ((Create_noteContext)_localctx).tablename = expression(0);
			setState(1883); match(COMMA);
			setState(1884); expression(0);
			setState(1885); match(COMMA);
			setState(1886); expression(0);
			setState(1887); match(COMMA);
			setState(1888); expression(0);
			setState(1889); match(RR_BRACKET);
			setState(1890); match(SEMI);
			setState(1892); 
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,271,_ctx);
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1891); create_association();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1894); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,271,_ctx);
			} while ( _alt!=2 && _alt!=-1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_associationContext extends ParserRuleContext {
		public ExpressionContext backendname;
		public ExpressionContext tablename;
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode CALL() { return getToken(sybaseiqParser.CALL, 0); }
		public TerminalNode SECURITY() { return getToken(sybaseiqParser.SECURITY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode CREATE_ASSOCIATION() { return getToken(sybaseiqParser.CREATE_ASSOCIATION, 0); }
		public Create_associationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_association; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitCreate_association(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_associationContext create_association() throws RecognitionException {
		Create_associationContext _localctx = new Create_associationContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_create_association);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1896); match(CALL);
			setState(1897); match(SECURITY);
			setState(1898); match(DOT);
			setState(1899); match(CREATE_ASSOCIATION);
			setState(1900); match(LR_BRACKET);
			setState(1901); ((Create_associationContext)_localctx).backendname = expression(0);
			setState(1902); match(COMMA);
			setState(1903); ((Create_associationContext)_localctx).tablename = expression(0);
			setState(1904); match(RR_BRACKET);
			setState(1905); match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_statementContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public Comment_on_objectContext comment_on_object() {
			return getRuleContext(Comment_on_objectContext.class,0);
		}
		public TerminalNode STRING_COMMENT() { return getToken(sybaseiqParser.STRING_COMMENT, 0); }
		public TerminalNode COMMENT() { return getToken(sybaseiqParser.COMMENT, 0); }
		public TerminalNode IS() { return getToken(sybaseiqParser.IS, 0); }
		public Comment_on_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitComment_on_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_statementContext comment_on_statement() throws RecognitionException {
		Comment_on_statementContext _localctx = new Comment_on_statementContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_comment_on_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1907); match(COMMENT);
			setState(1908); match(ON);
			setState(1909); comment_on_object();
			setState(1910); match(IS);
			setState(1911); match(STRING_COMMENT);
			setState(1913);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(1912); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Message_statementContext extends ParserRuleContext {
		public TerminalNode SYSTEM() { return getToken(sybaseiqParser.SYSTEM, 0); }
		public TerminalNode ALL() { return getToken(sybaseiqParser.ALL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEBUG() { return getToken(sybaseiqParser.DEBUG, 0); }
		public TerminalNode LOG() { return getToken(sybaseiqParser.LOG, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode WARNING() { return getToken(sybaseiqParser.WARNING, 0); }
		public TerminalNode STATUS() { return getToken(sybaseiqParser.STATUS, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode INFO() { return getToken(sybaseiqParser.INFO, 0); }
		public TerminalNode ACTION() { return getToken(sybaseiqParser.ACTION, 0); }
		public TerminalNode EVENT() { return getToken(sybaseiqParser.EVENT, 0); }
		public TerminalNode FOR() { return getToken(sybaseiqParser.FOR, 0); }
		public TerminalNode CLIENT() { return getToken(sybaseiqParser.CLIENT, 0); }
		public TerminalNode ONLY() { return getToken(sybaseiqParser.ONLY, 0); }
		public TerminalNode TO() { return getToken(sybaseiqParser.TO, 0); }
		public TerminalNode CONSOLE() { return getToken(sybaseiqParser.CONSOLE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(sybaseiqParser.IMMEDIATE, 0); }
		public TerminalNode CONNECTION() { return getToken(sybaseiqParser.CONNECTION, 0); }
		public TerminalNode MESSAGE() { return getToken(sybaseiqParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(sybaseiqParser.TYPE, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_message_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitMessage_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Message_statementContext message_statement() throws RecognitionException {
		Message_statementContext _localctx = new Message_statementContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_message_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1915); match(MESSAGE);
			setState(1916); expression(0);
			setState(1919);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				{
				setState(1917); match(COMMA);
				setState(1918); expression(0);
				}
				break;
			}
			setState(1923);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				{
				setState(1921); match(TYPE);
				setState(1922);
				_la = _input.LA(1);
				if ( !(_la==ACTION || _la==INFO || _la==STATUS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			}
			setState(1949);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(1925); match(TO);
				setState(1943);
				switch (_input.LA(1)) {
				case CONSOLE:
					{
					setState(1926); match(CONSOLE);
					}
					break;
				case CLIENT:
					{
					setState(1927); match(CLIENT);
					setState(1937);
					switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
					case 1:
						{
						setState(1928); match(FOR);
						setState(1929); match(LR_BRACKET);
						setState(1930); match(CONNECTION);
						setState(1931); id();
						setState(1933);
						_la = _input.LA(1);
						if (_la==IMMEDIATE) {
							{
							setState(1932); match(IMMEDIATE);
							}
						}

						}
						break;

					case 2:
						{
						setState(1935); match(ALL);
						setState(1936); match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				case EVENT:
				case LOG:
				case SYSTEM:
					{
					setState(1940);
					_la = _input.LA(1);
					if (_la==EVENT || _la==SYSTEM) {
						{
						setState(1939);
						_la = _input.LA(1);
						if ( !(_la==EVENT || _la==SYSTEM) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
					}

					setState(1942); match(LOG);
					}
					break;
				case EOF:
				case ALTER:
				case AS:
				case BEGIN:
				case BREAK:
				case CALL:
				case CASE:
				case CLOSE:
				case COALESCE:
				case COMMENT:
				case COMMIT:
				case CONTINUE:
				case CONVERT:
				case CREATE:
				case CROSS:
				case CURRENT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEALLOCATE:
				case DEBUG:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DROP:
				case ELSE:
				case ELSEIF:
				case END:
				case ENDIF:
				case EXCEPT:
				case EXCEPTION:
				case EXEC:
				case EXECUTE:
				case FETCH:
				case FOR:
				case FORCESEEK:
				case FROM:
				case FULL:
				case GOTO:
				case GRANT:
				case GROUP:
				case HAVING:
				case IDENTITY:
				case IF:
				case INNER:
				case INSERT:
				case INTERSECT:
				case INTO:
				case JOIN:
				case LEFT:
				case MERGE:
				case MESSAGE:
				case NULL:
				case NULLIF:
				case ON:
				case OPEN:
				case OPTION:
				case ORDER:
				case OUTER:
				case PARAMETERS:
				case PRINT:
				case RAISERROR:
				case REPLACE:
				case RESIGNAL:
				case RETURN:
				case RIGHT:
				case ROLLBACK:
				case SAVE:
				case SELECT:
				case SESSION_USER:
				case SET:
				case SYSTEM_USER:
				case TRUNCATE:
				case UNION:
				case UPDATE:
				case USE:
				case WAITFOR:
				case WHERE:
				case WHILE:
				case WITH:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case FAST:
				case FAST_FORWARD:
				case FINALLY:
				case FIRST:
				case FOLLOWING:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MOD:
				case MODIFY:
				case NEXT:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case RR_BRACKET:
				case COMMA:
				case SEMI:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1947);
				_la = _input.LA(1);
				if (_la==DEBUG) {
					{
					setState(1945); match(DEBUG);
					setState(1946); match(ONLY);
					}
				}

				}
			}

			setState(1952);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				{
				setState(1951); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_statementContext extends ParserRuleContext {
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode REPLACE() { return getToken(sybaseiqParser.REPLACE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public Replace_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitReplace_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replace_statementContext replace_statement() throws RecognitionException {
		Replace_statementContext _localctx = new Replace_statementContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_replace_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1954); match(REPLACE);
			setState(1955); match(LR_BRACKET);
			setState(1956); expression(0);
			setState(1957); match(COMMA);
			setState(1958); expression(0);
			setState(1959); match(COMMA);
			setState(1960); expression(0);
			setState(1961); match(RR_BRACKET);
			setState(1963);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				{
				setState(1962); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_objectContext extends ParserRuleContext {
		public Table_nameContext tablename;
		public Column_nameContext columnname;
		public Index_column_nameContext indexname;
		public Procedure_nameContext procedurename;
		public IdContext rolename;
		public IdContext username;
		public View_nameContext viewname;
		public TerminalNode VIEW() { return getToken(sybaseiqParser.VIEW, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USER() { return getToken(sybaseiqParser.USER, 0); }
		public TerminalNode PROCEDURE() { return getToken(sybaseiqParser.PROCEDURE, 0); }
		public TerminalNode KEY() { return getToken(sybaseiqParser.KEY, 0); }
		public TerminalNode COLUMN() { return getToken(sybaseiqParser.COLUMN, 0); }
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public View_nameContext view_name() {
			return getRuleContext(View_nameContext.class,0);
		}
		public Index_column_nameContext index_column_name() {
			return getRuleContext(Index_column_nameContext.class,0);
		}
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(sybaseiqParser.TABLE, 0); }
		public TerminalNode PRIMARY() { return getToken(sybaseiqParser.PRIMARY, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(sybaseiqParser.ROLE, 0); }
		public TerminalNode INDEX() { return getToken(sybaseiqParser.INDEX, 0); }
		public Comment_on_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_object; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitComment_on_object(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_objectContext comment_on_object() throws RecognitionException {
		Comment_on_objectContext _localctx = new Comment_on_objectContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_comment_on_object);
		try {
			setState(1986);
			switch (_input.LA(1)) {
			case COLUMN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1965); match(COLUMN);
				setState(1966); ((Comment_on_objectContext)_localctx).tablename = table_name();
				setState(1967); match(DOT);
				setState(1968); ((Comment_on_objectContext)_localctx).columnname = column_name();
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 2);
				{
				setState(1970); match(INDEX);
				setState(1971); ((Comment_on_objectContext)_localctx).indexname = index_column_name();
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(1972); match(PRIMARY);
				setState(1973); match(KEY);
				setState(1974); match(ON);
				setState(1975); ((Comment_on_objectContext)_localctx).tablename = table_name();
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1976); match(PROCEDURE);
				setState(1977); ((Comment_on_objectContext)_localctx).procedurename = procedure_name();
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1978); match(ROLE);
				setState(1979); ((Comment_on_objectContext)_localctx).rolename = id();
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1980); match(TABLE);
				setState(1981); ((Comment_on_objectContext)_localctx).tablename = table_name();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 7);
				{
				setState(1982); match(USER);
				setState(1983); ((Comment_on_objectContext)_localctx).username = id();
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 8);
				{
				setState(1984); match(VIEW);
				setState(1985); ((Comment_on_objectContext)_localctx).viewname = view_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionContext extends ParserRuleContext {
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public TerminalNode DECIMAL() { return getToken(sybaseiqParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitIndex_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_optionContext index_option() throws RecognitionException {
		Index_optionContext _localctx = new Index_optionContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_index_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1988); simple_id();
			setState(1989); match(EQUAL);
			setState(1993);
			switch (_input.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ID:
				{
				setState(1990); simple_id();
				}
				break;
			case OFF:
			case ON:
				{
				setState(1991); on_off();
				}
				break;
			case DECIMAL:
				{
				setState(1992); match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_cursorContext extends ParserRuleContext {
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return getRuleContext(Declare_set_cursor_commonContext.class,0);
		}
		public TerminalNode INSENSITIVE() { return getToken(sybaseiqParser.INSENSITIVE, 0); }
		public TerminalNode DECLARE() { return getToken(sybaseiqParser.DECLARE, 0); }
		public TerminalNode FOR(int i) {
			return getToken(sybaseiqParser.FOR, i);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(sybaseiqParser.CURSOR, 0); }
		public TerminalNode SCROLL() { return getToken(sybaseiqParser.SCROLL, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public List<TerminalNode> FOR() { return getTokens(sybaseiqParser.FOR); }
		public TerminalNode READ() { return getToken(sybaseiqParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(sybaseiqParser.ONLY, 0); }
		public TerminalNode OF() { return getToken(sybaseiqParser.OF, 0); }
		public TerminalNode UPDATE() { return getToken(sybaseiqParser.UPDATE, 0); }
		public Declare_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_cursor; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDeclare_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_cursorContext declare_cursor() throws RecognitionException {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_declare_cursor);
		int _la;
		try {
			setState(2040);
			switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1995); match(DECLARE);
				setState(1996); cursor_name();
				setState(1997); match(CURSOR);
				setState(1999);
				switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
				case 1:
					{
					setState(1998); match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2001); match(DECLARE);
				setState(2002); cursor_name();
				setState(2004);
				_la = _input.LA(1);
				if (_la==INSENSITIVE) {
					{
					setState(2003); match(INSENSITIVE);
					}
				}

				setState(2007);
				_la = _input.LA(1);
				if (_la==SCROLL) {
					{
					setState(2006); match(SCROLL);
					}
				}

				setState(2009); match(CURSOR);
				setState(2010); match(FOR);
				setState(2011); select_statement();
				setState(2020);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(2012); match(FOR);
					setState(2018);
					switch (_input.LA(1)) {
					case READ:
						{
						setState(2013); match(READ);
						setState(2014); match(ONLY);
						}
						break;
					case UPDATE:
						{
						setState(2015); match(UPDATE);
						}
						break;
					case OF:
						{
						{
						setState(2016); match(OF);
						setState(2017); column_name_list();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(2023);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(2022); match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2025); match(DECLARE);
				setState(2026); cursor_name();
				setState(2027); match(CURSOR);
				setState(2028); declare_set_cursor_common();
				setState(2035);
				switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					setState(2029); match(FOR);
					setState(2030); match(UPDATE);
					setState(2033);
					_la = _input.LA(1);
					if (_la==OF) {
						{
						setState(2031); match(OF);
						setState(2032); column_name_list();
						}
					}

					}
					break;
				}
				setState(2038);
				switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					setState(2037); match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_set_cursor_commonContext extends ParserRuleContext {
		public TerminalNode KEYSET() { return getToken(sybaseiqParser.KEYSET, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode OPTIMISTIC() { return getToken(sybaseiqParser.OPTIMISTIC, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(sybaseiqParser.SCROLL_LOCKS, 0); }
		public TerminalNode READ_ONLY() { return getToken(sybaseiqParser.READ_ONLY, 0); }
		public TerminalNode GLOBAL() { return getToken(sybaseiqParser.GLOBAL, 0); }
		public TerminalNode SCROLL() { return getToken(sybaseiqParser.SCROLL, 0); }
		public TerminalNode FOR() { return getToken(sybaseiqParser.FOR, 0); }
		public TerminalNode DYNAMIC() { return getToken(sybaseiqParser.DYNAMIC, 0); }
		public TerminalNode LOCAL() { return getToken(sybaseiqParser.LOCAL, 0); }
		public TerminalNode STATIC() { return getToken(sybaseiqParser.STATIC, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(sybaseiqParser.FAST_FORWARD, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(sybaseiqParser.TYPE_WARNING, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(sybaseiqParser.FORWARD_ONLY, 0); }
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_set_cursor_common; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDeclare_set_cursor_common(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_set_cursor_commonContext declare_set_cursor_common() throws RecognitionException {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_declare_set_cursor_common);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2043);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==LOCAL) {
				{
				setState(2042);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2046);
			_la = _input.LA(1);
			if (_la==FORWARD_ONLY || _la==SCROLL) {
				{
				setState(2045);
				_la = _input.LA(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2049);
			_la = _input.LA(1);
			if (((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & ((1L << (DYNAMIC - 324)) | (1L << (FAST_FORWARD - 324)) | (1L << (KEYSET - 324)))) != 0) || _la==STATIC) {
				{
				setState(2048);
				_la = _input.LA(1);
				if ( !(((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & ((1L << (DYNAMIC - 324)) | (1L << (FAST_FORWARD - 324)) | (1L << (KEYSET - 324)))) != 0) || _la==STATIC) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2052);
			_la = _input.LA(1);
			if (((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (OPTIMISTIC - 366)) | (1L << (READ_ONLY - 366)) | (1L << (SCROLL_LOCKS - 366)))) != 0)) {
				{
				setState(2051);
				_la = _input.LA(1);
				if ( !(((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (OPTIMISTIC - 366)) | (1L << (READ_ONLY - 366)) | (1L << (SCROLL_LOCKS - 366)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2055);
			_la = _input.LA(1);
			if (_la==TYPE_WARNING) {
				{
				setState(2054); match(TYPE_WARNING);
				}
			}

			setState(2057); match(FOR);
			setState(2058); select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_cursorContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(sybaseiqParser.NEXT, 0); }
		public TerminalNode FIRST() { return getToken(sybaseiqParser.FIRST, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(sybaseiqParser.LOCAL_ID); }
		public TerminalNode PRIOR() { return getToken(sybaseiqParser.PRIOR, 0); }
		public TerminalNode INTO() { return getToken(sybaseiqParser.INTO, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID(int i) {
			return getToken(sybaseiqParser.LOCAL_ID, i);
		}
		public TerminalNode FETCH() { return getToken(sybaseiqParser.FETCH, 0); }
		public TerminalNode RELATIVE() { return getToken(sybaseiqParser.RELATIVE, 0); }
		public TerminalNode LAST() { return getToken(sybaseiqParser.LAST, 0); }
		public TerminalNode GLOBAL() { return getToken(sybaseiqParser.GLOBAL, 0); }
		public TerminalNode ABSOLUTE() { return getToken(sybaseiqParser.ABSOLUTE, 0); }
		public TerminalNode FROM() { return getToken(sybaseiqParser.FROM, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_cursor; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitFetch_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_cursorContext fetch_cursor() throws RecognitionException {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_fetch_cursor);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2060); match(FETCH);
			setState(2072);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				{
				setState(2069);
				switch (_input.LA(1)) {
				case NEXT:
					{
					setState(2061); match(NEXT);
					}
					break;
				case PRIOR:
					{
					setState(2062); match(PRIOR);
					}
					break;
				case FIRST:
					{
					setState(2063); match(FIRST);
					}
					break;
				case LAST:
					{
					setState(2064); match(LAST);
					}
					break;
				case ABSOLUTE:
					{
					setState(2065); match(ABSOLUTE);
					setState(2066); expression(0);
					}
					break;
				case RELATIVE:
					{
					setState(2067); match(RELATIVE);
					setState(2068); expression(0);
					}
					break;
				case FROM:
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2071); match(FROM);
				}
				break;
			}
			setState(2075);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(2074); match(GLOBAL);
				}
				break;
			}
			setState(2077); cursor_name();
			setState(2087);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				{
				setState(2078); match(INTO);
				setState(2079); match(LOCAL_ID);
				setState(2084);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
				while ( _alt!=2 && _alt!=-1 ) {
					if ( _alt==1 ) {
						{
						{
						setState(2080); match(COMMA);
						setState(2081); match(LOCAL_ID);
						}
						} 
					}
					setState(2086);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
				}
				}
				break;
			}
			setState(2090);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				{
				setState(2089); match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_specialContext extends ParserRuleContext {
		public ExpressionContext l_name;
		public ExpressionContext r_name;
		public TerminalNode SET() { return getToken(sybaseiqParser.SET, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public TerminalNode LOCAL_ID() { return getToken(sybaseiqParser.LOCAL_ID, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(sybaseiqParser.SERIALIZABLE, 0); }
		public TerminalNode TRANSACTION() { return getToken(sybaseiqParser.TRANSACTION, 0); }
		public TerminalNode TEMPORARY() { return getToken(sybaseiqParser.TEMPORARY, 0); }
		public TerminalNode LEVEL() { return getToken(sybaseiqParser.LEVEL, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(sybaseiqParser.UNCOMMITTED, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ISOLATION() { return getToken(sybaseiqParser.ISOLATION, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode REPEATABLE() { return getToken(sybaseiqParser.REPEATABLE, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMITTED() { return getToken(sybaseiqParser.COMMITTED, 0); }
		public TerminalNode READ() { return getToken(sybaseiqParser.READ, 0); }
		public TerminalNode EXISTING() { return getToken(sybaseiqParser.EXISTING, 0); }
		public TerminalNode OPTION() { return getToken(sybaseiqParser.OPTION, 0); }
		public TerminalNode SNAPSHOT() { return getToken(sybaseiqParser.SNAPSHOT, 0); }
		public Set_specialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_special; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSet_special(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_specialContext set_special() throws RecognitionException {
		Set_specialContext _localctx = new Set_specialContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_set_special);
		int _la;
		try {
			setState(2134);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2092); match(SET);
				setState(2093); id();
				setState(2098);
				switch (_input.LA(1)) {
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MIN:
				case MODIFY:
				case NEXT:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(2094); id();
					}
					break;
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(2095); constant();
					}
					break;
				case LOCAL_ID:
					{
					setState(2096); match(LOCAL_ID);
					}
					break;
				case OFF:
				case ON:
					{
					setState(2097); on_off();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2101);
				switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					setState(2100); match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2103); match(SET);
				setState(2104); match(TRANSACTION);
				setState(2105); match(ISOLATION);
				setState(2106); match(LEVEL);
				setState(2115);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					setState(2107); match(READ);
					setState(2108); match(UNCOMMITTED);
					}
					break;

				case 2:
					{
					setState(2109); match(READ);
					setState(2110); match(COMMITTED);
					}
					break;

				case 3:
					{
					setState(2111); match(REPEATABLE);
					setState(2112); match(READ);
					}
					break;

				case 4:
					{
					setState(2113); match(SNAPSHOT);
					}
					break;

				case 5:
					{
					setState(2114); match(SERIALIZABLE);
					}
					break;
				}
				setState(2118);
				switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					setState(2117); match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2120); match(SET);
				setState(2122);
				_la = _input.LA(1);
				if (_la==EXISTING) {
					{
					setState(2121); match(EXISTING);
					}
				}

				setState(2125);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(2124); match(TEMPORARY);
					}
				}

				setState(2127); match(OPTION);
				setState(2128); ((Set_specialContext)_localctx).l_name = expression(0);
				setState(2129); match(EQUAL);
				setState(2130); ((Set_specialContext)_localctx).r_name = expression(0);
				setState(2132);
				switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
				case 1:
					{
					setState(2131); match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public int _p;
		public ExpressionContext(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }
		public ExpressionContext(ParserRuleContext parent, int invokingState, int _p) {
			super(parent, invokingState);
			this._p = _p;
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
			this._p = ctx._p;
		}
	}
	public static class Primitive_expressionContext extends ExpressionContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Primitive_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitPrimitive_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Subquery_expressionContext extends ExpressionContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSubquery_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Case_expressionContext extends ExpressionContext {
		public Case_exprContext case_expr() {
			return getRuleContext(Case_exprContext.class,0);
		}
		public Case_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitCase_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Bracket_expressionContext extends ExpressionContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Bracket_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitBracket_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class String_concatenationContext extends ExpressionContext {
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public String_concatenationContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitString_concatenation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Binary_operator_expressionContext extends ExpressionContext {
		public Token op;
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public Binary_operator_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitBinary_operator_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Unary_operator_expressionContext extends ExpressionContext {
		public Token op;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Unary_operator_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitUnary_operator_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Column_ref_expressionContext extends ExpressionContext {
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public Column_ref_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitColumn_ref_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Function_call_expressionContext extends ExpressionContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(sybaseiqParser.COLLATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Function_call_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitFunction_call_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState, _p);
		ExpressionContext _prevctx = _localctx;
		int _startState = 150;
		enterRecursionRule(_localctx, RULE_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2156);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				_localctx = new Unary_operator_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(2137); match(BIT_NOT);
				setState(2138); expression(6);
				}
				break;

			case 2:
				{
				_localctx = new Unary_operator_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2139);
				((Unary_operator_expressionContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((Unary_operator_expressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(2140); expression(3);
				}
				break;

			case 3:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2141); match(DEFAULT);
				}
				break;

			case 4:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2142); match(NULL);
				}
				break;

			case 5:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2143); match(LOCAL_ID);
				}
				break;

			case 6:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2144); constant();
				}
				break;

			case 7:
				{
				_localctx = new Function_call_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2145); function_call();
				}
				break;

			case 8:
				{
				_localctx = new Case_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2146); case_expr();
				}
				break;

			case 9:
				{
				_localctx = new Column_ref_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2147); full_column_name();
				}
				break;

			case 10:
				{
				_localctx = new Bracket_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2148); match(LR_BRACKET);
				setState(2149); expression(0);
				setState(2150); match(RR_BRACKET);
				}
				break;

			case 11:
				{
				_localctx = new Subquery_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2152); match(LR_BRACKET);
				setState(2153); subquery();
				setState(2154); match(RR_BRACKET);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2177);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2175);
					switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
					case 1:
						{
						_localctx = new String_concatenationContext(new ExpressionContext(_parentctx, _parentState, _p));
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(2158);
						if (!(5 >= _localctx._p)) throw new FailedPredicateException(this, "5 >= $_p");
						setState(2159); match(BIT_OR);
						setState(2160); match(BIT_OR);
						setState(2161); expression(6);
						}
						break;

					case 2:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState, _p));
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(2162);
						if (!(4 >= _localctx._p)) throw new FailedPredicateException(this, "4 >= $_p");
						setState(2163);
						((Binary_operator_expressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (STAR - 454)) | (1L << (DIVIDE - 454)) | (1L << (MODULE - 454)))) != 0)) ) {
							((Binary_operator_expressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						consume();
						setState(2164); expression(5);
						}
						break;

					case 3:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState, _p));
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(2165);
						if (!(2 >= _localctx._p)) throw new FailedPredicateException(this, "2 >= $_p");
						setState(2166);
						((Binary_operator_expressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PLUS - 457)) | (1L << (MINUS - 457)) | (1L << (BIT_OR - 457)) | (1L << (BIT_AND - 457)) | (1L << (BIT_XOR - 457)))) != 0)) ) {
							((Binary_operator_expressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						consume();
						setState(2167); expression(3);
						}
						break;

					case 4:
						{
						_localctx = new Function_call_expressionContext(new ExpressionContext(_parentctx, _parentState, _p));
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(2168);
						if (!(11 >= _localctx._p)) throw new FailedPredicateException(this, "11 >= $_p");
						setState(2169); match(COLLATE);
						setState(2170); id();
						}
						break;

					case 5:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState, _p));
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(2171);
						if (!(1 >= _localctx._p)) throw new FailedPredicateException(this, "1 >= $_p");
						setState(2172); comparison_operator();
						setState(2173); expression(0);
						}
						break;
					}
					} 
				}
				setState(2179);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Constant_expressionContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(sybaseiqParser.LOCAL_ID, 0); }
		public TerminalNode AUTOINCREMENT() { return getToken(sybaseiqParser.AUTOINCREMENT, 0); }
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode NULL() { return getToken(sybaseiqParser.NULL, 0); }
		public Constant_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_expression; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitConstant_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_expressionContext constant_expression() throws RecognitionException {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_constant_expression);
		try {
			setState(2189);
			switch (_input.LA(1)) {
			case NULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2180); match(NULL);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2181); constant();
				}
				break;
			case COALESCE:
			case CONVERT:
			case CURRENT:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case FORCESEEK:
			case IDENTITY:
			case LEFT:
			case NULLIF:
			case REPLACE:
			case RIGHT:
			case SESSION_USER:
			case SYSTEM_USER:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case BINARY_CHECKSUM:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MOD:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(2182); function_call();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 4);
				{
				setState(2183); match(LOCAL_ID);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(2184); match(LR_BRACKET);
				setState(2185); constant_expression();
				setState(2186); match(RR_BRACKET);
				}
				break;
			case AUTOINCREMENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2188); match(AUTOINCREMENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2191); select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_sourceContext extends ParserRuleContext {
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Dml_table_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_source; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDml_table_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_table_sourceContext dml_table_source() throws RecognitionException {
		Dml_table_sourceContext _localctx = new Dml_table_sourceContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_dml_table_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2193); query_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_expressionContext extends ParserRuleContext {
		public List<Common_table_expressionContext> common_table_expression() {
			return getRuleContexts(Common_table_expressionContext.class);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(sybaseiqParser.XMLNAMESPACES, 0); }
		public TerminalNode WITH() { return getToken(sybaseiqParser.WITH, 0); }
		public Common_table_expressionContext common_table_expression(int i) {
			return getRuleContext(Common_table_expressionContext.class,i);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_expression; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitWith_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_expressionContext with_expression() throws RecognitionException {
		With_expressionContext _localctx = new With_expressionContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_with_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2195); match(WITH);
			setState(2198);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				setState(2196); match(XMLNAMESPACES);
				setState(2197); match(COMMA);
				}
				break;
			}
			setState(2200); common_table_expression();
			setState(2205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2201); match(COMMA);
				setState(2202); common_table_expression();
				}
				}
				setState(2207);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_table_expressionContext extends ParserRuleContext {
		public IdContext expression_name;
		public TerminalNode AS() { return getToken(sybaseiqParser.AS, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expression; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitCommon_table_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_expressionContext common_table_expression() throws RecognitionException {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_common_table_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2208); ((Common_table_expressionContext)_localctx).expression_name = id();
			setState(2213);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2209); match(LR_BRACKET);
				setState(2210); column_name_list();
				setState(2211); match(RR_BRACKET);
				}
			}

			setState(2215); match(AS);
			setState(2216); match(LR_BRACKET);
			setState(2217); select_statement();
			setState(2218); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext method_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public TerminalNode LOCAL_ID() { return getToken(sybaseiqParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitUpdate_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_elemContext update_elem() throws RecognitionException {
		Update_elemContext _localctx = new Update_elemContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_update_elem);
		try {
			setState(2236);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2222);
				switch (_input.LA(1)) {
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MIN:
				case MODIFY:
				case NEXT:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(2220); full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					setState(2221); match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2226);
				switch (_input.LA(1)) {
				case EQUAL:
					{
					setState(2224); match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(2225); assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2228); expression(0);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2229); ((Update_elemContext)_localctx).udt_column_name = id();
				setState(2230); match(DOT);
				setState(2231); ((Update_elemContext)_localctx).method_name = id();
				setState(2232); match(LR_BRACKET);
				setState(2233); expression_list();
				setState(2234); match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Then_condition_listContext extends ParserRuleContext {
		public Then_conditionContext then_condition(int i) {
			return getRuleContext(Then_conditionContext.class,i);
		}
		public List<Then_conditionContext> then_condition() {
			return getRuleContexts(Then_conditionContext.class);
		}
		public Then_condition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_then_condition_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitThen_condition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Then_condition_listContext then_condition_list() throws RecognitionException {
		Then_condition_listContext _localctx = new Then_condition_listContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_then_condition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2238); then_condition();
			setState(2242);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CALL) | (1L << CASE) | (1L << CLOSE) | (1L << COALESCE) | (1L << COMMENT) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CONVERT) | (1L << CREATE) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (DEALLOCATE - 71)) | (1L << (DECLARE - 71)) | (1L << (DEFAULT - 71)) | (1L << (DELETE - 71)) | (1L << (DROP - 71)) | (1L << (EXCEPTION - 71)) | (1L << (EXEC - 71)) | (1L << (EXECUTE - 71)) | (1L << (FETCH - 71)) | (1L << (FORCESEEK - 71)) | (1L << (GOTO - 71)) | (1L << (GRANT - 71)) | (1L << (IDENTITY - 71)) | (1L << (IF - 71)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (INSERT - 140)) | (1L << (LEFT - 140)) | (1L << (MESSAGE - 140)) | (1L << (NULL - 140)) | (1L << (NULLIF - 140)) | (1L << (OPEN - 140)) | (1L << (PARAMETERS - 140)) | (1L << (PRINT - 140)))) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (RAISERROR - 209)) | (1L << (REPLACE - 209)) | (1L << (RETURN - 209)) | (1L << (RIGHT - 209)) | (1L << (ROLLBACK - 209)) | (1L << (SAVE - 209)) | (1L << (SELECT - 209)) | (1L << (SESSION_USER - 209)) | (1L << (SET - 209)) | (1L << (SYSTEM_USER - 209)) | (1L << (TRUNCATE - 209)))) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (UPDATE - 279)) | (1L << (USE - 279)) | (1L << (WAITFOR - 279)) | (1L << (WHILE - 279)) | (1L << (WITH - 279)) | (1L << (ABSOLUTE - 279)) | (1L << (APPLY - 279)) | (1L << (AUTO - 279)) | (1L << (AVG - 279)) | (1L << (BASE64 - 279)) | (1L << (BINARY_CHECKSUM - 279)) | (1L << (CALLER - 279)) | (1L << (CAST - 279)) | (1L << (CATCH - 279)) | (1L << (CHECKSUM - 279)) | (1L << (CHECKSUM_AGG - 279)) | (1L << (COMMITTED - 279)) | (1L << (CONCAT - 279)) | (1L << (COOKIE - 279)) | (1L << (COUNT - 279)) | (1L << (COUNT_BIG - 279)) | (1L << (DATEADD - 279)) | (1L << (DATEDIFF - 279)) | (1L << (DATENAME - 279)) | (1L << (DATEPART - 279)) | (1L << (DELAY - 279)) | (1L << (DELETED - 279)) | (1L << (DENSE_RANK - 279)) | (1L << (DISABLE - 279)) | (1L << (DYNAMIC - 279)) | (1L << (ENCRYPTION - 279)) | (1L << (FAST - 279)) | (1L << (FAST_FORWARD - 279)) | (1L << (FIRST - 279)) | (1L << (FOLLOWING - 279)) | (1L << (FORWARD_ONLY - 279)) | (1L << (FULLSCAN - 279)) | (1L << (GLOBAL - 279)) | (1L << (GO - 279)) | (1L << (GROUPING - 279)) | (1L << (GROUPING_ID - 279)) | (1L << (HASH - 279)) | (1L << (INSENSITIVE - 279)) | (1L << (INSERTED - 279)) | (1L << (ISOLATION - 279)) | (1L << (KEEPFIXED - 279)))) != 0) || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (KEYSET - 343)) | (1L << (LAST - 343)) | (1L << (LEVEL - 343)) | (1L << (LOCAL - 343)) | (1L << (LOCK_ESCALATION - 343)) | (1L << (LOGIN - 343)) | (1L << (LOOP - 343)) | (1L << (MARK - 343)) | (1L << (MAX - 343)) | (1L << (MIN - 343)) | (1L << (MIN_ACTIVE_ROWVERSION - 343)) | (1L << (MOD - 343)) | (1L << (MODIFY - 343)) | (1L << (NEXT - 343)) | (1L << (NAME - 343)) | (1L << (NOCOUNT - 343)) | (1L << (NOEXPAND - 343)) | (1L << (NORECOMPUTE - 343)) | (1L << (NTILE - 343)) | (1L << (NUMBER - 343)) | (1L << (OFFSET - 343)) | (1L << (ONLY - 343)) | (1L << (OPTIMISTIC - 343)) | (1L << (OPTIMIZE - 343)) | (1L << (OUT - 343)) | (1L << (OUTPUT - 343)) | (1L << (OWNER - 343)) | (1L << (PARTITION - 343)) | (1L << (PATH - 343)) | (1L << (PRECEDING - 343)) | (1L << (PRIOR - 343)) | (1L << (RANGE - 343)) | (1L << (RANK - 343)) | (1L << (READONLY - 343)) | (1L << (READ_ONLY - 343)) | (1L << (RECOMPILE - 343)) | (1L << (RELATIVE - 343)) | (1L << (REMOTE - 343)) | (1L << (REPEATABLE - 343)) | (1L << (ROOT - 343)) | (1L << (ROW - 343)) | (1L << (ROWGUID - 343)) | (1L << (ROWS - 343)) | (1L << (ROW_NUMBER - 343)) | (1L << (SAMPLE - 343)) | (1L << (SCHEMABINDING - 343)) | (1L << (SCROLL - 343)) | (1L << (SCROLL_LOCKS - 343)) | (1L << (SELF - 343)) | (1L << (SERIALIZABLE - 343)) | (1L << (SNAPSHOT - 343)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 343)) | (1L << (STATIC - 343)) | (1L << (STATS_STREAM - 343)) | (1L << (STDEV - 343)) | (1L << (STDEVP - 343)) | (1L << (SUM - 343)) | (1L << (THROW - 343)) | (1L << (TIES - 343)) | (1L << (TIME - 343)) | (1L << (TRY - 343)) | (1L << (TYPE - 343)))) != 0) || ((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (TYPE_WARNING - 407)) | (1L << (UNBOUNDED - 407)) | (1L << (UNCOMMITTED - 407)) | (1L << (UNKNOWN - 407)) | (1L << (USING - 407)) | (1L << (VAR - 407)) | (1L << (VARP - 407)) | (1L << (VIEW_METADATA - 407)) | (1L << (WORK - 407)) | (1L << (XML - 407)) | (1L << (XMLNAMESPACES - 407)) | (1L << (DOUBLE_QUOTE_ID - 407)) | (1L << (SQUARE_BRACKET_ID - 407)) | (1L << (LOCAL_ID - 407)) | (1L << (DECIMAL - 407)) | (1L << (ID - 407)) | (1L << (STRING - 407)) | (1L << (BINARY - 407)) | (1L << (FLOAT - 407)) | (1L << (REAL - 407)) | (1L << (DOLLAR - 407)) | (1L << (LR_BRACKET - 407)) | (1L << (PLUS - 407)) | (1L << (MINUS - 407)) | (1L << (BIT_NOT - 407)))) != 0)) {
				{
				{
				setState(2239); then_condition();
				}
				}
				setState(2244);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Then_conditionContext extends ParserRuleContext {
		public Sql_clauseContext sql_clause() {
			return getRuleContext(Sql_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Then_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_then_condition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitThen_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Then_conditionContext then_condition() throws RecognitionException {
		Then_conditionContext _localctx = new Then_conditionContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_then_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2247);
			switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				setState(2245); sql_clause();
				}
				break;

			case 2:
				{
				setState(2246); expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_listContext extends ParserRuleContext {
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public Search_condition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSearch_condition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_listContext search_condition_list() throws RecognitionException {
		Search_condition_listContext _localctx = new Search_condition_listContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_search_condition_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2249); search_condition();
			setState(2254);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,326,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					setState(2250); match(COMMA);
					setState(2251); search_condition();
					}
					} 
				}
				setState(2256);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,326,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public List<Search_condition_orContext> search_condition_or() {
			return getRuleContexts(Search_condition_orContext.class);
		}
		public List<TerminalNode> AND() { return getTokens(sybaseiqParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(sybaseiqParser.AND, i);
		}
		public Search_condition_orContext search_condition_or(int i) {
			return getRuleContext(Search_condition_orContext.class,i);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSearch_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_search_condition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2257); search_condition_or();
			setState(2262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(2258); match(AND);
				setState(2259); search_condition_or();
				}
				}
				setState(2264);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_orContext extends ParserRuleContext {
		public List<Search_condition_notContext> search_condition_not() {
			return getRuleContexts(Search_condition_notContext.class);
		}
		public List<TerminalNode> OR() { return getTokens(sybaseiqParser.OR); }
		public Search_condition_notContext search_condition_not(int i) {
			return getRuleContext(Search_condition_notContext.class,i);
		}
		public TerminalNode OR(int i) {
			return getToken(sybaseiqParser.OR, i);
		}
		public Search_condition_orContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_or; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSearch_condition_or(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_orContext search_condition_or() throws RecognitionException {
		Search_condition_orContext _localctx = new Search_condition_orContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_search_condition_or);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2265); search_condition_not();
			setState(2270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(2266); match(OR);
				setState(2267); search_condition_not();
				}
				}
				setState(2272);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_notContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(sybaseiqParser.NOT, 0); }
		public Search_condition_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_not; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSearch_condition_not(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_notContext search_condition_not() throws RecognitionException {
		Search_condition_notContext _localctx = new Search_condition_notContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_search_condition_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2274);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2273); match(NOT);
				}
			}

			setState(2276); predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(sybaseiqParser.ESCAPE, 0); }
		public TerminalNode ALL() { return getToken(sybaseiqParser.ALL, 0); }
		public TerminalNode EXISTS() { return getToken(sybaseiqParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode ANY() { return getToken(sybaseiqParser.ANY, 0); }
		public TerminalNode AND() { return getToken(sybaseiqParser.AND, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode IS() { return getToken(sybaseiqParser.IS, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode SOME() { return getToken(sybaseiqParser.SOME, 0); }
		public TerminalNode IN() { return getToken(sybaseiqParser.IN, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(sybaseiqParser.BETWEEN, 0); }
		public TerminalNode NOT() { return getToken(sybaseiqParser.NOT, 0); }
		public TerminalNode LIKE() { return getToken(sybaseiqParser.LIKE, 0); }
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_predicate);
		int _la;
		try {
			setState(2338);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2278); match(EXISTS);
				setState(2279); match(LR_BRACKET);
				setState(2280); subquery();
				setState(2281); match(RR_BRACKET);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2283); expression(0);
				setState(2284); comparison_operator();
				setState(2285); expression(0);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2287); expression(0);
				setState(2288); comparison_operator();
				setState(2289);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2290); match(LR_BRACKET);
				setState(2291); subquery();
				setState(2292); match(RR_BRACKET);
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2294); expression(0);
				setState(2296);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2295); match(NOT);
					}
				}

				setState(2298); match(BETWEEN);
				setState(2299); expression(0);
				setState(2300); match(AND);
				setState(2301); expression(0);
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2303); expression(0);
				setState(2305);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2304); match(NOT);
					}
				}

				setState(2307); match(IN);
				setState(2308); match(LR_BRACKET);
				setState(2311);
				switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
				case 1:
					{
					setState(2309); subquery();
					}
					break;

				case 2:
					{
					setState(2310); expression_list();
					}
					break;
				}
				setState(2313); match(RR_BRACKET);
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2315); expression(0);
				setState(2317);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2316); match(NOT);
					}
				}

				setState(2319); match(LIKE);
				setState(2320); expression(0);
				setState(2323);
				_la = _input.LA(1);
				if (_la==ESCAPE) {
					{
					setState(2321); match(ESCAPE);
					setState(2322); expression(0);
					}
				}

				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2325); expression(0);
				setState(2326); match(IS);
				setState(2327); null_notnull();
				}
				break;

			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2329); expression(0);
				setState(2330); match(LR_BRACKET);
				setState(2331); expression(0);
				setState(2332); match(RR_BRACKET);
				}
				break;

			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2334); match(LR_BRACKET);
				setState(2335); search_condition();
				setState(2336); match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public List<UnionContext> union() {
			return getRuleContexts(UnionContext.class);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public UnionContext union(int i) {
			return getRuleContext(UnionContext.class,i);
		}
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitQuery_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_query_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2345);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(2340); query_specification();
				}
				break;
			case LR_BRACKET:
				{
				setState(2341); match(LR_BRACKET);
				setState(2342); query_expression();
				setState(2343); match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2350);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,337,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					setState(2347); union();
					}
					} 
				}
				setState(2352);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,337,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionContext extends ParserRuleContext {
		public Query_expressionContext query_expression(int i) {
			return getRuleContext(Query_expressionContext.class,i);
		}
		public TerminalNode EXCEPT() { return getToken(sybaseiqParser.EXCEPT, 0); }
		public TerminalNode UNION() { return getToken(sybaseiqParser.UNION, 0); }
		public TerminalNode ALL() { return getToken(sybaseiqParser.ALL, 0); }
		public TerminalNode INTERSECT() { return getToken(sybaseiqParser.INTERSECT, 0); }
		public List<Query_expressionContext> query_expression() {
			return getRuleContexts(Query_expressionContext.class);
		}
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public UnionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_union; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitUnion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionContext union() throws RecognitionException {
		UnionContext _localctx = new UnionContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_union);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2359);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(2353); match(UNION);
				setState(2355);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(2354); match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				setState(2357); match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				setState(2358); match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2370);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(2361); query_specification();
				}
				break;
			case LR_BRACKET:
				{
				setState(2366); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,340,_ctx);
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2362); match(LR_BRACKET);
						setState(2363); query_expression();
						setState(2364); match(RR_BRACKET);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2368); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,340,_ctx);
				} while ( _alt!=2 && _alt!=-1 );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public Table_nameContext into_table;
		public Search_conditionContext where;
		public Search_conditionContext having;
		public TerminalNode ALL() { return getToken(sybaseiqParser.ALL, 0); }
		public TerminalNode PERCENT() { return getToken(sybaseiqParser.PERCENT, 0); }
		public TerminalNode INTO() { return getToken(sybaseiqParser.INTO, 0); }
		public Table_sourceContext table_source(int i) {
			return getRuleContext(Table_sourceContext.class,i);
		}
		public TerminalNode WITH() { return getToken(sybaseiqParser.WITH, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(sybaseiqParser.TOP, 0); }
		public TerminalNode SELECT() { return getToken(sybaseiqParser.SELECT, 0); }
		public TerminalNode WHERE() { return getToken(sybaseiqParser.WHERE, 0); }
		public List<Group_by_itemContext> group_by_item() {
			return getRuleContexts(Group_by_itemContext.class);
		}
		public TerminalNode DISTINCT() { return getToken(sybaseiqParser.DISTINCT, 0); }
		public TerminalNode HAVING() { return getToken(sybaseiqParser.HAVING, 0); }
		public List<Table_sourceContext> table_source() {
			return getRuleContexts(Table_sourceContext.class);
		}
		public TerminalNode BY() { return getToken(sybaseiqParser.BY, 0); }
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode TIES() { return getToken(sybaseiqParser.TIES, 0); }
		public Group_by_itemContext group_by_item(int i) {
			return getRuleContext(Group_by_itemContext.class,i);
		}
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(sybaseiqParser.FROM, 0); }
		public TerminalNode GROUP() { return getToken(sybaseiqParser.GROUP, 0); }
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitQuery_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_query_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2372); match(SELECT);
			setState(2374);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(2373);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2385);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(2376); match(TOP);
				setState(2377); expression(0);
				setState(2379);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(2378); match(PERCENT);
					}
				}

				setState(2383);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2381); match(WITH);
					setState(2382); match(TIES);
					}
				}

				}
			}

			setState(2387); select_list();
			setState(2390);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(2388); match(INTO);
				setState(2389); ((Query_specificationContext)_localctx).into_table = table_name();
				}
				break;
			}
			setState(2401);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				{
				setState(2392); match(FROM);
				setState(2393); table_source();
				setState(2398);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,347,_ctx);
				while ( _alt!=2 && _alt!=-1 ) {
					if ( _alt==1 ) {
						{
						{
						setState(2394); match(COMMA);
						setState(2395); table_source();
						}
						} 
					}
					setState(2400);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,347,_ctx);
				}
				}
				break;
			}
			setState(2405);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				setState(2403); match(WHERE);
				setState(2404); ((Query_specificationContext)_localctx).where = search_condition();
				}
				break;
			}
			setState(2417);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				{
				setState(2407); match(GROUP);
				setState(2408); match(BY);
				setState(2409); group_by_item();
				setState(2414);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,350,_ctx);
				while ( _alt!=2 && _alt!=-1 ) {
					if ( _alt==1 ) {
						{
						{
						setState(2410); match(COMMA);
						setState(2411); group_by_item();
						}
						} 
					}
					setState(2416);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,350,_ctx);
				}
				}
				break;
			}
			setState(2421);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				{
				setState(2419); match(HAVING);
				setState(2420); ((Query_specificationContext)_localctx).having = search_condition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(sybaseiqParser.NEXT, 0); }
		public TerminalNode FIRST() { return getToken(sybaseiqParser.FIRST, 0); }
		public List<Order_by_expressionContext> order_by_expression() {
			return getRuleContexts(Order_by_expressionContext.class);
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return getRuleContext(Order_by_expressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode FETCH() { return getToken(sybaseiqParser.FETCH, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode ROW(int i) {
			return getToken(sybaseiqParser.ROW, i);
		}
		public TerminalNode OFFSET() { return getToken(sybaseiqParser.OFFSET, 0); }
		public TerminalNode ORDER() { return getToken(sybaseiqParser.ORDER, 0); }
		public List<TerminalNode> ROW() { return getTokens(sybaseiqParser.ROW); }
		public List<TerminalNode> ROWS() { return getTokens(sybaseiqParser.ROWS); }
		public TerminalNode BY() { return getToken(sybaseiqParser.BY, 0); }
		public TerminalNode ONLY() { return getToken(sybaseiqParser.ONLY, 0); }
		public TerminalNode ROWS(int i) {
			return getToken(sybaseiqParser.ROWS, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2423); match(ORDER);
			setState(2424); match(BY);
			setState(2425); order_by_expression();
			setState(2430);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					setState(2426); match(COMMA);
					setState(2427); order_by_expression();
					}
					} 
				}
				setState(2432);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
			}
			setState(2444);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				setState(2433); match(OFFSET);
				setState(2434); expression(0);
				setState(2435);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2442);
				switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					setState(2436); match(FETCH);
					setState(2437);
					_la = _input.LA(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(2438); expression(0);
					setState(2439);
					_la = _input.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(2440); match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_clauseContext extends ParserRuleContext {
		public TerminalNode BROWSE() { return getToken(sybaseiqParser.BROWSE, 0); }
		public TerminalNode FOR() { return getToken(sybaseiqParser.FOR, 0); }
		public Xml_common_directivesContext xml_common_directives() {
			return getRuleContext(Xml_common_directivesContext.class,0);
		}
		public TerminalNode STRING() { return getToken(sybaseiqParser.STRING, 0); }
		public TerminalNode PATH() { return getToken(sybaseiqParser.PATH, 0); }
		public TerminalNode AUTO() { return getToken(sybaseiqParser.AUTO, 0); }
		public TerminalNode XML() { return getToken(sybaseiqParser.XML, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitFor_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_for_clause);
		try {
			setState(2465);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2446); match(FOR);
				setState(2447); match(BROWSE);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2448); match(FOR);
				setState(2449); match(XML);
				setState(2450); match(AUTO);
				setState(2452);
				switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
				case 1:
					{
					setState(2451); xml_common_directives();
					}
					break;
				}
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2454); match(FOR);
				setState(2455); match(XML);
				setState(2456); match(PATH);
				setState(2460);
				switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					setState(2457); match(LR_BRACKET);
					setState(2458); match(STRING);
					setState(2459); match(RR_BRACKET);
					}
					break;
				}
				setState(2463);
				switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
				case 1:
					{
					setState(2462); xml_common_directives();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_common_directivesContext extends ParserRuleContext {
		public TerminalNode ROOT() { return getToken(sybaseiqParser.ROOT, 0); }
		public TerminalNode BASE64() { return getToken(sybaseiqParser.BASE64, 0); }
		public TerminalNode BINARY() { return getToken(sybaseiqParser.BINARY, 0); }
		public TerminalNode TYPE() { return getToken(sybaseiqParser.TYPE, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_common_directives; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitXml_common_directives(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_common_directivesContext xml_common_directives() throws RecognitionException {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_xml_common_directives);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2467); match(COMMA);
			setState(2472);
			switch (_input.LA(1)) {
			case BINARY:
				{
				setState(2468); match(BINARY);
				setState(2469); match(BASE64);
				}
				break;
			case TYPE:
				{
				setState(2470); match(TYPE);
				}
				break;
			case ROOT:
				{
				setState(2471); match(ROOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_expressionContext extends ParserRuleContext {
		public TerminalNode DESC() { return getToken(sybaseiqParser.DESC, 0); }
		public TerminalNode ASC() { return getToken(sybaseiqParser.ASC, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_expression; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitOrder_by_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_expressionContext order_by_expression() throws RecognitionException {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_order_by_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2474); expression(0);
			setState(2476);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(2475);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_itemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitGroup_by_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_group_by_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2478); expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Option_clauseContext extends ParserRuleContext {
		public List<OptionContext> option() {
			return getRuleContexts(OptionContext.class);
		}
		public OptionContext option(int i) {
			return getRuleContext(OptionContext.class,i);
		}
		public TerminalNode OPTION() { return getToken(sybaseiqParser.OPTION, 0); }
		public Option_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitOption_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Option_clauseContext option_clause() throws RecognitionException {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_option_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2480); match(OPTION);
			setState(2481); match(LR_BRACKET);
			setState(2482); option();
			setState(2487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2483); match(COMMA);
				setState(2484); option();
				}
				}
				setState(2489);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2490); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionContext extends ParserRuleContext {
		public Token number_rows;
		public Optimize_for_argContext optimize_for_arg(int i) {
			return getRuleContext(Optimize_for_argContext.class,i);
		}
		public TerminalNode OPTIMIZE() { return getToken(sybaseiqParser.OPTIMIZE, 0); }
		public TerminalNode UNKNOWN() { return getToken(sybaseiqParser.UNKNOWN, 0); }
		public List<Optimize_for_argContext> optimize_for_arg() {
			return getRuleContexts(Optimize_for_argContext.class);
		}
		public TerminalNode UNION() { return getToken(sybaseiqParser.UNION, 0); }
		public TerminalNode ORDER() { return getToken(sybaseiqParser.ORDER, 0); }
		public TerminalNode CONCAT() { return getToken(sybaseiqParser.CONCAT, 0); }
		public TerminalNode FOR() { return getToken(sybaseiqParser.FOR, 0); }
		public TerminalNode PLAN() { return getToken(sybaseiqParser.PLAN, 0); }
		public TerminalNode FAST() { return getToken(sybaseiqParser.FAST, 0); }
		public TerminalNode HASH() { return getToken(sybaseiqParser.HASH, 0); }
		public TerminalNode KEEPFIXED() { return getToken(sybaseiqParser.KEEPFIXED, 0); }
		public TerminalNode DECIMAL() { return getToken(sybaseiqParser.DECIMAL, 0); }
		public TerminalNode MERGE() { return getToken(sybaseiqParser.MERGE, 0); }
		public TerminalNode GROUP() { return getToken(sybaseiqParser.GROUP, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionContext option() throws RecognitionException {
		OptionContext _localctx = new OptionContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_option);
		int _la;
		try {
			setState(2516);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2492); match(FAST);
				setState(2493); ((OptionContext)_localctx).number_rows = match(DECIMAL);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2494);
				_la = _input.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2495); match(GROUP);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2496);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2497); match(UNION);
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2498); match(KEEPFIXED);
				setState(2499); match(PLAN);
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2500); match(OPTIMIZE);
				setState(2501); match(FOR);
				setState(2502); match(LR_BRACKET);
				setState(2503); optimize_for_arg();
				setState(2508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2504); match(COMMA);
					setState(2505); optimize_for_arg();
					}
					}
					setState(2510);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2511); match(RR_BRACKET);
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2513); match(OPTIMIZE);
				setState(2514); match(FOR);
				setState(2515); match(UNKNOWN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Optimize_for_argContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(sybaseiqParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode UNKNOWN() { return getToken(sybaseiqParser.UNKNOWN, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimize_for_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitOptimize_for_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Optimize_for_argContext optimize_for_arg() throws RecognitionException {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_optimize_for_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2518); match(LOCAL_ID);
			setState(2522);
			switch (_input.LA(1)) {
			case UNKNOWN:
				{
				setState(2519); match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				setState(2520); match(EQUAL);
				setState(2521); constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public List<Select_list_elemContext> select_list_elem() {
			return getRuleContexts(Select_list_elemContext.class);
		}
		public Select_list_elemContext select_list_elem(int i) {
			return getRuleContext(Select_list_elemContext.class,i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSelect_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_select_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2524); select_list_elem();
			setState(2529);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,366,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					setState(2525); match(COMMA);
					setState(2526); select_list_elem();
					}
					} 
				}
				setState(2531);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,366,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elemContext extends ParserRuleContext {
		public Table_nameContext tablename;
		public Column_aliasContext columnalias;
		public ExpressionContext expr;
		public TerminalNode AS() { return getToken(sybaseiqParser.AS, 0); }
		public TerminalNode ROWGUID() { return getToken(sybaseiqParser.ROWGUID, 0); }
		public TerminalNode IDENTITY() { return getToken(sybaseiqParser.IDENTITY, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Cfl_statementContext cfl_statement() {
			return getRuleContext(Cfl_statementContext.class,0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSelect_list_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_elemContext select_list_elem() throws RecognitionException {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_select_list_elem);
		int _la;
		try {
			setState(2557);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2535);
				_la = _input.LA(1);
				if (_la==FORCESEEK || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ABSOLUTE - 300)) | (1L << (APPLY - 300)) | (1L << (AUTO - 300)) | (1L << (AVG - 300)) | (1L << (BASE64 - 300)) | (1L << (CALLER - 300)) | (1L << (CAST - 300)) | (1L << (CATCH - 300)) | (1L << (CHECKSUM_AGG - 300)) | (1L << (COMMITTED - 300)) | (1L << (CONCAT - 300)) | (1L << (COOKIE - 300)) | (1L << (COUNT - 300)) | (1L << (COUNT_BIG - 300)) | (1L << (DELAY - 300)) | (1L << (DELETED - 300)) | (1L << (DENSE_RANK - 300)) | (1L << (DISABLE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (FAST - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FIRST - 300)) | (1L << (FOLLOWING - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (FULLSCAN - 300)) | (1L << (GLOBAL - 300)) | (1L << (GO - 300)) | (1L << (GROUPING - 300)) | (1L << (GROUPING_ID - 300)) | (1L << (HASH - 300)) | (1L << (INSENSITIVE - 300)) | (1L << (INSERTED - 300)) | (1L << (ISOLATION - 300)) | (1L << (KEEPFIXED - 300)) | (1L << (KEYSET - 300)) | (1L << (LAST - 300)) | (1L << (LEVEL - 300)) | (1L << (LOCAL - 300)) | (1L << (LOCK_ESCALATION - 300)) | (1L << (LOGIN - 300)) | (1L << (LOOP - 300)) | (1L << (MARK - 300)) | (1L << (MAX - 300)) | (1L << (MIN - 300)) | (1L << (MODIFY - 300)) | (1L << (NEXT - 300)) | (1L << (NAME - 300)) | (1L << (NOCOUNT - 300)) | (1L << (NOEXPAND - 300)) | (1L << (NORECOMPUTE - 300)) | (1L << (NTILE - 300)) | (1L << (NUMBER - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (OFFSET - 364)) | (1L << (ONLY - 364)) | (1L << (OPTIMISTIC - 364)) | (1L << (OPTIMIZE - 364)) | (1L << (OUT - 364)) | (1L << (OUTPUT - 364)) | (1L << (OWNER - 364)) | (1L << (PARTITION - 364)) | (1L << (PATH - 364)) | (1L << (PRECEDING - 364)) | (1L << (PRIOR - 364)) | (1L << (RANGE - 364)) | (1L << (RANK - 364)) | (1L << (READONLY - 364)) | (1L << (READ_ONLY - 364)) | (1L << (RECOMPILE - 364)) | (1L << (RELATIVE - 364)) | (1L << (REMOTE - 364)) | (1L << (REPEATABLE - 364)) | (1L << (ROOT - 364)) | (1L << (ROW - 364)) | (1L << (ROWGUID - 364)) | (1L << (ROWS - 364)) | (1L << (ROW_NUMBER - 364)) | (1L << (SAMPLE - 364)) | (1L << (SCHEMABINDING - 364)) | (1L << (SCROLL - 364)) | (1L << (SCROLL_LOCKS - 364)) | (1L << (SELF - 364)) | (1L << (SERIALIZABLE - 364)) | (1L << (SNAPSHOT - 364)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 364)) | (1L << (STATIC - 364)) | (1L << (STATS_STREAM - 364)) | (1L << (STDEV - 364)) | (1L << (STDEVP - 364)) | (1L << (SUM - 364)) | (1L << (THROW - 364)) | (1L << (TIES - 364)) | (1L << (TIME - 364)) | (1L << (TRY - 364)) | (1L << (TYPE - 364)) | (1L << (TYPE_WARNING - 364)) | (1L << (UNBOUNDED - 364)) | (1L << (UNCOMMITTED - 364)) | (1L << (UNKNOWN - 364)) | (1L << (USING - 364)) | (1L << (VAR - 364)) | (1L << (VARP - 364)) | (1L << (VIEW_METADATA - 364)) | (1L << (WORK - 364)) | (1L << (XML - 364)) | (1L << (XMLNAMESPACES - 364)) | (1L << (DOUBLE_QUOTE_ID - 364)) | (1L << (SQUARE_BRACKET_ID - 364)) | (1L << (ID - 364)))) != 0)) {
					{
					setState(2532); ((Select_list_elemContext)_localctx).tablename = table_name();
					setState(2533); match(DOT);
					}
				}

				setState(2540);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(2537); match(STAR);
					}
					break;
				case DOLLAR:
					{
					setState(2538); match(DOLLAR);
					setState(2539);
					_la = _input.LA(1);
					if ( !(_la==IDENTITY || _la==ROWGUID) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2542); ((Select_list_elemContext)_localctx).columnalias = column_alias();
				setState(2543); match(EQUAL);
				setState(2544); ((Select_list_elemContext)_localctx).expr = expression(0);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2546); ((Select_list_elemContext)_localctx).expr = expression(0);
				setState(2551);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(2548);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(2547); match(AS);
						}
					}

					setState(2550); ((Select_list_elemContext)_localctx).columnalias = column_alias();
					}
					break;
				}
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2553); cfl_statement();
				setState(2555);
				switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					setState(2554); as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_clauseContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(sybaseiqParser.BY, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(sybaseiqParser.PARTITION, 0); }
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitPartition_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_partition_by_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2559); match(PARTITION);
			setState(2560); match(BY);
			setState(2561); expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourceContext extends ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return getRuleContext(Table_source_item_joinedContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitTable_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_sourceContext table_source() throws RecognitionException {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_table_source);
		try {
			setState(2572);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2563); table_source_item_joined();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2564); match(LR_BRACKET);
				setState(2565); table_source_item_joined();
				setState(2566); match(RR_BRACKET);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2568); match(LR_BRACKET);
				setState(2569); subquery();
				setState(2570); match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_item_joinedContext extends ParserRuleContext {
		public Join_partContext join_part(int i) {
			return getRuleContext(Join_partContext.class,i);
		}
		public Table_source_itemContext table_source_item() {
			return getRuleContext(Table_source_itemContext.class,0);
		}
		public List<Join_partContext> join_part() {
			return getRuleContexts(Join_partContext.class);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item_joined; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitTable_source_item_joined(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_source_item_joinedContext table_source_item_joined() throws RecognitionException {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_table_source_item_joined);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2574); table_source_item();
			setState(2578);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,374,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					setState(2575); join_part();
					}
					} 
				}
				setState(2580);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,374,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_itemContext extends ParserRuleContext {
		public Rowset_functionContext rowset_function() {
			return getRuleContext(Rowset_functionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(sybaseiqParser.LOCAL_ID, 0); }
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Change_tableContext change_table() {
			return getRuleContext(Change_tableContext.class,0);
		}
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public Table_source_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitTable_source_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_source_itemContext table_source_item() throws RecognitionException {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_table_source_item);
		try {
			setState(2616);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2581); table_name_with_hint();
				setState(2583);
				switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
				case 1:
					{
					setState(2582); as_table_alias();
					}
					break;
				}
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2585); rowset_function();
				setState(2587);
				switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					setState(2586); as_table_alias();
					}
					break;
				}
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2589); derived_table();
				setState(2594);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(2590); as_table_alias();
					setState(2592);
					switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
					case 1:
						{
						setState(2591); column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2596); change_table();
				setState(2597); as_table_alias();
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2599); function_call();
				setState(2601);
				switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
				case 1:
					{
					setState(2600); as_table_alias();
					}
					break;
				}
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2603); match(LOCAL_ID);
				setState(2605);
				switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					setState(2604); as_table_alias();
					}
					break;
				}
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2607); match(LOCAL_ID);
				setState(2608); match(DOT);
				setState(2609); function_call();
				setState(2614);
				switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
				case 1:
					{
					setState(2610); as_table_alias();
					setState(2612);
					switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
					case 1:
						{
						setState(2611); column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(sybaseiqParser.LOCAL_ID, 0); }
		public TerminalNode CHANGETABLE() { return getToken(sybaseiqParser.CHANGETABLE, 0); }
		public TerminalNode CHANGES() { return getToken(sybaseiqParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(sybaseiqParser.NULL, 0); }
		public TerminalNode DECIMAL() { return getToken(sybaseiqParser.DECIMAL, 0); }
		public Change_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_table; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitChange_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_tableContext change_table() throws RecognitionException {
		Change_tableContext _localctx = new Change_tableContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_change_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2618); match(CHANGETABLE);
			setState(2619); match(LR_BRACKET);
			setState(2620); match(CHANGES);
			setState(2621); table_name();
			setState(2622); match(COMMA);
			setState(2623);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2624); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_partContext extends ParserRuleContext {
		public Token join_type;
		public Token join_hint;
		public TerminalNode JOIN() { return getToken(sybaseiqParser.JOIN, 0); }
		public TerminalNode OUTER() { return getToken(sybaseiqParser.OUTER, 0); }
		public TerminalNode FULL() { return getToken(sybaseiqParser.FULL, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode LOOP() { return getToken(sybaseiqParser.LOOP, 0); }
		public TerminalNode LEFT() { return getToken(sybaseiqParser.LEFT, 0); }
		public TerminalNode APPLY() { return getToken(sybaseiqParser.APPLY, 0); }
		public TerminalNode REMOTE() { return getToken(sybaseiqParser.REMOTE, 0); }
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public TerminalNode CROSS() { return getToken(sybaseiqParser.CROSS, 0); }
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public TerminalNode INNER() { return getToken(sybaseiqParser.INNER, 0); }
		public TerminalNode HASH() { return getToken(sybaseiqParser.HASH, 0); }
		public TerminalNode RIGHT() { return getToken(sybaseiqParser.RIGHT, 0); }
		public TerminalNode MERGE() { return getToken(sybaseiqParser.MERGE, 0); }
		public Join_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_part; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitJoin_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_partContext join_part() throws RecognitionException {
		Join_partContext _localctx = new Join_partContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_join_part);
		int _la;
		try {
			setState(2652);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2633);
				switch (_input.LA(1)) {
				case INNER:
				case JOIN:
				case MERGE:
				case HASH:
				case LOOP:
				case REMOTE:
					{
					setState(2627);
					_la = _input.LA(1);
					if (_la==INNER) {
						{
						setState(2626); match(INNER);
						}
					}

					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					setState(2629);
					((Join_partContext)_localctx).join_type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						((Join_partContext)_localctx).join_type = (Token)_errHandler.recoverInline(this);
					}
					consume();
					setState(2631);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(2630); match(OUTER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2636);
				_la = _input.LA(1);
				if (_la==MERGE || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & ((1L << (HASH - 338)) | (1L << (LOOP - 338)) | (1L << (REMOTE - 338)))) != 0)) {
					{
					setState(2635);
					((Join_partContext)_localctx).join_hint = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==MERGE || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & ((1L << (HASH - 338)) | (1L << (LOOP - 338)) | (1L << (REMOTE - 338)))) != 0)) ) {
						((Join_partContext)_localctx).join_hint = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(2638); match(JOIN);
				setState(2639); table_source();
				setState(2640); match(ON);
				setState(2641); search_condition();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2643); match(CROSS);
				setState(2644); match(JOIN);
				setState(2645); table_source();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2646); match(CROSS);
				setState(2647); match(APPLY);
				setState(2648); table_source();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2649); match(OUTER);
				setState(2650); match(APPLY);
				setState(2651); table_source();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_name_with_hintContext extends ParserRuleContext {
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name_with_hint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitTable_name_with_hint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_name_with_hintContext table_name_with_hint() throws RecognitionException {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_table_name_with_hint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2654); table_name();
			setState(2656);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				setState(2655); with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_functionContext extends ParserRuleContext {
		public Token data_file;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode OPENROWSET() { return getToken(sybaseiqParser.OPENROWSET, 0); }
		public TerminalNode BULK() { return getToken(sybaseiqParser.BULK, 0); }
		public Bulk_optionContext bulk_option() {
			return getRuleContext(Bulk_optionContext.class,0);
		}
		public TerminalNode STRING() { return getToken(sybaseiqParser.STRING, 0); }
		public Rowset_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitRowset_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowset_functionContext rowset_function() throws RecognitionException {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_rowset_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2658); match(OPENROWSET);
			setState(2659); match(LR_BRACKET);
			setState(2660); match(BULK);
			setState(2661); ((Rowset_functionContext)_localctx).data_file = match(STRING);
			setState(2662); match(COMMA);
			setState(2672);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				setState(2663); bulk_option();
				setState(2668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2664); match(COMMA);
					setState(2665); bulk_option();
					}
					}
					setState(2670);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;

			case 2:
				{
				setState(2671); id();
				}
				break;
			}
			setState(2674); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bulk_optionContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(sybaseiqParser.STRING, 0); }
		public TerminalNode DECIMAL() { return getToken(sybaseiqParser.DECIMAL, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bulk_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitBulk_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bulk_optionContext bulk_option() throws RecognitionException {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_bulk_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2676); id();
			setState(2677); match(EQUAL);
			setState(2678);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_tableContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDerived_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_derived_table);
		try {
			setState(2686);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2680); subquery();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2681); match(LR_BRACKET);
				setState(2682); subquery();
				setState(2683); match(RR_BRACKET);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2685); table_value_constructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public ExpressionContext style;
		public Token seed;
		public Token increment;
		public TerminalNode TIMESTAMP() { return getToken(sybaseiqParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(sybaseiqParser.AS, 0); }
		public TerminalNode COALESCE() { return getToken(sybaseiqParser.COALESCE, 0); }
		public TerminalNode IDENTITY() { return getToken(sybaseiqParser.IDENTITY, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(sybaseiqParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode NULLIF() { return getToken(sybaseiqParser.NULLIF, 0); }
		public Replace_statementContext replace_statement() {
			return getRuleContext(Replace_statementContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode DATENAME() { return getToken(sybaseiqParser.DATENAME, 0); }
		public Scalar_function_nameContext scalar_function_name() {
			return getRuleContext(Scalar_function_nameContext.class,0);
		}
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(sybaseiqParser.MIN_ACTIVE_ROWVERSION, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(sybaseiqParser.SYSTEM_USER, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode CHECKSUM() { return getToken(sybaseiqParser.CHECKSUM, 0); }
		public TerminalNode DECIMAL(int i) {
			return getToken(sybaseiqParser.DECIMAL, i);
		}
		public TerminalNode BINARY_CHECKSUM() { return getToken(sybaseiqParser.BINARY_CHECKSUM, 0); }
		public TerminalNode CONVERT() { return getToken(sybaseiqParser.CONVERT, 0); }
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return getRuleContext(Ranking_windowed_functionContext.class,0);
		}
		public TerminalNode CAST() { return getToken(sybaseiqParser.CAST, 0); }
		public DatepartContext datepart() {
			return getRuleContext(DatepartContext.class,0);
		}
		public TerminalNode DATEADD() { return getToken(sybaseiqParser.DATEADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(sybaseiqParser.DATEDIFF, 0); }
		public TerminalNode CURRENT() { return getToken(sybaseiqParser.CURRENT, 0); }
		public Declare_typeContext declare_type() {
			return getRuleContext(Declare_typeContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode DATE() { return getToken(sybaseiqParser.DATE, 0); }
		public TerminalNode SESSION_USER() { return getToken(sybaseiqParser.SESSION_USER, 0); }
		public TerminalNode CURRENT_USER() { return getToken(sybaseiqParser.CURRENT_USER, 0); }
		public TerminalNode DATEPART() { return getToken(sybaseiqParser.DATEPART, 0); }
		public TerminalNode MOD() { return getToken(sybaseiqParser.MOD, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(sybaseiqParser.DECIMAL); }
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitFunction_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_function_call);
		int _la;
		try {
			setState(2797);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2688); ranking_windowed_function();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2689); aggregate_windowed_function();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2690); scalar_function_name();
				setState(2691); match(LR_BRACKET);
				setState(2693);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << COALESCE) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DEFAULT - 76)) | (1L << (FORCESEEK - 76)) | (1L << (IDENTITY - 76)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (LEFT - 152)) | (1L << (NULL - 152)) | (1L << (NULLIF - 152)) | (1L << (REPLACE - 152)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (RIGHT - 224)) | (1L << (SESSION_USER - 224)) | (1L << (SYSTEM_USER - 224)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ABSOLUTE - 300)) | (1L << (APPLY - 300)) | (1L << (AUTO - 300)) | (1L << (AVG - 300)) | (1L << (BASE64 - 300)) | (1L << (BINARY_CHECKSUM - 300)) | (1L << (CALLER - 300)) | (1L << (CAST - 300)) | (1L << (CATCH - 300)) | (1L << (CHECKSUM - 300)) | (1L << (CHECKSUM_AGG - 300)) | (1L << (COMMITTED - 300)) | (1L << (CONCAT - 300)) | (1L << (COOKIE - 300)) | (1L << (COUNT - 300)) | (1L << (COUNT_BIG - 300)) | (1L << (DATEADD - 300)) | (1L << (DATEDIFF - 300)) | (1L << (DATENAME - 300)) | (1L << (DATEPART - 300)) | (1L << (DELAY - 300)) | (1L << (DELETED - 300)) | (1L << (DENSE_RANK - 300)) | (1L << (DISABLE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (FAST - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FIRST - 300)) | (1L << (FOLLOWING - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (FULLSCAN - 300)) | (1L << (GLOBAL - 300)) | (1L << (GO - 300)) | (1L << (GROUPING - 300)) | (1L << (GROUPING_ID - 300)) | (1L << (HASH - 300)) | (1L << (INSENSITIVE - 300)) | (1L << (INSERTED - 300)) | (1L << (ISOLATION - 300)) | (1L << (KEEPFIXED - 300)) | (1L << (KEYSET - 300)) | (1L << (LAST - 300)) | (1L << (LEVEL - 300)) | (1L << (LOCAL - 300)) | (1L << (LOCK_ESCALATION - 300)) | (1L << (LOGIN - 300)) | (1L << (LOOP - 300)) | (1L << (MARK - 300)) | (1L << (MAX - 300)) | (1L << (MIN - 300)) | (1L << (MIN_ACTIVE_ROWVERSION - 300)) | (1L << (MOD - 300)) | (1L << (MODIFY - 300)) | (1L << (NEXT - 300)) | (1L << (NAME - 300)) | (1L << (NOCOUNT - 300)) | (1L << (NOEXPAND - 300)) | (1L << (NORECOMPUTE - 300)) | (1L << (NTILE - 300)) | (1L << (NUMBER - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (OFFSET - 364)) | (1L << (ONLY - 364)) | (1L << (OPTIMISTIC - 364)) | (1L << (OPTIMIZE - 364)) | (1L << (OUT - 364)) | (1L << (OUTPUT - 364)) | (1L << (OWNER - 364)) | (1L << (PARTITION - 364)) | (1L << (PATH - 364)) | (1L << (PRECEDING - 364)) | (1L << (PRIOR - 364)) | (1L << (RANGE - 364)) | (1L << (RANK - 364)) | (1L << (READONLY - 364)) | (1L << (READ_ONLY - 364)) | (1L << (RECOMPILE - 364)) | (1L << (RELATIVE - 364)) | (1L << (REMOTE - 364)) | (1L << (REPEATABLE - 364)) | (1L << (ROOT - 364)) | (1L << (ROW - 364)) | (1L << (ROWGUID - 364)) | (1L << (ROWS - 364)) | (1L << (ROW_NUMBER - 364)) | (1L << (SAMPLE - 364)) | (1L << (SCHEMABINDING - 364)) | (1L << (SCROLL - 364)) | (1L << (SCROLL_LOCKS - 364)) | (1L << (SELF - 364)) | (1L << (SERIALIZABLE - 364)) | (1L << (SNAPSHOT - 364)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 364)) | (1L << (STATIC - 364)) | (1L << (STATS_STREAM - 364)) | (1L << (STDEV - 364)) | (1L << (STDEVP - 364)) | (1L << (SUM - 364)) | (1L << (THROW - 364)) | (1L << (TIES - 364)) | (1L << (TIME - 364)) | (1L << (TRY - 364)) | (1L << (TYPE - 364)) | (1L << (TYPE_WARNING - 364)) | (1L << (UNBOUNDED - 364)) | (1L << (UNCOMMITTED - 364)) | (1L << (UNKNOWN - 364)) | (1L << (USING - 364)) | (1L << (VAR - 364)) | (1L << (VARP - 364)) | (1L << (VIEW_METADATA - 364)) | (1L << (WORK - 364)) | (1L << (XML - 364)) | (1L << (XMLNAMESPACES - 364)) | (1L << (DOUBLE_QUOTE_ID - 364)) | (1L << (SQUARE_BRACKET_ID - 364)) | (1L << (LOCAL_ID - 364)) | (1L << (DECIMAL - 364)) | (1L << (ID - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (STRING - 428)) | (1L << (BINARY - 428)) | (1L << (FLOAT - 428)) | (1L << (REAL - 428)) | (1L << (DOLLAR - 428)) | (1L << (LR_BRACKET - 428)) | (1L << (PLUS - 428)) | (1L << (MINUS - 428)) | (1L << (BIT_NOT - 428)))) != 0)) {
					{
					setState(2692); expression_list();
					}
				}

				setState(2695); match(RR_BRACKET);
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2697); match(BINARY_CHECKSUM);
				setState(2698); match(LR_BRACKET);
				setState(2699); match(STAR);
				setState(2700); match(RR_BRACKET);
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2701); match(CAST);
				setState(2702); match(LR_BRACKET);
				setState(2703); expression(0);
				setState(2704); match(AS);
				setState(2705); declare_type();
				setState(2706); match(RR_BRACKET);
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2708); match(CONVERT);
				setState(2709); match(LR_BRACKET);
				setState(2710); declare_type();
				setState(2711); match(COMMA);
				setState(2712); expression(0);
				setState(2715);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2713); match(COMMA);
					setState(2714); ((Function_callContext)_localctx).style = expression(0);
					}
				}

				setState(2717); match(RR_BRACKET);
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2719); match(CHECKSUM);
				setState(2720); match(LR_BRACKET);
				setState(2721); match(STAR);
				setState(2722); match(RR_BRACKET);
				}
				break;

			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2723); match(COALESCE);
				setState(2724); match(LR_BRACKET);
				setState(2725); expression_list();
				setState(2726); match(RR_BRACKET);
				}
				break;

			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2728); match(CURRENT_TIMESTAMP);
				}
				break;

			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2729); match(CURRENT_USER);
				}
				break;

			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2730); match(DATEADD);
				setState(2731); match(LR_BRACKET);
				setState(2732); datepart();
				setState(2733); match(COMMA);
				setState(2734); expression(0);
				setState(2735); match(COMMA);
				setState(2736); expression(0);
				setState(2737); match(RR_BRACKET);
				}
				break;

			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2739); match(DATEDIFF);
				setState(2740); match(LR_BRACKET);
				setState(2741); datepart();
				setState(2742); match(COMMA);
				setState(2743); expression(0);
				setState(2744); match(COMMA);
				setState(2745); expression(0);
				setState(2746); match(RR_BRACKET);
				}
				break;

			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2748); match(DATENAME);
				setState(2749); match(LR_BRACKET);
				setState(2750); datepart();
				setState(2751); match(COMMA);
				setState(2752); expression(0);
				setState(2753); match(RR_BRACKET);
				}
				break;

			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2755); match(DATEPART);
				setState(2756); match(LR_BRACKET);
				setState(2757); datepart();
				setState(2758); match(COMMA);
				setState(2759); expression(0);
				setState(2760); match(RR_BRACKET);
				}
				break;

			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2762); match(IDENTITY);
				setState(2763); match(LR_BRACKET);
				setState(2764); declare_type();
				setState(2767);
				switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
				case 1:
					{
					setState(2765); match(COMMA);
					setState(2766); ((Function_callContext)_localctx).seed = match(DECIMAL);
					}
					break;
				}
				setState(2771);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2769); match(COMMA);
					setState(2770); ((Function_callContext)_localctx).increment = match(DECIMAL);
					}
				}

				setState(2773); match(RR_BRACKET);
				}
				break;

			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2775); match(MIN_ACTIVE_ROWVERSION);
				}
				break;

			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2776); match(MOD);
				setState(2777); match(LR_BRACKET);
				setState(2778); expression(0);
				setState(2779); match(COMMA);
				setState(2780); expression(0);
				setState(2781); match(RR_BRACKET);
				}
				break;

			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2783); match(NULLIF);
				setState(2784); match(LR_BRACKET);
				setState(2785); expression(0);
				setState(2786); match(COMMA);
				setState(2787); expression(0);
				setState(2788); match(RR_BRACKET);
				}
				break;

			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2790); match(SESSION_USER);
				}
				break;

			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2791); match(SYSTEM_USER);
				}
				break;

			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2792); match(CURRENT);
				setState(2793); match(TIMESTAMP);
				}
				break;

			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2794); match(CURRENT);
				setState(2795); match(DATE);
				}
				break;

			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2796); replace_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatepartContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(sybaseiqParser.ID, 0); }
		public DatepartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datepart; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDatepart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatepartContext datepart() throws RecognitionException {
		DatepartContext _localctx = new DatepartContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_datepart);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2799); match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_table_aliasContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(sybaseiqParser.AS, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public As_table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_table_alias; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitAs_table_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_table_aliasContext as_table_alias() throws RecognitionException {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_as_table_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2802);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2801); match(AS);
				}
			}

			setState(2804); table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2806); id();
			setState(2808);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				setState(2807); with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_table_hintsContext extends ParserRuleContext {
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public TerminalNode WITH() { return getToken(sybaseiqParser.WITH, 0); }
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public With_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_table_hints; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitWith_table_hints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_table_hintsContext with_table_hints() throws RecognitionException {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2811);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2810); match(WITH);
				}
			}

			setState(2813); match(LR_BRACKET);
			setState(2814); table_hint();
			setState(2819);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2815); match(COMMA);
				setState(2816); table_hint();
				}
				}
				setState(2821);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2822); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_hintContext extends ParserRuleContext {
		public TerminalNode SERIALIZABLE() { return getToken(sybaseiqParser.SERIALIZABLE, 0); }
		public TerminalNode NOEXPAND() { return getToken(sybaseiqParser.NOEXPAND, 0); }
		public Index_column_nameContext index_column_name() {
			return getRuleContext(Index_column_nameContext.class,0);
		}
		public TerminalNode ID() { return getToken(sybaseiqParser.ID, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(sybaseiqParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode FORCESEEK() { return getToken(sybaseiqParser.FORCESEEK, 0); }
		public TerminalNode DECIMAL() { return getToken(sybaseiqParser.DECIMAL, 0); }
		public Index_valueContext index_value() {
			return getRuleContext(Index_valueContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(sybaseiqParser.INDEX, 0); }
		public TerminalNode SNAPSHOT() { return getToken(sybaseiqParser.SNAPSHOT, 0); }
		public Table_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_hint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitTable_hint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_hintContext table_hint() throws RecognitionException {
		Table_hintContext _localctx = new Table_hintContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_table_hint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2825);
			_la = _input.LA(1);
			if (_la==NOEXPAND) {
				{
				setState(2824); match(NOEXPAND);
				}
			}

			setState(2865);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(2827); match(INDEX);
				setState(2828); match(LR_BRACKET);
				setState(2829); index_value();
				setState(2834);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2830); match(COMMA);
					setState(2831); index_value();
					}
					}
					setState(2836);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2837); match(RR_BRACKET);
				}
				break;

			case 2:
				{
				setState(2839); match(INDEX);
				setState(2840); match(EQUAL);
				setState(2841); index_value();
				}
				break;

			case 3:
				{
				setState(2842); match(FORCESEEK);
				setState(2857);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2843); match(LR_BRACKET);
					setState(2844); index_value();
					setState(2845); match(LR_BRACKET);
					setState(2846); index_column_name();
					setState(2851);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2847); match(COMMA);
						setState(2848); index_column_name();
						}
						}
						setState(2853);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2854); match(RR_BRACKET);
					setState(2855); match(RR_BRACKET);
					}
				}

				}
				break;

			case 4:
				{
				setState(2859); match(SERIALIZABLE);
				}
				break;

			case 5:
				{
				setState(2860); match(SNAPSHOT);
				}
				break;

			case 6:
				{
				setState(2861); match(SPATIAL_WINDOW_MAX_CELLS);
				setState(2862); match(EQUAL);
				setState(2863); match(DECIMAL);
				}
				break;

			case 7:
				{
				setState(2864); match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_column_nameContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(sybaseiqParser.ID, 0); }
		public Index_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_column_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitIndex_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_column_nameContext index_column_name() throws RecognitionException {
		Index_column_nameContext _localctx = new Index_column_nameContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_index_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2867); match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_valueContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(sybaseiqParser.ID, 0); }
		public TerminalNode DECIMAL() { return getToken(sybaseiqParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_value; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitIndex_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_valueContext index_value() throws RecognitionException {
		Index_valueContext _localctx = new Index_valueContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_index_value);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2869);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_alias_listContext extends ParserRuleContext {
		public Column_aliasContext columnname;
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitColumn_alias_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_alias_listContext column_alias_list() throws RecognitionException {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_column_alias_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2871); match(LR_BRACKET);
			setState(2872); ((Column_alias_listContext)_localctx).columnname = column_alias();
			setState(2877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2873); match(COMMA);
				setState(2874); ((Column_alias_listContext)_localctx).columnname = column_alias();
				}
				}
				setState(2879);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2880); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(sybaseiqParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_column_alias);
		try {
			setState(2884);
			switch (_input.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2882); id();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(2883); match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructorContext extends ParserRuleContext {
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public TerminalNode VALUES() { return getToken(sybaseiqParser.VALUES, 0); }
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitTable_value_constructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_value_constructorContext table_value_constructor() throws RecognitionException {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_table_value_constructor);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2886); match(VALUES);
			setState(2887); match(LR_BRACKET);
			setState(2888); expression_list();
			setState(2889); match(RR_BRACKET);
			setState(2897);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,409,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					setState(2890); match(COMMA);
					setState(2891); match(LR_BRACKET);
					setState(2892); expression_list();
					setState(2893); match(RR_BRACKET);
					}
					} 
				}
				setState(2899);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,409,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2900); expression(0);
			setState(2905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2901); match(COMMA);
				setState(2902); expression(0);
				}
				}
				setState(2907);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_exprContext extends ParserRuleContext {
		public List<TerminalNode> THEN() { return getTokens(sybaseiqParser.THEN); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WHEN(int i) {
			return getToken(sybaseiqParser.WHEN, i);
		}
		public TerminalNode THEN(int i) {
			return getToken(sybaseiqParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(sybaseiqParser.ELSE, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public TerminalNode CASE() { return getToken(sybaseiqParser.CASE, 0); }
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public List<TerminalNode> WHEN() { return getTokens(sybaseiqParser.WHEN); }
		public TerminalNode END() { return getToken(sybaseiqParser.END, 0); }
		public Case_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitCase_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_exprContext case_expr() throws RecognitionException {
		Case_exprContext _localctx = new Case_exprContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_case_expr);
		int _la;
		try {
			setState(2941);
			switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2908); match(CASE);
				setState(2909); expression(0);
				setState(2915); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2910); match(WHEN);
					setState(2911); expression(0);
					setState(2912); match(THEN);
					setState(2913); expression(0);
					}
					}
					setState(2917); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(2921);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(2919); match(ELSE);
					setState(2920); expression(0);
					}
				}

				setState(2923); match(END);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2925); match(CASE);
				setState(2931); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2926); match(WHEN);
					setState(2927); search_condition();
					setState(2928); match(THEN);
					setState(2929); expression(0);
					}
					}
					setState(2933); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(2937);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(2935); match(ELSE);
					setState(2936); expression(0);
					}
				}

				setState(2939); match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ranking_windowed_functionContext extends ParserRuleContext {
		public TerminalNode DENSE_RANK() { return getToken(sybaseiqParser.DENSE_RANK, 0); }
		public TerminalNode RANK() { return getToken(sybaseiqParser.RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(sybaseiqParser.ROW_NUMBER, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NTILE() { return getToken(sybaseiqParser.NTILE, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ranking_windowed_function; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitRanking_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ranking_windowed_functionContext ranking_windowed_function() throws RecognitionException {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_ranking_windowed_function);
		try {
			setState(2961);
			switch (_input.LA(1)) {
			case RANK:
				enterOuterAlt(_localctx, 1);
				{
				setState(2943); match(RANK);
				setState(2944); match(LR_BRACKET);
				setState(2945); match(RR_BRACKET);
				setState(2946); over_clause();
				}
				break;
			case DENSE_RANK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2947); match(DENSE_RANK);
				setState(2948); match(LR_BRACKET);
				setState(2949); match(RR_BRACKET);
				setState(2950); over_clause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2951); match(NTILE);
				setState(2952); match(LR_BRACKET);
				setState(2953); expression(0);
				setState(2954); match(RR_BRACKET);
				setState(2955); over_clause();
				}
				break;
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 4);
				{
				setState(2957); match(ROW_NUMBER);
				setState(2958); match(LR_BRACKET);
				setState(2959); match(RR_BRACKET);
				setState(2960); over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_windowed_functionContext extends ParserRuleContext {
		public TerminalNode STDEVP() { return getToken(sybaseiqParser.STDEVP, 0); }
		public TerminalNode SUM() { return getToken(sybaseiqParser.SUM, 0); }
		public TerminalNode COUNT_BIG() { return getToken(sybaseiqParser.COUNT_BIG, 0); }
		public TerminalNode AVG() { return getToken(sybaseiqParser.AVG, 0); }
		public TerminalNode STDEV() { return getToken(sybaseiqParser.STDEV, 0); }
		public All_distinct_expressionContext all_distinct_expression() {
			return getRuleContext(All_distinct_expressionContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode MIN() { return getToken(sybaseiqParser.MIN, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(sybaseiqParser.CHECKSUM_AGG, 0); }
		public TerminalNode GROUPING() { return getToken(sybaseiqParser.GROUPING, 0); }
		public TerminalNode MAX() { return getToken(sybaseiqParser.MAX, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(sybaseiqParser.COUNT, 0); }
		public TerminalNode VARP() { return getToken(sybaseiqParser.VARP, 0); }
		public TerminalNode GROUPING_ID() { return getToken(sybaseiqParser.GROUPING_ID, 0); }
		public TerminalNode VAR() { return getToken(sybaseiqParser.VAR, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_windowed_function; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitAggregate_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_windowed_functionContext aggregate_windowed_function() throws RecognitionException {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_aggregate_windowed_function);
		try {
			setState(3054);
			switch (_input.LA(1)) {
			case AVG:
				enterOuterAlt(_localctx, 1);
				{
				setState(2963); match(AVG);
				setState(2964); match(LR_BRACKET);
				setState(2965); all_distinct_expression();
				setState(2966); match(RR_BRACKET);
				setState(2968);
				switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
				case 1:
					{
					setState(2967); over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				enterOuterAlt(_localctx, 2);
				{
				setState(2970); match(CHECKSUM_AGG);
				setState(2971); match(LR_BRACKET);
				setState(2972); all_distinct_expression();
				setState(2973); match(RR_BRACKET);
				}
				break;
			case GROUPING:
				enterOuterAlt(_localctx, 3);
				{
				setState(2975); match(GROUPING);
				setState(2976); match(LR_BRACKET);
				setState(2977); expression(0);
				setState(2978); match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				enterOuterAlt(_localctx, 4);
				{
				setState(2980); match(GROUPING_ID);
				setState(2981); match(LR_BRACKET);
				setState(2982); expression_list();
				setState(2983); match(RR_BRACKET);
				}
				break;
			case MAX:
				enterOuterAlt(_localctx, 5);
				{
				setState(2985); match(MAX);
				setState(2986); match(LR_BRACKET);
				setState(2987); all_distinct_expression();
				setState(2988); match(RR_BRACKET);
				setState(2990);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(2989); over_clause();
					}
					break;
				}
				}
				break;
			case MIN:
				enterOuterAlt(_localctx, 6);
				{
				setState(2992); match(MIN);
				setState(2993); match(LR_BRACKET);
				setState(2994); all_distinct_expression();
				setState(2995); match(RR_BRACKET);
				setState(2997);
				switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
				case 1:
					{
					setState(2996); over_clause();
					}
					break;
				}
				}
				break;
			case SUM:
				enterOuterAlt(_localctx, 7);
				{
				setState(2999); match(SUM);
				setState(3000); match(LR_BRACKET);
				setState(3001); all_distinct_expression();
				setState(3002); match(RR_BRACKET);
				setState(3004);
				switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
				case 1:
					{
					setState(3003); over_clause();
					}
					break;
				}
				}
				break;
			case STDEV:
				enterOuterAlt(_localctx, 8);
				{
				setState(3006); match(STDEV);
				setState(3007); match(LR_BRACKET);
				setState(3008); all_distinct_expression();
				setState(3009); match(RR_BRACKET);
				setState(3011);
				switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
				case 1:
					{
					setState(3010); over_clause();
					}
					break;
				}
				}
				break;
			case STDEVP:
				enterOuterAlt(_localctx, 9);
				{
				setState(3013); match(STDEVP);
				setState(3014); match(LR_BRACKET);
				setState(3015); all_distinct_expression();
				setState(3016); match(RR_BRACKET);
				setState(3018);
				switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
				case 1:
					{
					setState(3017); over_clause();
					}
					break;
				}
				}
				break;
			case VAR:
				enterOuterAlt(_localctx, 10);
				{
				setState(3020); match(VAR);
				setState(3021); match(LR_BRACKET);
				setState(3022); all_distinct_expression();
				setState(3023); match(RR_BRACKET);
				setState(3025);
				switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					setState(3024); over_clause();
					}
					break;
				}
				}
				break;
			case VARP:
				enterOuterAlt(_localctx, 11);
				{
				setState(3027); match(VARP);
				setState(3028); match(LR_BRACKET);
				setState(3029); all_distinct_expression();
				setState(3030); match(RR_BRACKET);
				setState(3032);
				switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
				case 1:
					{
					setState(3031); over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 12);
				{
				setState(3034); match(COUNT);
				setState(3035); match(LR_BRACKET);
				setState(3038);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(3036); match(STAR);
					}
					break;
				case ALL:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DISTINCT:
				case FORCESEEK:
				case IDENTITY:
				case LEFT:
				case NULL:
				case NULLIF:
				case REPLACE:
				case RIGHT:
				case SESSION_USER:
				case SYSTEM_USER:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MOD:
				case MODIFY:
				case NEXT:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(3037); all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3040); match(RR_BRACKET);
				setState(3042);
				switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					setState(3041); over_clause();
					}
					break;
				}
				}
				break;
			case COUNT_BIG:
				enterOuterAlt(_localctx, 13);
				{
				setState(3044); match(COUNT_BIG);
				setState(3045); match(LR_BRACKET);
				setState(3048);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(3046); match(STAR);
					}
					break;
				case ALL:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DISTINCT:
				case FORCESEEK:
				case IDENTITY:
				case LEFT:
				case NULL:
				case NULLIF:
				case REPLACE:
				case RIGHT:
				case SESSION_USER:
				case SYSTEM_USER:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MOD:
				case MODIFY:
				case NEXT:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(3047); all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3050); match(RR_BRACKET);
				setState(3052);
				switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					setState(3051); over_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_distinct_expressionContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(sybaseiqParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(sybaseiqParser.DISTINCT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_distinct_expression; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitAll_distinct_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_distinct_expressionContext all_distinct_expression() throws RecognitionException {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_all_distinct_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3057);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3056);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(3059); expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(sybaseiqParser.OVER, 0); }
		public Row_or_range_clauseContext row_or_range_clause() {
			return getRuleContext(Row_or_range_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3061); match(OVER);
			setState(3062); match(LR_BRACKET);
			setState(3064);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3063); partition_by_clause();
				}
			}

			setState(3067);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3066); order_by_clause();
				}
			}

			setState(3070);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(3069); row_or_range_clause();
				}
			}

			setState(3072); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_range_clauseContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(sybaseiqParser.RANGE, 0); }
		public TerminalNode ROWS() { return getToken(sybaseiqParser.ROWS, 0); }
		public Window_frame_extentContext window_frame_extent() {
			return getRuleContext(Window_frame_extentContext.class,0);
		}
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_range_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitRow_or_range_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_or_range_clauseContext row_or_range_clause() throws RecognitionException {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_row_or_range_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3074);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(3075); window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_extentContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(sybaseiqParser.BETWEEN, 0); }
		public Window_frame_boundContext window_frame_bound(int i) {
			return getRuleContext(Window_frame_boundContext.class,i);
		}
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public TerminalNode AND() { return getToken(sybaseiqParser.AND, 0); }
		public List<Window_frame_boundContext> window_frame_bound() {
			return getRuleContexts(Window_frame_boundContext.class);
		}
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_extent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitWindow_frame_extent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_extentContext window_frame_extent() throws RecognitionException {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_window_frame_extent);
		try {
			setState(3083);
			switch (_input.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3077); window_frame_preceding();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3078); match(BETWEEN);
				setState(3079); window_frame_bound();
				setState(3080); match(AND);
				setState(3081); window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_boundContext extends ParserRuleContext {
		public Window_frame_followingContext window_frame_following() {
			return getRuleContext(Window_frame_followingContext.class,0);
		}
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_bound; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitWindow_frame_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_boundContext window_frame_bound() throws RecognitionException {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_window_frame_bound);
		try {
			setState(3087);
			switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3085); window_frame_preceding();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3086); window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_precedingContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(sybaseiqParser.ROW, 0); }
		public TerminalNode UNBOUNDED() { return getToken(sybaseiqParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(sybaseiqParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(sybaseiqParser.CURRENT, 0); }
		public TerminalNode DECIMAL() { return getToken(sybaseiqParser.DECIMAL, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_preceding; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitWindow_frame_preceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_precedingContext window_frame_preceding() throws RecognitionException {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_window_frame_preceding);
		try {
			setState(3095);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3089); match(UNBOUNDED);
				setState(3090); match(PRECEDING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3091); match(DECIMAL);
				setState(3092); match(PRECEDING);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3093); match(CURRENT);
				setState(3094); match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_followingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(sybaseiqParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(sybaseiqParser.FOLLOWING, 0); }
		public TerminalNode DECIMAL() { return getToken(sybaseiqParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_following; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitWindow_frame_following(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_followingContext window_frame_following() throws RecognitionException {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_window_frame_following);
		try {
			setState(3101);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3097); match(UNBOUNDED);
				setState(3098); match(FOLLOWING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3099); match(DECIMAL);
				setState(3100); match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_table_nameContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_table_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitFull_table_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_table_nameContext full_table_name() throws RecognitionException {
		Full_table_nameContext _localctx = new Full_table_nameContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_full_table_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3120);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(3103); ((Full_table_nameContext)_localctx).server = id();
				setState(3104); match(DOT);
				setState(3105); ((Full_table_nameContext)_localctx).database = id();
				setState(3106); match(DOT);
				setState(3107); ((Full_table_nameContext)_localctx).schema = id();
				setState(3108); match(DOT);
				}
				break;

			case 2:
				{
				setState(3110); ((Full_table_nameContext)_localctx).database = id();
				setState(3111); match(DOT);
				setState(3113);
				_la = _input.LA(1);
				if (_la==FORCESEEK || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ABSOLUTE - 300)) | (1L << (APPLY - 300)) | (1L << (AUTO - 300)) | (1L << (AVG - 300)) | (1L << (BASE64 - 300)) | (1L << (CALLER - 300)) | (1L << (CAST - 300)) | (1L << (CATCH - 300)) | (1L << (CHECKSUM_AGG - 300)) | (1L << (COMMITTED - 300)) | (1L << (CONCAT - 300)) | (1L << (COOKIE - 300)) | (1L << (COUNT - 300)) | (1L << (COUNT_BIG - 300)) | (1L << (DELAY - 300)) | (1L << (DELETED - 300)) | (1L << (DENSE_RANK - 300)) | (1L << (DISABLE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (FAST - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FIRST - 300)) | (1L << (FOLLOWING - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (FULLSCAN - 300)) | (1L << (GLOBAL - 300)) | (1L << (GO - 300)) | (1L << (GROUPING - 300)) | (1L << (GROUPING_ID - 300)) | (1L << (HASH - 300)) | (1L << (INSENSITIVE - 300)) | (1L << (INSERTED - 300)) | (1L << (ISOLATION - 300)) | (1L << (KEEPFIXED - 300)) | (1L << (KEYSET - 300)) | (1L << (LAST - 300)) | (1L << (LEVEL - 300)) | (1L << (LOCAL - 300)) | (1L << (LOCK_ESCALATION - 300)) | (1L << (LOGIN - 300)) | (1L << (LOOP - 300)) | (1L << (MARK - 300)) | (1L << (MAX - 300)) | (1L << (MIN - 300)) | (1L << (MODIFY - 300)) | (1L << (NEXT - 300)) | (1L << (NAME - 300)) | (1L << (NOCOUNT - 300)) | (1L << (NOEXPAND - 300)) | (1L << (NORECOMPUTE - 300)) | (1L << (NTILE - 300)) | (1L << (NUMBER - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (OFFSET - 364)) | (1L << (ONLY - 364)) | (1L << (OPTIMISTIC - 364)) | (1L << (OPTIMIZE - 364)) | (1L << (OUT - 364)) | (1L << (OUTPUT - 364)) | (1L << (OWNER - 364)) | (1L << (PARTITION - 364)) | (1L << (PATH - 364)) | (1L << (PRECEDING - 364)) | (1L << (PRIOR - 364)) | (1L << (RANGE - 364)) | (1L << (RANK - 364)) | (1L << (READONLY - 364)) | (1L << (READ_ONLY - 364)) | (1L << (RECOMPILE - 364)) | (1L << (RELATIVE - 364)) | (1L << (REMOTE - 364)) | (1L << (REPEATABLE - 364)) | (1L << (ROOT - 364)) | (1L << (ROW - 364)) | (1L << (ROWGUID - 364)) | (1L << (ROWS - 364)) | (1L << (ROW_NUMBER - 364)) | (1L << (SAMPLE - 364)) | (1L << (SCHEMABINDING - 364)) | (1L << (SCROLL - 364)) | (1L << (SCROLL_LOCKS - 364)) | (1L << (SELF - 364)) | (1L << (SERIALIZABLE - 364)) | (1L << (SNAPSHOT - 364)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 364)) | (1L << (STATIC - 364)) | (1L << (STATS_STREAM - 364)) | (1L << (STDEV - 364)) | (1L << (STDEVP - 364)) | (1L << (SUM - 364)) | (1L << (THROW - 364)) | (1L << (TIES - 364)) | (1L << (TIME - 364)) | (1L << (TRY - 364)) | (1L << (TYPE - 364)) | (1L << (TYPE_WARNING - 364)) | (1L << (UNBOUNDED - 364)) | (1L << (UNCOMMITTED - 364)) | (1L << (UNKNOWN - 364)) | (1L << (USING - 364)) | (1L << (VAR - 364)) | (1L << (VARP - 364)) | (1L << (VIEW_METADATA - 364)) | (1L << (WORK - 364)) | (1L << (XML - 364)) | (1L << (XMLNAMESPACES - 364)) | (1L << (DOUBLE_QUOTE_ID - 364)) | (1L << (SQUARE_BRACKET_ID - 364)) | (1L << (ID - 364)))) != 0)) {
					{
					setState(3112); ((Full_table_nameContext)_localctx).schema = id();
					}
				}

				setState(3115); match(DOT);
				}
				break;

			case 3:
				{
				setState(3117); ((Full_table_nameContext)_localctx).schema = id();
				setState(3118); match(DOT);
				}
				break;
			}
			setState(3122); ((Full_table_nameContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitTable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_table_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3134);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(3124); ((Table_nameContext)_localctx).database = id();
				setState(3125); match(DOT);
				setState(3127);
				_la = _input.LA(1);
				if (_la==FORCESEEK || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ABSOLUTE - 300)) | (1L << (APPLY - 300)) | (1L << (AUTO - 300)) | (1L << (AVG - 300)) | (1L << (BASE64 - 300)) | (1L << (CALLER - 300)) | (1L << (CAST - 300)) | (1L << (CATCH - 300)) | (1L << (CHECKSUM_AGG - 300)) | (1L << (COMMITTED - 300)) | (1L << (CONCAT - 300)) | (1L << (COOKIE - 300)) | (1L << (COUNT - 300)) | (1L << (COUNT_BIG - 300)) | (1L << (DELAY - 300)) | (1L << (DELETED - 300)) | (1L << (DENSE_RANK - 300)) | (1L << (DISABLE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (FAST - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FIRST - 300)) | (1L << (FOLLOWING - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (FULLSCAN - 300)) | (1L << (GLOBAL - 300)) | (1L << (GO - 300)) | (1L << (GROUPING - 300)) | (1L << (GROUPING_ID - 300)) | (1L << (HASH - 300)) | (1L << (INSENSITIVE - 300)) | (1L << (INSERTED - 300)) | (1L << (ISOLATION - 300)) | (1L << (KEEPFIXED - 300)) | (1L << (KEYSET - 300)) | (1L << (LAST - 300)) | (1L << (LEVEL - 300)) | (1L << (LOCAL - 300)) | (1L << (LOCK_ESCALATION - 300)) | (1L << (LOGIN - 300)) | (1L << (LOOP - 300)) | (1L << (MARK - 300)) | (1L << (MAX - 300)) | (1L << (MIN - 300)) | (1L << (MODIFY - 300)) | (1L << (NEXT - 300)) | (1L << (NAME - 300)) | (1L << (NOCOUNT - 300)) | (1L << (NOEXPAND - 300)) | (1L << (NORECOMPUTE - 300)) | (1L << (NTILE - 300)) | (1L << (NUMBER - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (OFFSET - 364)) | (1L << (ONLY - 364)) | (1L << (OPTIMISTIC - 364)) | (1L << (OPTIMIZE - 364)) | (1L << (OUT - 364)) | (1L << (OUTPUT - 364)) | (1L << (OWNER - 364)) | (1L << (PARTITION - 364)) | (1L << (PATH - 364)) | (1L << (PRECEDING - 364)) | (1L << (PRIOR - 364)) | (1L << (RANGE - 364)) | (1L << (RANK - 364)) | (1L << (READONLY - 364)) | (1L << (READ_ONLY - 364)) | (1L << (RECOMPILE - 364)) | (1L << (RELATIVE - 364)) | (1L << (REMOTE - 364)) | (1L << (REPEATABLE - 364)) | (1L << (ROOT - 364)) | (1L << (ROW - 364)) | (1L << (ROWGUID - 364)) | (1L << (ROWS - 364)) | (1L << (ROW_NUMBER - 364)) | (1L << (SAMPLE - 364)) | (1L << (SCHEMABINDING - 364)) | (1L << (SCROLL - 364)) | (1L << (SCROLL_LOCKS - 364)) | (1L << (SELF - 364)) | (1L << (SERIALIZABLE - 364)) | (1L << (SNAPSHOT - 364)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 364)) | (1L << (STATIC - 364)) | (1L << (STATS_STREAM - 364)) | (1L << (STDEV - 364)) | (1L << (STDEVP - 364)) | (1L << (SUM - 364)) | (1L << (THROW - 364)) | (1L << (TIES - 364)) | (1L << (TIME - 364)) | (1L << (TRY - 364)) | (1L << (TYPE - 364)) | (1L << (TYPE_WARNING - 364)) | (1L << (UNBOUNDED - 364)) | (1L << (UNCOMMITTED - 364)) | (1L << (UNKNOWN - 364)) | (1L << (USING - 364)) | (1L << (VAR - 364)) | (1L << (VARP - 364)) | (1L << (VIEW_METADATA - 364)) | (1L << (WORK - 364)) | (1L << (XML - 364)) | (1L << (XMLNAMESPACES - 364)) | (1L << (DOUBLE_QUOTE_ID - 364)) | (1L << (SQUARE_BRACKET_ID - 364)) | (1L << (ID - 364)))) != 0)) {
					{
					setState(3126); ((Table_nameContext)_localctx).schema = id();
					}
				}

				setState(3129); match(DOT);
				}
				break;

			case 2:
				{
				setState(3131); ((Table_nameContext)_localctx).schema = id();
				setState(3132); match(DOT);
				}
				break;
			}
			setState(3136); ((Table_nameContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitProcedure_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_procedure_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3148);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				setState(3138); ((Procedure_nameContext)_localctx).database = id();
				setState(3139); match(DOT);
				setState(3141);
				_la = _input.LA(1);
				if (_la==FORCESEEK || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ABSOLUTE - 300)) | (1L << (APPLY - 300)) | (1L << (AUTO - 300)) | (1L << (AVG - 300)) | (1L << (BASE64 - 300)) | (1L << (CALLER - 300)) | (1L << (CAST - 300)) | (1L << (CATCH - 300)) | (1L << (CHECKSUM_AGG - 300)) | (1L << (COMMITTED - 300)) | (1L << (CONCAT - 300)) | (1L << (COOKIE - 300)) | (1L << (COUNT - 300)) | (1L << (COUNT_BIG - 300)) | (1L << (DELAY - 300)) | (1L << (DELETED - 300)) | (1L << (DENSE_RANK - 300)) | (1L << (DISABLE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (FAST - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FIRST - 300)) | (1L << (FOLLOWING - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (FULLSCAN - 300)) | (1L << (GLOBAL - 300)) | (1L << (GO - 300)) | (1L << (GROUPING - 300)) | (1L << (GROUPING_ID - 300)) | (1L << (HASH - 300)) | (1L << (INSENSITIVE - 300)) | (1L << (INSERTED - 300)) | (1L << (ISOLATION - 300)) | (1L << (KEEPFIXED - 300)) | (1L << (KEYSET - 300)) | (1L << (LAST - 300)) | (1L << (LEVEL - 300)) | (1L << (LOCAL - 300)) | (1L << (LOCK_ESCALATION - 300)) | (1L << (LOGIN - 300)) | (1L << (LOOP - 300)) | (1L << (MARK - 300)) | (1L << (MAX - 300)) | (1L << (MIN - 300)) | (1L << (MODIFY - 300)) | (1L << (NEXT - 300)) | (1L << (NAME - 300)) | (1L << (NOCOUNT - 300)) | (1L << (NOEXPAND - 300)) | (1L << (NORECOMPUTE - 300)) | (1L << (NTILE - 300)) | (1L << (NUMBER - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (OFFSET - 364)) | (1L << (ONLY - 364)) | (1L << (OPTIMISTIC - 364)) | (1L << (OPTIMIZE - 364)) | (1L << (OUT - 364)) | (1L << (OUTPUT - 364)) | (1L << (OWNER - 364)) | (1L << (PARTITION - 364)) | (1L << (PATH - 364)) | (1L << (PRECEDING - 364)) | (1L << (PRIOR - 364)) | (1L << (RANGE - 364)) | (1L << (RANK - 364)) | (1L << (READONLY - 364)) | (1L << (READ_ONLY - 364)) | (1L << (RECOMPILE - 364)) | (1L << (RELATIVE - 364)) | (1L << (REMOTE - 364)) | (1L << (REPEATABLE - 364)) | (1L << (ROOT - 364)) | (1L << (ROW - 364)) | (1L << (ROWGUID - 364)) | (1L << (ROWS - 364)) | (1L << (ROW_NUMBER - 364)) | (1L << (SAMPLE - 364)) | (1L << (SCHEMABINDING - 364)) | (1L << (SCROLL - 364)) | (1L << (SCROLL_LOCKS - 364)) | (1L << (SELF - 364)) | (1L << (SERIALIZABLE - 364)) | (1L << (SNAPSHOT - 364)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 364)) | (1L << (STATIC - 364)) | (1L << (STATS_STREAM - 364)) | (1L << (STDEV - 364)) | (1L << (STDEVP - 364)) | (1L << (SUM - 364)) | (1L << (THROW - 364)) | (1L << (TIES - 364)) | (1L << (TIME - 364)) | (1L << (TRY - 364)) | (1L << (TYPE - 364)) | (1L << (TYPE_WARNING - 364)) | (1L << (UNBOUNDED - 364)) | (1L << (UNCOMMITTED - 364)) | (1L << (UNKNOWN - 364)) | (1L << (USING - 364)) | (1L << (VAR - 364)) | (1L << (VARP - 364)) | (1L << (VIEW_METADATA - 364)) | (1L << (WORK - 364)) | (1L << (XML - 364)) | (1L << (XMLNAMESPACES - 364)) | (1L << (DOUBLE_QUOTE_ID - 364)) | (1L << (SQUARE_BRACKET_ID - 364)) | (1L << (ID - 364)))) != 0)) {
					{
					setState(3140); ((Procedure_nameContext)_localctx).schema = id();
					}
				}

				setState(3143); match(DOT);
				}
				break;

			case 2:
				{
				setState(3145); ((Procedure_nameContext)_localctx).schema = id();
				setState(3146); match(DOT);
				}
				break;
			}
			setState(3150); ((Procedure_nameContext)_localctx).procedure = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_nameContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext view;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitView_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_nameContext view_name() throws RecognitionException {
		View_nameContext _localctx = new View_nameContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_view_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3155);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				setState(3152); ((View_nameContext)_localctx).schema = id();
				setState(3153); match(DOT);
				}
				break;
			}
			setState(3157); ((View_nameContext)_localctx).view = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_nameContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Func_proc_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitFunc_proc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_proc_nameContext func_proc_name() throws RecognitionException {
		Func_proc_nameContext _localctx = new Func_proc_nameContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_func_proc_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3169);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				{
				setState(3159); ((Func_proc_nameContext)_localctx).database = id();
				setState(3160); match(DOT);
				setState(3162);
				_la = _input.LA(1);
				if (_la==FORCESEEK || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ABSOLUTE - 300)) | (1L << (APPLY - 300)) | (1L << (AUTO - 300)) | (1L << (AVG - 300)) | (1L << (BASE64 - 300)) | (1L << (CALLER - 300)) | (1L << (CAST - 300)) | (1L << (CATCH - 300)) | (1L << (CHECKSUM_AGG - 300)) | (1L << (COMMITTED - 300)) | (1L << (CONCAT - 300)) | (1L << (COOKIE - 300)) | (1L << (COUNT - 300)) | (1L << (COUNT_BIG - 300)) | (1L << (DELAY - 300)) | (1L << (DELETED - 300)) | (1L << (DENSE_RANK - 300)) | (1L << (DISABLE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (FAST - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FIRST - 300)) | (1L << (FOLLOWING - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (FULLSCAN - 300)) | (1L << (GLOBAL - 300)) | (1L << (GO - 300)) | (1L << (GROUPING - 300)) | (1L << (GROUPING_ID - 300)) | (1L << (HASH - 300)) | (1L << (INSENSITIVE - 300)) | (1L << (INSERTED - 300)) | (1L << (ISOLATION - 300)) | (1L << (KEEPFIXED - 300)) | (1L << (KEYSET - 300)) | (1L << (LAST - 300)) | (1L << (LEVEL - 300)) | (1L << (LOCAL - 300)) | (1L << (LOCK_ESCALATION - 300)) | (1L << (LOGIN - 300)) | (1L << (LOOP - 300)) | (1L << (MARK - 300)) | (1L << (MAX - 300)) | (1L << (MIN - 300)) | (1L << (MODIFY - 300)) | (1L << (NEXT - 300)) | (1L << (NAME - 300)) | (1L << (NOCOUNT - 300)) | (1L << (NOEXPAND - 300)) | (1L << (NORECOMPUTE - 300)) | (1L << (NTILE - 300)) | (1L << (NUMBER - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (OFFSET - 364)) | (1L << (ONLY - 364)) | (1L << (OPTIMISTIC - 364)) | (1L << (OPTIMIZE - 364)) | (1L << (OUT - 364)) | (1L << (OUTPUT - 364)) | (1L << (OWNER - 364)) | (1L << (PARTITION - 364)) | (1L << (PATH - 364)) | (1L << (PRECEDING - 364)) | (1L << (PRIOR - 364)) | (1L << (RANGE - 364)) | (1L << (RANK - 364)) | (1L << (READONLY - 364)) | (1L << (READ_ONLY - 364)) | (1L << (RECOMPILE - 364)) | (1L << (RELATIVE - 364)) | (1L << (REMOTE - 364)) | (1L << (REPEATABLE - 364)) | (1L << (ROOT - 364)) | (1L << (ROW - 364)) | (1L << (ROWGUID - 364)) | (1L << (ROWS - 364)) | (1L << (ROW_NUMBER - 364)) | (1L << (SAMPLE - 364)) | (1L << (SCHEMABINDING - 364)) | (1L << (SCROLL - 364)) | (1L << (SCROLL_LOCKS - 364)) | (1L << (SELF - 364)) | (1L << (SERIALIZABLE - 364)) | (1L << (SNAPSHOT - 364)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 364)) | (1L << (STATIC - 364)) | (1L << (STATS_STREAM - 364)) | (1L << (STDEV - 364)) | (1L << (STDEVP - 364)) | (1L << (SUM - 364)) | (1L << (THROW - 364)) | (1L << (TIES - 364)) | (1L << (TIME - 364)) | (1L << (TRY - 364)) | (1L << (TYPE - 364)) | (1L << (TYPE_WARNING - 364)) | (1L << (UNBOUNDED - 364)) | (1L << (UNCOMMITTED - 364)) | (1L << (UNKNOWN - 364)) | (1L << (USING - 364)) | (1L << (VAR - 364)) | (1L << (VARP - 364)) | (1L << (VIEW_METADATA - 364)) | (1L << (WORK - 364)) | (1L << (XML - 364)) | (1L << (XMLNAMESPACES - 364)) | (1L << (DOUBLE_QUOTE_ID - 364)) | (1L << (SQUARE_BRACKET_ID - 364)) | (1L << (ID - 364)))) != 0)) {
					{
					setState(3161); ((Func_proc_nameContext)_localctx).schema = id();
					}
				}

				setState(3164); match(DOT);
				}
				break;

			case 2:
				{
				{
				setState(3166); ((Func_proc_nameContext)_localctx).schema = id();
				}
				setState(3167); match(DOT);
				}
				break;
			}
			setState(3171); ((Func_proc_nameContext)_localctx).procedure = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_objectContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(sybaseiqParser.LOCAL_ID, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Ddl_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_object; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDdl_object(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_objectContext ddl_object() throws RecognitionException {
		Ddl_objectContext _localctx = new Ddl_objectContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_ddl_object);
		try {
			setState(3175);
			switch (_input.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3173); full_table_name();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3174); match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_nameContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Full_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitFull_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_column_nameContext full_column_name() throws RecognitionException {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_full_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3180);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(3177); table_name();
				setState(3178); match(DOT);
				}
				break;
			}
			setState(3182); column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitColumn_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_column_name_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3184); column_name();
			setState(3189);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,449,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					setState(3185); match(COMMA);
					setState(3186); column_name();
					}
					} 
				}
				setState(3191);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,449,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3192); id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(sybaseiqParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_cursor_name);
		try {
			setState(3196);
			switch (_input.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3194); id();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3195); match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_offContext extends ParserRuleContext {
		public TerminalNode OFF() { return getToken(sybaseiqParser.OFF, 0); }
		public TerminalNode ON() { return getToken(sybaseiqParser.ON, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_off; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitOn_off(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_offContext on_off() throws RecognitionException {
		On_offContext _localctx = new On_offContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_on_off);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3198);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusteredContext extends ParserRuleContext {
		public TerminalNode NONCLUSTERED() { return getToken(sybaseiqParser.NONCLUSTERED, 0); }
		public TerminalNode CLUSTERED() { return getToken(sybaseiqParser.CLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustered; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitClustered(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusteredContext clustered() throws RecognitionException {
		ClusteredContext _localctx = new ClusteredContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_clustered);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3200);
			_la = _input.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_notnullContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(sybaseiqParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(sybaseiqParser.NULL, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_notnull; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitNull_notnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_notnullContext null_notnull() throws RecognitionException {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_null_notnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3203);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3202); match(NOT);
				}
			}

			setState(3205); match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_function_nameContext extends ParserRuleContext {
		public TerminalNode CHECKSUM() { return getToken(sybaseiqParser.CHECKSUM, 0); }
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode BINARY_CHECKSUM() { return getToken(sybaseiqParser.BINARY_CHECKSUM, 0); }
		public TerminalNode LEFT() { return getToken(sybaseiqParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(sybaseiqParser.RIGHT, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_function_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitScalar_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scalar_function_nameContext scalar_function_name() throws RecognitionException {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_scalar_function_name);
		try {
			setState(3212);
			switch (_input.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3207); func_proc_name();
				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3208); match(RIGHT);
				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3209); match(LEFT);
				}
				break;
			case BINARY_CHECKSUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(3210); match(BINARY_CHECKSUM);
				}
				break;
			case CHECKSUM:
				enterOuterAlt(_localctx, 5);
				{
				setState(3211); match(CHECKSUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_valueContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode NULL() { return getToken(sybaseiqParser.NULL, 0); }
		public Default_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitDefault_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_valueContext default_value() throws RecognitionException {
		Default_valueContext _localctx = new Default_valueContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_default_value);
		try {
			setState(3216);
			switch (_input.LA(1)) {
			case NULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3214); match(NULL);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3215); constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode FLOAT() { return getToken(sybaseiqParser.FLOAT, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode REAL() { return getToken(sybaseiqParser.REAL, 0); }
		public TerminalNode BINARY() { return getToken(sybaseiqParser.BINARY, 0); }
		public TerminalNode STRING() { return getToken(sybaseiqParser.STRING, 0); }
		public TerminalNode DECIMAL() { return getToken(sybaseiqParser.DECIMAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_constant);
		int _la;
		try {
			setState(3230);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3218); match(STRING);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3219); match(BINARY);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3220); number();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3222);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(3221); sign();
					}
				}

				setState(3224);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3226);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(3225); sign();
					}
				}

				setState(3228); match(DOLLAR);
				setState(3229);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberContext extends ParserRuleContext {
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(sybaseiqParser.DECIMAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitNumber(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberContext number() throws RecognitionException {
		NumberContext _localctx = new NumberContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3233);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(3232); sign();
				}
			}

			setState(3235); match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(sybaseiqParser.MINUS, 0); }
		public TerminalNode PLUS() { return getToken(sybaseiqParser.PLUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3237);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(sybaseiqParser.DOUBLE_QUOTE_ID, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public TerminalNode SQUARE_BRACKET_ID() { return getToken(sybaseiqParser.SQUARE_BRACKET_ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_id);
		try {
			setState(3242);
			switch (_input.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3239); simple_id();
				}
				break;
			case DOUBLE_QUOTE_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3240); match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(3241); match(SQUARE_BRACKET_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_idContext extends ParserRuleContext {
		public TerminalNode SUM() { return getToken(sybaseiqParser.SUM, 0); }
		public TerminalNode COUNT_BIG() { return getToken(sybaseiqParser.COUNT_BIG, 0); }
		public TerminalNode ENCRYPTION() { return getToken(sybaseiqParser.ENCRYPTION, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(sybaseiqParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode MAX() { return getToken(sybaseiqParser.MAX, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(sybaseiqParser.CHECKSUM_AGG, 0); }
		public TerminalNode COUNT() { return getToken(sybaseiqParser.COUNT, 0); }
		public TerminalNode DELAY() { return getToken(sybaseiqParser.DELAY, 0); }
		public TerminalNode RECOMPILE() { return getToken(sybaseiqParser.RECOMPILE, 0); }
		public TerminalNode STATIC() { return getToken(sybaseiqParser.STATIC, 0); }
		public TerminalNode PARTITION() { return getToken(sybaseiqParser.PARTITION, 0); }
		public TerminalNode AUTO() { return getToken(sybaseiqParser.AUTO, 0); }
		public TerminalNode SAMPLE() { return getToken(sybaseiqParser.SAMPLE, 0); }
		public TerminalNode KEYSET() { return getToken(sybaseiqParser.KEYSET, 0); }
		public TerminalNode ID() { return getToken(sybaseiqParser.ID, 0); }
		public TerminalNode AVG() { return getToken(sybaseiqParser.AVG, 0); }
		public TerminalNode INSERTED() { return getToken(sybaseiqParser.INSERTED, 0); }
		public TerminalNode LAST() { return getToken(sybaseiqParser.LAST, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(sybaseiqParser.OPTIMISTIC, 0); }
		public TerminalNode ROWGUID() { return getToken(sybaseiqParser.ROWGUID, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(sybaseiqParser.XMLNAMESPACES, 0); }
		public TerminalNode ONLY() { return getToken(sybaseiqParser.ONLY, 0); }
		public TerminalNode FOLLOWING() { return getToken(sybaseiqParser.FOLLOWING, 0); }
		public TerminalNode DENSE_RANK() { return getToken(sybaseiqParser.DENSE_RANK, 0); }
		public TerminalNode CALLER() { return getToken(sybaseiqParser.CALLER, 0); }
		public TerminalNode PRECEDING() { return getToken(sybaseiqParser.PRECEDING, 0); }
		public TerminalNode ISOLATION() { return getToken(sybaseiqParser.ISOLATION, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(sybaseiqParser.SCROLL_LOCKS, 0); }
		public TerminalNode READ_ONLY() { return getToken(sybaseiqParser.READ_ONLY, 0); }
		public TerminalNode OFFSET() { return getToken(sybaseiqParser.OFFSET, 0); }
		public TerminalNode VARP() { return getToken(sybaseiqParser.VARP, 0); }
		public TerminalNode GROUPING_ID() { return getToken(sybaseiqParser.GROUPING_ID, 0); }
		public TerminalNode ABSOLUTE() { return getToken(sybaseiqParser.ABSOLUTE, 0); }
		public TerminalNode OUT() { return getToken(sybaseiqParser.OUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(sybaseiqParser.INSENSITIVE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(sybaseiqParser.SERIALIZABLE, 0); }
		public TerminalNode CATCH() { return getToken(sybaseiqParser.CATCH, 0); }
		public TerminalNode OPTIMIZE() { return getToken(sybaseiqParser.OPTIMIZE, 0); }
		public TerminalNode LOOP() { return getToken(sybaseiqParser.LOOP, 0); }
		public TerminalNode STDEV() { return getToken(sybaseiqParser.STDEV, 0); }
		public TerminalNode MODIFY() { return getToken(sybaseiqParser.MODIFY, 0); }
		public TerminalNode GROUPING() { return getToken(sybaseiqParser.GROUPING, 0); }
		public TerminalNode REMOTE() { return getToken(sybaseiqParser.REMOTE, 0); }
		public TerminalNode SCROLL() { return getToken(sybaseiqParser.SCROLL, 0); }
		public TerminalNode CONCAT() { return getToken(sybaseiqParser.CONCAT, 0); }
		public TerminalNode ROWS() { return getToken(sybaseiqParser.ROWS, 0); }
		public TerminalNode SELF() { return getToken(sybaseiqParser.SELF, 0); }
		public TerminalNode LOCAL() { return getToken(sybaseiqParser.LOCAL, 0); }
		public TerminalNode DELETED() { return getToken(sybaseiqParser.DELETED, 0); }
		public TerminalNode NEXT() { return getToken(sybaseiqParser.NEXT, 0); }
		public TerminalNode FIRST() { return getToken(sybaseiqParser.FIRST, 0); }
		public TerminalNode RANK() { return getToken(sybaseiqParser.RANK, 0); }
		public TerminalNode TIME() { return getToken(sybaseiqParser.TIME, 0); }
		public TerminalNode GO() { return getToken(sybaseiqParser.GO, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(sybaseiqParser.ROW_NUMBER, 0); }
		public TerminalNode BASE64() { return getToken(sybaseiqParser.BASE64, 0); }
		public TerminalNode COMMITTED() { return getToken(sybaseiqParser.COMMITTED, 0); }
		public TerminalNode ROW() { return getToken(sybaseiqParser.ROW, 0); }
		public TerminalNode NOEXPAND() { return getToken(sybaseiqParser.NOEXPAND, 0); }
		public TerminalNode VAR() { return getToken(sybaseiqParser.VAR, 0); }
		public TerminalNode NAME() { return getToken(sybaseiqParser.NAME, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(sybaseiqParser.LOCK_ESCALATION, 0); }
		public TerminalNode TYPE() { return getToken(sybaseiqParser.TYPE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(sybaseiqParser.SNAPSHOT, 0); }
		public TerminalNode ROOT() { return getToken(sybaseiqParser.ROOT, 0); }
		public TerminalNode PRIOR() { return getToken(sybaseiqParser.PRIOR, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(sybaseiqParser.SCHEMABINDING, 0); }
		public TerminalNode MIN() { return getToken(sybaseiqParser.MIN, 0); }
		public TerminalNode FULLSCAN() { return getToken(sybaseiqParser.FULLSCAN, 0); }
		public TerminalNode OWNER() { return getToken(sybaseiqParser.OWNER, 0); }
		public TerminalNode NOCOUNT() { return getToken(sybaseiqParser.NOCOUNT, 0); }
		public TerminalNode APPLY() { return getToken(sybaseiqParser.APPLY, 0); }
		public TerminalNode USING() { return getToken(sybaseiqParser.USING, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(sybaseiqParser.FAST_FORWARD, 0); }
		public TerminalNode HASH() { return getToken(sybaseiqParser.HASH, 0); }
		public TerminalNode DISABLE() { return getToken(sybaseiqParser.DISABLE, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(sybaseiqParser.TYPE_WARNING, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(sybaseiqParser.FORWARD_ONLY, 0); }
		public TerminalNode XML() { return getToken(sybaseiqParser.XML, 0); }
		public TerminalNode STDEVP() { return getToken(sybaseiqParser.STDEVP, 0); }
		public TerminalNode STATS_STREAM() { return getToken(sybaseiqParser.STATS_STREAM, 0); }
		public TerminalNode THROW() { return getToken(sybaseiqParser.THROW, 0); }
		public TerminalNode UNKNOWN() { return getToken(sybaseiqParser.UNKNOWN, 0); }
		public TerminalNode RELATIVE() { return getToken(sybaseiqParser.RELATIVE, 0); }
		public TerminalNode MARK() { return getToken(sybaseiqParser.MARK, 0); }
		public TerminalNode GLOBAL() { return getToken(sybaseiqParser.GLOBAL, 0); }
		public TerminalNode WORK() { return getToken(sybaseiqParser.WORK, 0); }
		public TerminalNode DYNAMIC() { return getToken(sybaseiqParser.DYNAMIC, 0); }
		public TerminalNode READONLY() { return getToken(sybaseiqParser.READONLY, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(sybaseiqParser.VIEW_METADATA, 0); }
		public TerminalNode NUMBER() { return getToken(sybaseiqParser.NUMBER, 0); }
		public TerminalNode KEEPFIXED() { return getToken(sybaseiqParser.KEEPFIXED, 0); }
		public TerminalNode CAST() { return getToken(sybaseiqParser.CAST, 0); }
		public TerminalNode RANGE() { return getToken(sybaseiqParser.RANGE, 0); }
		public TerminalNode LEVEL() { return getToken(sybaseiqParser.LEVEL, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(sybaseiqParser.UNCOMMITTED, 0); }
		public TerminalNode FORCESEEK() { return getToken(sybaseiqParser.FORCESEEK, 0); }
		public TerminalNode COOKIE() { return getToken(sybaseiqParser.COOKIE, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(sybaseiqParser.NORECOMPUTE, 0); }
		public TerminalNode REPEATABLE() { return getToken(sybaseiqParser.REPEATABLE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(sybaseiqParser.UNBOUNDED, 0); }
		public TerminalNode OUTPUT() { return getToken(sybaseiqParser.OUTPUT, 0); }
		public TerminalNode FAST() { return getToken(sybaseiqParser.FAST, 0); }
		public TerminalNode NTILE() { return getToken(sybaseiqParser.NTILE, 0); }
		public TerminalNode LOGIN() { return getToken(sybaseiqParser.LOGIN, 0); }
		public TerminalNode PATH() { return getToken(sybaseiqParser.PATH, 0); }
		public TerminalNode TIES() { return getToken(sybaseiqParser.TIES, 0); }
		public TerminalNode TRY() { return getToken(sybaseiqParser.TRY, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_id; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitSimple_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_idContext simple_id() throws RecognitionException {
		Simple_idContext _localctx = new Simple_idContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_simple_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3244);
			_la = _input.LA(1);
			if ( !(_la==FORCESEEK || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ABSOLUTE - 300)) | (1L << (APPLY - 300)) | (1L << (AUTO - 300)) | (1L << (AVG - 300)) | (1L << (BASE64 - 300)) | (1L << (CALLER - 300)) | (1L << (CAST - 300)) | (1L << (CATCH - 300)) | (1L << (CHECKSUM_AGG - 300)) | (1L << (COMMITTED - 300)) | (1L << (CONCAT - 300)) | (1L << (COOKIE - 300)) | (1L << (COUNT - 300)) | (1L << (COUNT_BIG - 300)) | (1L << (DELAY - 300)) | (1L << (DELETED - 300)) | (1L << (DENSE_RANK - 300)) | (1L << (DISABLE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (FAST - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FIRST - 300)) | (1L << (FOLLOWING - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (FULLSCAN - 300)) | (1L << (GLOBAL - 300)) | (1L << (GO - 300)) | (1L << (GROUPING - 300)) | (1L << (GROUPING_ID - 300)) | (1L << (HASH - 300)) | (1L << (INSENSITIVE - 300)) | (1L << (INSERTED - 300)) | (1L << (ISOLATION - 300)) | (1L << (KEEPFIXED - 300)) | (1L << (KEYSET - 300)) | (1L << (LAST - 300)) | (1L << (LEVEL - 300)) | (1L << (LOCAL - 300)) | (1L << (LOCK_ESCALATION - 300)) | (1L << (LOGIN - 300)) | (1L << (LOOP - 300)) | (1L << (MARK - 300)) | (1L << (MAX - 300)) | (1L << (MIN - 300)) | (1L << (MODIFY - 300)) | (1L << (NEXT - 300)) | (1L << (NAME - 300)) | (1L << (NOCOUNT - 300)) | (1L << (NOEXPAND - 300)) | (1L << (NORECOMPUTE - 300)) | (1L << (NTILE - 300)) | (1L << (NUMBER - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (OFFSET - 364)) | (1L << (ONLY - 364)) | (1L << (OPTIMISTIC - 364)) | (1L << (OPTIMIZE - 364)) | (1L << (OUT - 364)) | (1L << (OUTPUT - 364)) | (1L << (OWNER - 364)) | (1L << (PARTITION - 364)) | (1L << (PATH - 364)) | (1L << (PRECEDING - 364)) | (1L << (PRIOR - 364)) | (1L << (RANGE - 364)) | (1L << (RANK - 364)) | (1L << (READONLY - 364)) | (1L << (READ_ONLY - 364)) | (1L << (RECOMPILE - 364)) | (1L << (RELATIVE - 364)) | (1L << (REMOTE - 364)) | (1L << (REPEATABLE - 364)) | (1L << (ROOT - 364)) | (1L << (ROW - 364)) | (1L << (ROWGUID - 364)) | (1L << (ROWS - 364)) | (1L << (ROW_NUMBER - 364)) | (1L << (SAMPLE - 364)) | (1L << (SCHEMABINDING - 364)) | (1L << (SCROLL - 364)) | (1L << (SCROLL_LOCKS - 364)) | (1L << (SELF - 364)) | (1L << (SERIALIZABLE - 364)) | (1L << (SNAPSHOT - 364)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 364)) | (1L << (STATIC - 364)) | (1L << (STATS_STREAM - 364)) | (1L << (STDEV - 364)) | (1L << (STDEVP - 364)) | (1L << (SUM - 364)) | (1L << (THROW - 364)) | (1L << (TIES - 364)) | (1L << (TIME - 364)) | (1L << (TRY - 364)) | (1L << (TYPE - 364)) | (1L << (TYPE_WARNING - 364)) | (1L << (UNBOUNDED - 364)) | (1L << (UNCOMMITTED - 364)) | (1L << (UNKNOWN - 364)) | (1L << (USING - 364)) | (1L << (VAR - 364)) | (1L << (VARP - 364)) | (1L << (VIEW_METADATA - 364)) | (1L << (WORK - 364)) | (1L << (XML - 364)) | (1L << (XMLNAMESPACES - 364)) | (1L << (ID - 364)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_operatorContext extends ParserRuleContext {
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_operator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitComparison_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comparison_operatorContext comparison_operator() throws RecognitionException {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_comparison_operator);
		try {
			setState(3261);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3246); match(EQUAL);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3247); match(GREATER);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3248); match(LESS);
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3249); match(LESS);
				setState(3250); match(EQUAL);
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3251); match(GREATER);
				setState(3252); match(EQUAL);
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3253); match(LESS);
				setState(3254); match(GREATER);
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3255); match(EXCLAMATION);
				setState(3256); match(EQUAL);
				}
				break;

			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3257); match(EXCLAMATION);
				setState(3258); match(GREATER);
				}
				break;

			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3259); match(EXCLAMATION);
				setState(3260); match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_operatorContext extends ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_operator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof sybaseiqVisitor ) return ((sybaseiqVisitor<? extends T>)visitor).visitAssignment_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_operatorContext assignment_operator() throws RecognitionException {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_assignment_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3263);
			_la = _input.LA(1);
			if ( !(((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUS_ASSIGN - 436)) | (1L << (MINUS_ASSIGN - 436)) | (1L << (MULT_ASSIGN - 436)) | (1L << (DIV_ASSIGN - 436)) | (1L << (MOD_ASSIGN - 436)) | (1L << (AND_ASSIGN - 436)) | (1L << (XOR_ASSIGN - 436)) | (1L << (OR_ASSIGN - 436)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 75: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return 5 >= _localctx._p;

		case 1: return 4 >= _localctx._p;

		case 2: return 2 >= _localctx._p;

		case 3: return 11 >= _localctx._p;

		case 4: return 1 >= _localctx._p;
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\uacf5\uee8c\u4f5d\u8b0d\u4a45\u78bd\u1b2f\u3378\3\u01d0\u0cc4\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\3\2\7\2\u013c\n\2\f\2\16\2\u013f\13\2"+
		"\3\2\3\2\3\3\3\3\3\3\3\3\5\3\u0147\n\3\3\4\3\4\3\4\3\4\5\4\u014d\n\4\3"+
		"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u015c\n\5\3\6\3"+
		"\6\7\6\u0160\n\6\f\6\16\6\u0163\13\6\3\6\3\6\5\6\u0167\n\6\3\6\3\6\3\6"+
		"\3\6\7\6\u016d\n\6\f\6\16\6\u0170\13\6\3\6\3\6\3\6\3\6\5\6\u0176\n\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0183\n\6\3\6\3\6\7\6\u0187"+
		"\n\6\f\6\16\6\u018a\13\6\3\6\7\6\u018d\n\6\f\6\16\6\u0190\13\6\5\6\u0192"+
		"\n\6\5\6\u0194\n\6\3\6\3\6\3\6\5\6\u0199\n\6\3\6\5\6\u019c\n\6\3\6\3\6"+
		"\5\6\u01a0\n\6\3\6\5\6\u01a3\n\6\3\6\3\6\7\6\u01a7\n\6\f\6\16\6\u01aa"+
		"\13\6\3\6\3\6\3\6\3\6\3\6\3\6\7\6\u01b2\n\6\f\6\16\6\u01b5\13\6\6\6\u01b7"+
		"\n\6\r\6\16\6\u01b8\3\6\3\6\7\6\u01bd\n\6\f\6\16\6\u01c0\13\6\5\6\u01c2"+
		"\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u01cb\n\6\3\6\3\6\3\6\3\6\3\6\5\6"+
		"\u01d2\n\6\3\6\3\6\5\6\u01d6\n\6\5\6\u01d8\n\6\3\6\3\6\3\6\3\6\7\6\u01de"+
		"\n\6\f\6\16\6\u01e1\13\6\3\6\3\6\5\6\u01e5\n\6\3\6\3\6\5\6\u01e9\n\6\5"+
		"\6\u01eb\n\6\3\6\3\6\3\6\5\6\u01f0\n\6\3\6\3\6\3\6\5\6\u01f5\n\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\5\6\u01fd\n\6\3\6\3\6\3\6\5\6\u0202\n\6\3\6\3\6\3\6"+
		"\5\6\u0207\n\6\7\6\u0209\n\6\f\6\16\6\u020c\13\6\3\6\3\6\5\6\u0210\n\6"+
		"\3\6\3\6\5\6\u0214\n\6\3\6\3\6\5\6\u0218\n\6\3\6\3\6\3\6\5\6\u021d\n\6"+
		"\3\6\3\6\3\6\5\6\u0222\n\6\3\6\3\6\3\6\3\6\7\6\u0228\n\6\f\6\16\6\u022b"+
		"\13\6\3\6\5\6\u022e\n\6\5\6\u0230\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\5\7\u023f\n\7\3\b\5\b\u0242\n\b\3\b\3\b\3\b\3\b\3"+
		"\b\3\b\5\b\u024a\n\b\5\b\u024c\n\b\3\b\5\b\u024f\n\b\3\b\3\b\3\b\3\b\5"+
		"\b\u0255\n\b\3\b\5\b\u0258\n\b\3\b\3\b\3\b\3\b\7\b\u025e\n\b\f\b\16\b"+
		"\u0261\13\b\5\b\u0263\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u026a\n\b\3\b\3\b\5"+
		"\b\u026e\n\b\5\b\u0270\n\b\5\b\u0272\n\b\3\b\5\b\u0275\n\b\3\b\5\b\u0278"+
		"\n\b\3\b\5\b\u027b\n\b\3\t\5\t\u027e\n\t\3\t\3\t\5\t\u0282\n\t\3\t\3\t"+
		"\5\t\u0286\n\t\3\t\3\t\3\t\3\t\5\t\u028c\n\t\3\t\5\t\u028f\n\t\3\t\5\t"+
		"\u0292\n\t\3\t\3\t\5\t\u0296\n\t\3\t\5\t\u0299\n\t\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\7\t\u02a4\n\t\f\t\16\t\u02a7\13\t\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\5\t\u02af\n\t\3\t\5\t\u02b2\n\t\3\t\5\t\u02b5\n\t\3\t\5\t\u02b8\n"+
		"\t\3\t\5\t\u02bb\n\t\3\n\5\n\u02be\n\n\3\n\3\n\5\n\u02c2\n\n\3\n\5\n\u02c5"+
		"\n\n\3\n\5\n\u02c8\n\n\3\n\5\n\u02cb\n\n\3\13\5\13\u02ce\n\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\5\13\u02d6\n\13\5\13\u02d8\n\13\3\13\3\13\5\13\u02dc"+
		"\n\13\3\13\5\13\u02df\n\13\3\13\3\13\3\13\3\13\7\13\u02e5\n\13\f\13\16"+
		"\13\u02e8\13\13\3\13\5\13\u02eb\n\13\3\13\3\13\3\13\3\13\7\13\u02f1\n"+
		"\13\f\13\16\13\u02f4\13\13\5\13\u02f6\n\13\3\13\3\13\3\13\3\13\3\13\5"+
		"\13\u02fd\n\13\3\13\3\13\5\13\u0301\n\13\5\13\u0303\n\13\5\13\u0305\n"+
		"\13\3\13\5\13\u0308\n\13\3\13\5\13\u030b\n\13\3\13\5\13\u030e\n\13\3\f"+
		"\3\f\3\f\3\f\5\f\u0314\n\f\3\f\5\f\u0317\n\f\3\f\3\f\5\f\u031b\n\f\3\f"+
		"\3\f\3\f\5\f\u0320\n\f\3\f\3\f\3\f\5\f\u0325\n\f\3\f\3\f\3\f\5\f\u032a"+
		"\n\f\5\f\u032c\n\f\3\f\3\f\3\f\3\f\3\f\5\f\u0333\n\f\5\f\u0335\n\f\3\f"+
		"\3\f\5\f\u0339\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\16"+
		"\3\16\3\16\3\16\5\16\u034a\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\7\17\u0354\n\17\f\17\16\17\u0357\13\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\7\17\u0364\n\17\f\17\16\17\u0367\13\17\5\17"+
		"\u0369\n\17\3\17\3\17\3\17\3\17\5\17\u036f\n\17\3\20\3\20\3\20\3\20\3"+
		"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u037f\n\20\3\21"+
		"\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u038a\n\21\3\22\3\22\3\22"+
		"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u0399\n\22\5\22"+
		"\u039b\n\22\3\23\3\23\5\23\u039f\n\23\3\23\5\23\u03a2\n\23\3\23\3\23\3"+
		"\23\3\23\3\23\3\23\3\23\3\23\5\23\u03ac\n\23\3\24\3\24\3\25\3\25\3\25"+
		"\3\25\5\25\u03b4\n\25\3\25\3\25\3\25\5\25\u03b9\n\25\3\25\3\25\3\25\7"+
		"\25\u03be\n\25\f\25\16\25\u03c1\13\25\5\25\u03c3\n\25\3\25\5\25\u03c6"+
		"\n\25\3\25\3\25\3\25\3\25\3\25\5\25\u03cd\n\25\3\25\3\25\3\25\5\25\u03d2"+
		"\n\25\3\25\3\25\3\25\5\25\u03d7\n\25\3\26\3\26\3\26\3\26\3\27\3\27\3\27"+
		"\3\27\3\27\3\27\3\27\7\27\u03e4\n\27\f\27\16\27\u03e7\13\27\3\27\3\27"+
		"\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\5\30\u03f9\n\30\3\30\3\30\5\30\u03fd\n\30\3\30\3\30\5\30\u0401\n\30\5"+
		"\30\u0403\n\30\3\30\5\30\u0406\n\30\3\31\3\31\3\31\3\31\3\31\3\31\5\31"+
		"\u040e\n\31\3\31\7\31\u0411\n\31\f\31\16\31\u0414\13\31\3\31\5\31\u0417"+
		"\n\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u041f\n\31\3\31\5\31\u0422\n"+
		"\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u042b\n\32\f\32\16\32\u042e"+
		"\13\32\3\32\3\32\5\32\u0432\n\32\3\32\3\32\3\32\3\32\7\32\u0438\n\32\f"+
		"\32\16\32\u043b\13\32\5\32\u043d\n\32\3\32\3\32\3\32\3\32\3\32\5\32\u0444"+
		"\n\32\3\32\5\32\u0447\n\32\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\5\34\u0455\n\34\3\34\3\34\3\34\3\34\3\34\5\34\u045c\n"+
		"\34\5\34\u045e\n\34\3\35\3\35\3\35\3\35\3\35\7\35\u0465\n\35\f\35\16\35"+
		"\u0468\13\35\3\36\3\36\3\36\3\36\5\36\u046e\n\36\3\36\3\36\3\36\3\36\3"+
		"\36\3\36\3\36\3\36\5\36\u0478\n\36\3\36\5\36\u047b\n\36\3\37\3\37\3\37"+
		"\5\37\u0480\n\37\3 \3 \3 \3 \5 \u0486\n \3 \3 \5 \u048a\n \3!\3!\3!\3"+
		"!\5!\u0490\n!\3!\3!\5!\u0494\n!\3\"\3\"\3\"\3\"\3\"\5\"\u049b\n\"\3\""+
		"\3\"\3\"\3#\3#\3#\3#\5#\u04a4\n#\3#\3#\5#\u04a8\n#\3$\3$\3$\3$\5$\u04ae"+
		"\n$\3$\3$\3$\7$\u04b3\n$\f$\16$\u04b6\13$\3$\5$\u04b9\n$\3%\3%\3%\3%\5"+
		"%\u04bf\n%\3&\3&\5&\u04c3\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3"+
		"(\3(\3(\3(\5(\u04d4\n(\3(\3(\5(\u04d8\n(\3(\3(\3(\3)\3)\3)\5)\u04e0\n"+
		")\3)\3)\5)\u04e4\n)\3)\3)\5)\u04e8\n)\3)\5)\u04eb\n)\3*\3*\3*\3*\3*\3"+
		"*\3*\3*\3*\7*\u04f6\n*\f*\16*\u04f9\13*\3*\3*\3*\3*\3*\5*\u0500\n*\3*"+
		"\3*\5*\u0504\n*\3*\5*\u0507\n*\3+\3+\5+\u050b\n+\3+\3+\5+\u050f\n+\3+"+
		"\3+\5+\u0513\n+\3+\3+\5+\u0517\n+\3+\3+\3+\3+\5+\u051d\n+\3+\3+\5+\u0521"+
		"\n+\5+\u0523\n+\3,\3,\5,\u0527\n,\3,\3,\5,\u052b\n,\3,\3,\3,\3,\7,\u0531"+
		"\n,\f,\16,\u0534\13,\5,\u0536\n,\3,\5,\u0539\n,\3,\3,\5,\u053d\n,\3,\3"+
		",\3,\3,\7,\u0543\n,\f,\16,\u0546\13,\3,\3,\5,\u054a\n,\3,\3,\3,\5,\u054f"+
		"\n,\3,\5,\u0552\n,\5,\u0554\n,\3-\3-\5-\u0558\n-\3-\3-\3-\5-\u055d\n-"+
		"\3-\3-\5-\u0561\n-\3.\3.\3/\3/\3/\3/\5/\u0569\n/\3/\3/\3/\5/\u056e\n/"+
		"\3/\3/\3/\3/\3/\5/\u0575\n/\3/\5/\u0578\n/\3\60\3\60\3\60\3\60\3\60\5"+
		"\60\u057f\n\60\3\60\5\60\u0582\n\60\3\60\3\60\3\60\3\60\5\60\u0588\n\60"+
		"\3\60\3\60\3\60\5\60\u058d\n\60\5\60\u058f\n\60\3\60\5\60\u0592\n\60\3"+
		"\60\3\60\3\60\3\60\5\60\u0598\n\60\3\60\3\60\3\60\3\60\5\60\u059e\n\60"+
		"\5\60\u05a0\n\60\3\60\5\60\u05a3\n\60\3\60\3\60\5\60\u05a7\n\60\3\60\5"+
		"\60\u05aa\n\60\3\60\3\60\3\60\3\60\5\60\u05b0\n\60\3\60\5\60\u05b3\n\60"+
		"\3\60\3\60\5\60\u05b7\n\60\3\60\5\60\u05ba\n\60\3\60\3\60\3\60\3\60\5"+
		"\60\u05c0\n\60\3\60\5\60\u05c3\n\60\5\60\u05c5\n\60\3\61\3\61\5\61\u05c9"+
		"\n\61\3\62\3\62\3\62\5\62\u05ce\n\62\3\63\5\63\u05d1\n\63\3\63\3\63\3"+
		"\63\3\63\3\63\3\63\5\63\u05d9\n\63\3\63\3\63\3\63\3\63\3\63\5\63\u05e0"+
		"\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u05e9\n\63\3\63\3\63\3\63"+
		"\3\63\3\63\5\63\u05f0\n\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u05f8\n"+
		"\63\3\63\3\63\3\63\3\63\3\63\5\63\u05ff\n\63\3\63\3\63\3\63\3\63\3\63"+
		"\5\63\u0606\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u060f\n\63\3"+
		"\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0618\n\63\3\63\3\63\3\63\3\63"+
		"\3\63\5\63\u061f\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0637"+
		"\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0640\n\63\3\63\3\63\3\63"+
		"\3\63\3\63\3\63\3\63\5\63\u0649\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\5\63\u0652\n\63\3\63\3\63\3\63\3\63\3\63\5\63\u0659\n\63\3\63\3\63\3"+
		"\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0666\n\63\3\63\3\63"+
		"\3\63\3\63\3\63\5\63\u066d\n\63\3\64\3\64\3\65\3\65\5\65\u0673\n\65\3"+
		"\65\3\65\3\65\5\65\u0678\n\65\3\66\3\66\5\66\u067c\n\66\3\66\3\66\3\66"+
		"\5\66\u0681\n\66\3\66\7\66\u0684\n\66\f\66\16\66\u0687\13\66\3\66\3\66"+
		"\3\67\3\67\5\67\u068d\n\67\38\38\38\38\58\u0693\n8\38\58\u0696\n8\38\3"+
		"8\58\u069a\n8\38\38\38\58\u069f\n8\38\58\u06a2\n8\38\58\u06a5\n8\38\5"+
		"8\u06a8\n8\38\38\38\58\u06ad\n8\38\58\u06b0\n8\58\u06b2\n8\39\39\59\u06b6"+
		"\n9\39\39\39\39\39\39\59\u06be\n9\39\39\39\59\u06c3\n9\39\39\39\39\39"+
		"\39\39\39\39\39\39\39\39\59\u06d2\n9\3:\3:\5:\u06d6\n:\3:\3:\3:\5:\u06db"+
		"\n:\3:\5:\u06de\n:\3:\3:\3:\3:\5:\u06e4\n:\3:\3:\5:\u06e8\n:\3:\3:\3:"+
		"\3:\5:\u06ee\n:\3:\3:\3:\3:\5:\u06f4\n:\3;\3;\3;\3;\3;\7;\u06fb\n;\f;"+
		"\16;\u06fe\13;\3;\3;\3<\3<\3<\3<\7<\u0706\n<\f<\16<\u0709\13<\3<\3<\3"+
		"<\3=\3=\3=\3=\3=\3=\7=\u0714\n=\f=\16=\u0717\13=\5=\u0719\n=\3=\3=\3="+
		"\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>"+
		"\3>\3>\3>\3>\5>\u0739\n>\3>\3>\3>\5>\u073e\n>\3>\3>\5>\u0742\n>\3?\3?"+
		"\3?\7?\u0747\n?\f?\16?\u074a\13?\3@\3@\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3"+
		"B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\6B\u0767\nB\rB\16B\u0768\3"+
		"C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3D\3D\3D\3D\3D\3D\5D\u077c\nD\3E\3E\3"+
		"E\3E\5E\u0782\nE\3E\3E\5E\u0786\nE\3E\3E\3E\3E\3E\3E\3E\3E\5E\u0790\n"+
		"E\3E\3E\5E\u0794\nE\3E\5E\u0797\nE\3E\5E\u079a\nE\3E\3E\5E\u079e\nE\5"+
		"E\u07a0\nE\3E\5E\u07a3\nE\3F\3F\3F\3F\3F\3F\3F\3F\3F\5F\u07ae\nF\3G\3"+
		"G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\5G\u07c5\n"+
		"G\3H\3H\3H\3H\3H\5H\u07cc\nH\3I\3I\3I\3I\5I\u07d2\nI\3I\3I\3I\5I\u07d7"+
		"\nI\3I\5I\u07da\nI\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u07e5\nI\5I\u07e7\nI"+
		"\3I\5I\u07ea\nI\3I\3I\3I\3I\3I\3I\3I\3I\5I\u07f4\nI\5I\u07f6\nI\3I\5I"+
		"\u07f9\nI\5I\u07fb\nI\3J\5J\u07fe\nJ\3J\5J\u0801\nJ\3J\5J\u0804\nJ\3J"+
		"\5J\u0807\nJ\3J\5J\u080a\nJ\3J\3J\3J\3K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u0818"+
		"\nK\3K\5K\u081b\nK\3K\5K\u081e\nK\3K\3K\3K\3K\3K\7K\u0825\nK\fK\16K\u0828"+
		"\13K\5K\u082a\nK\3K\5K\u082d\nK\3L\3L\3L\3L\3L\3L\5L\u0835\nL\3L\5L\u0838"+
		"\nL\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u0846\nL\3L\5L\u0849\nL\3L"+
		"\3L\5L\u084d\nL\3L\5L\u0850\nL\3L\3L\3L\3L\3L\5L\u0857\nL\5L\u0859\nL"+
		"\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u086f"+
		"\nM\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\7M\u0882\nM\fM"+
		"\16M\u0885\13M\3N\3N\3N\3N\3N\3N\3N\3N\3N\5N\u0890\nN\3O\3O\3P\3P\3Q\3"+
		"Q\3Q\5Q\u0899\nQ\3Q\3Q\3Q\7Q\u089e\nQ\fQ\16Q\u08a1\13Q\3R\3R\3R\3R\3R"+
		"\5R\u08a8\nR\3R\3R\3R\3R\3R\3S\3S\5S\u08b1\nS\3S\3S\5S\u08b5\nS\3S\3S"+
		"\3S\3S\3S\3S\3S\3S\5S\u08bf\nS\3T\3T\7T\u08c3\nT\fT\16T\u08c6\13T\3U\3"+
		"U\5U\u08ca\nU\3V\3V\3V\7V\u08cf\nV\fV\16V\u08d2\13V\3W\3W\3W\7W\u08d7"+
		"\nW\fW\16W\u08da\13W\3X\3X\3X\7X\u08df\nX\fX\16X\u08e2\13X\3Y\5Y\u08e5"+
		"\nY\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u08fb"+
		"\nZ\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0904\nZ\3Z\3Z\3Z\3Z\5Z\u090a\nZ\3Z\3Z\3Z"+
		"\3Z\5Z\u0910\nZ\3Z\3Z\3Z\3Z\5Z\u0916\nZ\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z"+
		"\3Z\3Z\3Z\5Z\u0925\nZ\3[\3[\3[\3[\3[\5[\u092c\n[\3[\7[\u092f\n[\f[\16"+
		"[\u0932\13[\3\\\3\\\5\\\u0936\n\\\3\\\3\\\5\\\u093a\n\\\3\\\3\\\3\\\3"+
		"\\\3\\\6\\\u0941\n\\\r\\\16\\\u0942\5\\\u0945\n\\\3]\3]\5]\u0949\n]\3"+
		"]\3]\3]\5]\u094e\n]\3]\3]\5]\u0952\n]\5]\u0954\n]\3]\3]\3]\5]\u0959\n"+
		"]\3]\3]\3]\3]\7]\u095f\n]\f]\16]\u0962\13]\5]\u0964\n]\3]\3]\5]\u0968"+
		"\n]\3]\3]\3]\3]\3]\7]\u096f\n]\f]\16]\u0972\13]\5]\u0974\n]\3]\3]\5]\u0978"+
		"\n]\3^\3^\3^\3^\3^\7^\u097f\n^\f^\16^\u0982\13^\3^\3^\3^\3^\3^\3^\3^\3"+
		"^\3^\5^\u098d\n^\5^\u098f\n^\3_\3_\3_\3_\3_\3_\5_\u0997\n_\3_\3_\3_\3"+
		"_\3_\3_\5_\u099f\n_\3_\5_\u09a2\n_\5_\u09a4\n_\3`\3`\3`\3`\3`\5`\u09ab"+
		"\n`\3a\3a\5a\u09af\na\3b\3b\3c\3c\3c\3c\3c\7c\u09b8\nc\fc\16c\u09bb\13"+
		"c\3c\3c\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\7d\u09cd\nd\fd\16d\u09d0"+
		"\13d\3d\3d\3d\3d\3d\5d\u09d7\nd\3e\3e\3e\3e\5e\u09dd\ne\3f\3f\3f\7f\u09e2"+
		"\nf\ff\16f\u09e5\13f\3g\3g\3g\5g\u09ea\ng\3g\3g\3g\5g\u09ef\ng\3g\3g\3"+
		"g\3g\3g\3g\5g\u09f7\ng\3g\5g\u09fa\ng\3g\3g\5g\u09fe\ng\5g\u0a00\ng\3"+
		"h\3h\3h\3h\3i\3i\3i\3i\3i\3i\3i\3i\3i\5i\u0a0f\ni\3j\3j\7j\u0a13\nj\f"+
		"j\16j\u0a16\13j\3k\3k\5k\u0a1a\nk\3k\3k\5k\u0a1e\nk\3k\3k\3k\5k\u0a23"+
		"\nk\5k\u0a25\nk\3k\3k\3k\3k\3k\5k\u0a2c\nk\3k\3k\5k\u0a30\nk\3k\3k\3k"+
		"\3k\3k\5k\u0a37\nk\5k\u0a39\nk\5k\u0a3b\nk\3l\3l\3l\3l\3l\3l\3l\3l\3m"+
		"\5m\u0a46\nm\3m\3m\5m\u0a4a\nm\5m\u0a4c\nm\3m\5m\u0a4f\nm\3m\3m\3m\3m"+
		"\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\5m\u0a5f\nm\3n\3n\5n\u0a63\nn\3o\3o\3o"+
		"\3o\3o\3o\3o\3o\7o\u0a6d\no\fo\16o\u0a70\13o\3o\5o\u0a73\no\3o\3o\3p\3"+
		"p\3p\3p\3q\3q\3q\3q\3q\3q\5q\u0a81\nq\3r\3r\3r\3r\3r\5r\u0a88\nr\3r\3"+
		"r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\5r\u0a9e\nr\3"+
		"r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3"+
		"r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3"+
		"r\3r\3r\3r\5r\u0ad2\nr\3r\3r\5r\u0ad6\nr\3r\3r\3r\3r\3r\3r\3r\3r\3r\3"+
		"r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\5r\u0af0\nr\3s\3s\3t\5t\u0af5"+
		"\nt\3t\3t\3u\3u\5u\u0afb\nu\3v\5v\u0afe\nv\3v\3v\3v\3v\7v\u0b04\nv\fv"+
		"\16v\u0b07\13v\3v\3v\3w\5w\u0b0c\nw\3w\3w\3w\3w\3w\7w\u0b13\nw\fw\16w"+
		"\u0b16\13w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\7w\u0b24\nw\fw\16w\u0b27"+
		"\13w\3w\3w\3w\5w\u0b2c\nw\3w\3w\3w\3w\3w\3w\5w\u0b34\nw\3x\3x\3y\3y\3"+
		"z\3z\3z\3z\7z\u0b3e\nz\fz\16z\u0b41\13z\3z\3z\3{\3{\5{\u0b47\n{\3|\3|"+
		"\3|\3|\3|\3|\3|\3|\3|\7|\u0b52\n|\f|\16|\u0b55\13|\3}\3}\3}\7}\u0b5a\n"+
		"}\f}\16}\u0b5d\13}\3~\3~\3~\3~\3~\3~\3~\6~\u0b66\n~\r~\16~\u0b67\3~\3"+
		"~\5~\u0b6c\n~\3~\3~\3~\3~\3~\3~\3~\3~\6~\u0b76\n~\r~\16~\u0b77\3~\3~\5"+
		"~\u0b7c\n~\3~\3~\5~\u0b80\n~\3\177\3\177\3\177\3\177\3\177\3\177\3\177"+
		"\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\5\177"+
		"\u0b94\n\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0b9b\n\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\5\u0080\u0bb1\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\5\u0080\u0bb8\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\5\u0080\u0bbf\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080"+
		"\u0bc6\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0bcd\n"+
		"\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0bd4\n\u0080\3"+
		"\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0bdb\n\u0080\3\u0080\3"+
		"\u0080\3\u0080\3\u0080\5\u0080\u0be1\n\u0080\3\u0080\3\u0080\5\u0080\u0be5"+
		"\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0beb\n\u0080\3\u0080"+
		"\3\u0080\5\u0080\u0bef\n\u0080\5\u0080\u0bf1\n\u0080\3\u0081\5\u0081\u0bf4"+
		"\n\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\5\u0082\u0bfb\n\u0082"+
		"\3\u0082\5\u0082\u0bfe\n\u0082\3\u0082\5\u0082\u0c01\n\u0082\3\u0082\3"+
		"\u0082\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\5\u0084\u0c0e\n\u0084\3\u0085\3\u0085\5\u0085\u0c12\n\u0085\3"+
		"\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0c1a\n\u0086\3"+
		"\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0c20\n\u0087\3\u0088\3\u0088\3"+
		"\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088"+
		"\u0c2c\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0c33\n"+
		"\u0088\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\5\u0089\u0c3a\n\u0089\3"+
		"\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0c41\n\u0089\3\u0089\3"+
		"\u0089\3\u008a\3\u008a\3\u008a\5\u008a\u0c48\n\u008a\3\u008a\3\u008a\3"+
		"\u008a\3\u008a\3\u008a\5\u008a\u0c4f\n\u008a\3\u008a\3\u008a\3\u008b\3"+
		"\u008b\3\u008b\5\u008b\u0c56\n\u008b\3\u008b\3\u008b\3\u008c\3\u008c\3"+
		"\u008c\5\u008c\u0c5d\n\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\5"+
		"\u008c\u0c64\n\u008c\3\u008c\3\u008c\3\u008d\3\u008d\5\u008d\u0c6a\n\u008d"+
		"\3\u008e\3\u008e\3\u008e\5\u008e\u0c6f\n\u008e\3\u008e\3\u008e\3\u008f"+
		"\3\u008f\3\u008f\7\u008f\u0c76\n\u008f\f\u008f\16\u008f\u0c79\13\u008f"+
		"\3\u0090\3\u0090\3\u0091\3\u0091\5\u0091\u0c7f\n\u0091\3\u0092\3\u0092"+
		"\3\u0093\3\u0093\3\u0094\5\u0094\u0c86\n\u0094\3\u0094\3\u0094\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0c8f\n\u0095\3\u0096\3\u0096"+
		"\5\u0096\u0c93\n\u0096\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0c99\n"+
		"\u0097\3\u0097\3\u0097\5\u0097\u0c9d\n\u0097\3\u0097\3\u0097\5\u0097\u0ca1"+
		"\n\u0097\3\u0098\5\u0098\u0ca4\n\u0098\3\u0098\3\u0098\3\u0099\3\u0099"+
		"\3\u009a\3\u009a\3\u009a\5\u009a\u0cad\n\u009a\3\u009b\3\u009b\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0cc0\n\u009c\3\u009d"+
		"\3\u009d\3\u009d\2\u009e\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&("+
		"*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
		"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
		"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
		"\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc"+
		"\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4"+
		"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc"+
		"\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114"+
		"\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c"+
		"\u012e\u0130\u0132\u0134\u0136\u0138\2\63\4\2\u0142\u0142\u0195\u0195"+
		"\4\2\u01ab\u01ac\u01ae\u01ae\5\2\f\f\u00b5\u00b5\u00b7\u00b7\7\2nn\u0081"+
		"\u0081\u00fb\u00fb\u0103\u0103\u01a2\u01a2\4\2\u00b5\u00b5\u00b7\u00b7"+
		"\b\2((CCYY\177\u0080\u009b\u009b\u0195\u0195\4\2OO\u0094\u0094\5\2\u0089"+
		"\u0089\u008b\u008b\u0172\u0172\4\2\u00c7\u00c7\u0184\u0184\5\2\u0148\u0148"+
		"\u0187\u0187\u01a0\u01a0\5\2\u0100\u0100\u0130\u0130\u0145\u0145\4\2P"+
		"P\u00cb\u00cb\3\2ef\4\2\u011c\u011c\u015e\u015e\3\2\u0172\u0173\4\2\u01ab"+
		"\u01ab\u01ae\u01ae\3\2\u0109\u010a\5\2\22\23\u008f\u0090\u00f5\u00f6\4"+
		"\2\u0102\u0102\u0150\u0150\5\2PP\u00dc\u00dc\u0119\u0119\t\2MMPPff\u008e"+
		"\u008e\u00d7\u00d7\u00ec\u00ec\u0119\u0119\6\2\3\3\u008a\u008a\u00fd\u00fd"+
		"\u0125\u0125\4\2bb\u00fe\u00fe\4\2\u0150\u0150\u015c\u015c\4\2\u014e\u014e"+
		"\u0188\u0188\6\2\u0146\u0146\u014a\u014a\u0159\u0159\u018e\u018e\5\2\u0170"+
		"\u0170\u017c\u017c\u0189\u0189\3\2\u01cb\u01cc\3\2\u01c8\u01ca\4\2\u01cb"+
		"\u01cc\u01ce\u01d0\5\2\5\5\b\b\u00fa\u00fa\4\2\5\5UU\4\2\u0182\u0182\u0184"+
		"\u0184\4\2\u014c\u014c\u0167\u0167\4\2\13\13SS\4\2\u00bf\u00bf\u0154\u0154"+
		"\5\2\u00a2\u00a2\u013a\u013a\u0154\u0154\4\2\u0082\u0082\u0183\u0183\4"+
		"\2\u00b1\u00b1\u01ab\u01ac\5\2ww\u009a\u009a\u00e2\u00e2\6\2\u00a2\u00a2"+
		"\u0154\u0154\u015f\u015f\u017f\u017f\4\2\u01ac\u01ac\u01ae\u01ae\3\2\u01ac"+
		"\u01ad\4\2\u0179\u0179\u0184\u0184\4\2\'\'\u00ab\u00ab\3\2\u01b0\u01b1"+
		"\4\2\u01ac\u01ac\u01b0\u01b0\r\2qq\u012e\u0132\u0134\u0136\u0138\u013d"+
		"\u0142\u0146\u0148\u014a\u014c\u015f\u0161\u0163\u0166\u0195\u0197\u01a3"+
		"\u01ad\u01ad\3\2\u01b6\u01bd\u0eef\2\u013d\3\2\2\2\4\u0146\3\2\2\2\6\u014c"+
		"\3\2\2\2\b\u015b\3\2\2\2\n\u022f\3\2\2\2\f\u023e\3\2\2\2\16\u0241\3\2"+
		"\2\2\20\u027d\3\2\2\2\22\u02bd\3\2\2\2\24\u02cd\3\2\2\2\26\u030f\3\2\2"+
		"\2\30\u0341\3\2\2\2\32\u0349\3\2\2\2\34\u036e\3\2\2\2\36\u037e\3\2\2\2"+
		" \u0389\3\2\2\2\"\u039a\3\2\2\2$\u039c\3\2\2\2&\u03ad\3\2\2\2(\u03af\3"+
		"\2\2\2*\u03d8\3\2\2\2,\u03dc\3\2\2\2.\u03ea\3\2\2\2\60\u0407\3\2\2\2\62"+
		"\u0423\3\2\2\2\64\u0448\3\2\2\2\66\u045d\3\2\2\28\u045f\3\2\2\2:\u0469"+
		"\3\2\2\2<\u047c\3\2\2\2>\u0481\3\2\2\2@\u048b\3\2\2\2B\u0495\3\2\2\2D"+
		"\u049f\3\2\2\2F\u04a9\3\2\2\2H\u04ba\3\2\2\2J\u04c2\3\2\2\2L\u04c4\3\2"+
		"\2\2N\u04cb\3\2\2\2P\u04dc\3\2\2\2R\u04ec\3\2\2\2T\u0522\3\2\2\2V\u0553"+
		"\3\2\2\2X\u0557\3\2\2\2Z\u0562\3\2\2\2\\\u0577\3\2\2\2^\u05c4\3\2\2\2"+
		"`\u05c6\3\2\2\2b\u05ca\3\2\2\2d\u066c\3\2\2\2f\u066e\3\2\2\2h\u0670\3"+
		"\2\2\2j\u0679\3\2\2\2l\u068c\3\2\2\2n\u068e\3\2\2\2p\u06b5\3\2\2\2r\u06d5"+
		"\3\2\2\2t\u06f5\3\2\2\2v\u0701\3\2\2\2x\u070d\3\2\2\2z\u0741\3\2\2\2|"+
		"\u0743\3\2\2\2~\u074b\3\2\2\2\u0080\u074d\3\2\2\2\u0082\u0757\3\2\2\2"+
		"\u0084\u076a\3\2\2\2\u0086\u0775\3\2\2\2\u0088\u077d\3\2\2\2\u008a\u07a4"+
		"\3\2\2\2\u008c\u07c4\3\2\2\2\u008e\u07c6\3\2\2\2\u0090\u07fa\3\2\2\2\u0092"+
		"\u07fd\3\2\2\2\u0094\u080e\3\2\2\2\u0096\u0858\3\2\2\2\u0098\u086e\3\2"+
		"\2\2\u009a\u088f\3\2\2\2\u009c\u0891\3\2\2\2\u009e\u0893\3\2\2\2\u00a0"+
		"\u0895\3\2\2\2\u00a2\u08a2\3\2\2\2\u00a4\u08be\3\2\2\2\u00a6\u08c0\3\2"+
		"\2\2\u00a8\u08c9\3\2\2\2\u00aa\u08cb\3\2\2\2\u00ac\u08d3\3\2\2\2\u00ae"+
		"\u08db\3\2\2\2\u00b0\u08e4\3\2\2\2\u00b2\u0924\3\2\2\2\u00b4\u092b\3\2"+
		"\2\2\u00b6\u0939\3\2\2\2\u00b8\u0946\3\2\2\2\u00ba\u0979\3\2\2\2\u00bc"+
		"\u09a3\3\2\2\2\u00be\u09a5\3\2\2\2\u00c0\u09ac\3\2\2\2\u00c2\u09b0\3\2"+
		"\2\2\u00c4\u09b2\3\2\2\2\u00c6\u09d6\3\2\2\2\u00c8\u09d8\3\2\2\2\u00ca"+
		"\u09de\3\2\2\2\u00cc\u09ff\3\2\2\2\u00ce\u0a01\3\2\2\2\u00d0\u0a0e\3\2"+
		"\2\2\u00d2\u0a10\3\2\2\2\u00d4\u0a3a\3\2\2\2\u00d6\u0a3c\3\2\2\2\u00d8"+
		"\u0a5e\3\2\2\2\u00da\u0a60\3\2\2\2\u00dc\u0a64\3\2\2\2\u00de\u0a76\3\2"+
		"\2\2\u00e0\u0a80\3\2\2\2\u00e2\u0aef\3\2\2\2\u00e4\u0af1\3\2\2\2\u00e6"+
		"\u0af4\3\2\2\2\u00e8\u0af8\3\2\2\2\u00ea\u0afd\3\2\2\2\u00ec\u0b0b\3\2"+
		"\2\2\u00ee\u0b35\3\2\2\2\u00f0\u0b37\3\2\2\2\u00f2\u0b39\3\2\2\2\u00f4"+
		"\u0b46\3\2\2\2\u00f6\u0b48\3\2\2\2\u00f8\u0b56\3\2\2\2\u00fa\u0b7f\3\2"+
		"\2\2\u00fc\u0b93\3\2\2\2\u00fe\u0bf0\3\2\2\2\u0100\u0bf3\3\2\2\2\u0102"+
		"\u0bf7\3\2\2\2\u0104\u0c04\3\2\2\2\u0106\u0c0d\3\2\2\2\u0108\u0c11\3\2"+
		"\2\2\u010a\u0c19\3\2\2\2\u010c\u0c1f\3\2\2\2\u010e\u0c32\3\2\2\2\u0110"+
		"\u0c40\3\2\2\2\u0112\u0c4e\3\2\2\2\u0114\u0c55\3\2\2\2\u0116\u0c63\3\2"+
		"\2\2\u0118\u0c69\3\2\2\2\u011a\u0c6e\3\2\2\2\u011c\u0c72\3\2\2\2\u011e"+
		"\u0c7a\3\2\2\2\u0120\u0c7e\3\2\2\2\u0122\u0c80\3\2\2\2\u0124\u0c82\3\2"+
		"\2\2\u0126\u0c85\3\2\2\2\u0128\u0c8e\3\2\2\2\u012a\u0c92\3\2\2\2\u012c"+
		"\u0ca0\3\2\2\2\u012e\u0ca3\3\2\2\2\u0130\u0ca7\3\2\2\2\u0132\u0cac\3\2"+
		"\2\2\u0134\u0cae\3\2\2\2\u0136\u0cbf\3\2\2\2\u0138\u0cc1\3\2\2\2\u013a"+
		"\u013c\5\4\3\2\u013b\u013a\3\2\2\2\u013c\u013f\3\2\2\2\u013d\u013b\3\2"+
		"\2\2\u013d\u013e\3\2\2\2\u013e\u0140\3\2\2\2\u013f\u013d\3\2\2\2\u0140"+
		"\u0141\7\2\2\3\u0141\3\3\2\2\2\u0142\u0147\5\6\4\2\u0143\u0147\5\b\5\2"+
		"\u0144\u0147\5\n\6\2\u0145\u0147\5\f\7\2\u0146\u0142\3\2\2\2\u0146\u0143"+
		"\3\2\2\2\u0146\u0144\3\2\2\2\u0146\u0145\3\2\2\2\u0147\5\3\2\2\2\u0148"+
		"\u014d\5\16\b\2\u0149\u014d\5\20\t\2\u014a\u014d\5\22\n\2\u014b\u014d"+
		"\5\24\13\2\u014c\u0148\3\2\2\2\u014c\u0149\3\2\2\2\u014c\u014a\3\2\2\2"+
		"\u014c\u014b\3\2\2\2\u014d\7\3\2\2\2\u014e\u015c\5$\23\2\u014f\u015c\5"+
		"(\25\2\u0150\u015c\5.\30\2\u0151\u015c\5\60\31\2\u0152\u015c\5\62\32\2"+
		"\u0153\u015c\5\66\34\2\u0154\u015c\5:\36\2\u0155\u015c\5> \2\u0156\u015c"+
		"\5@!\2\u0157\u015c\5B\"\2\u0158\u015c\5D#\2\u0159\u015c\5F$\2\u015a\u015c"+
		"\5H%\2\u015b\u014e\3\2\2\2\u015b\u014f\3\2\2\2\u015b\u0150\3\2\2\2\u015b"+
		"\u0151\3\2\2\2\u015b\u0152\3\2\2\2\u015b\u0153\3\2\2\2\u015b\u0154\3\2"+
		"\2\2\u015b\u0155\3\2\2\2\u015b\u0156\3\2\2\2\u015b\u0157\3\2\2\2\u015b"+
		"\u0158\3\2\2\2\u015b\u0159\3\2\2\2\u015b\u015a\3\2\2\2\u015c\t\3\2\2\2"+
		"\u015d\u0161\7\20\2\2\u015e\u0160\5\4\3\2\u015f\u015e\3\2\2\2\u0160\u0163"+
		"\3\2\2\2\u0161\u015f\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0164\3\2\2\2\u0163"+
		"\u0161\3\2\2\2\u0164\u0166\7^\2\2\u0165\u0167\7\u01c6\2\2\u0166\u0165"+
		"\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u0230\3\2\2\2\u0168\u0169\7\20\2\2"+
		"\u0169\u016a\7\u00c5\2\2\u016a\u016e\7\u0095\2\2\u016b\u016d\5$\23\2\u016c"+
		"\u016b\3\2\2\2\u016d\u0170\3\2\2\2\u016e\u016c\3\2\2\2\u016e\u016f\3\2"+
		"\2\2\u016f\u0171\3\2\2\2\u0170\u016e\3\2\2\2\u0171\u0172\7^\2\2\u0172"+
		"\u0173\7\u00c5\2\2\u0173\u0175\7\u0095\2\2\u0174\u0176\7\u01c6\2\2\u0175"+
		"\u0174\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0230\3\2\2\2\u0177\u0178\7d"+
		"\2\2\u0178\u0230\5v<\2\u0179\u017a\7\u0085\2\2\u017a\u017b\5\u00acW\2"+
		"\u017b\u017c\7\u0105\2\2\u017c\u0182\5\u00a6T\2\u017d\u017e\7\\\2\2\u017e"+
		"\u017f\5\u00acW\2\u017f\u0180\7\u0105\2\2\u0180\u0181\5\u00a6T\2\u0181"+
		"\u0183\3\2\2\2\u0182\u017d\3\2\2\2\u0182\u0183\3\2\2\2\u0183\u0193\3\2"+
		"\2\2\u0184\u0191\7[\2\2\u0185\u0187\5\4\3\2\u0186\u0185\3\2\2\2\u0187"+
		"\u018a\3\2\2\2\u0188\u0186\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u0192\3\2"+
		"\2\2\u018a\u0188\3\2\2\2\u018b\u018d\5\u0098M\2\u018c\u018b\3\2\2\2\u018d"+
		"\u0190\3\2\2\2\u018e\u018c\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u0192\3\2"+
		"\2\2\u0190\u018e\3\2\2\2\u0191\u0188\3\2\2\2\u0191\u018e\3\2\2\2\u0192"+
		"\u0194\3\2\2\2\u0193\u0184\3\2\2\2\u0193\u0194\3\2\2\2\u0194\u0198\3\2"+
		"\2\2\u0195\u0196\7^\2\2\u0196\u0199\7\u0085\2\2\u0197\u0199\7_\2\2\u0198"+
		"\u0195\3\2\2\2\u0198\u0197\3\2\2\2\u0199\u019b\3\2\2\2\u019a\u019c\7\u01c6"+
		"\2\2\u019b\u019a\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u0230\3\2\2\2\u019d"+
		"\u019f\7\u00df\2\2\u019e\u01a0\5\u0098M\2\u019f\u019e\3\2\2\2\u019f\u01a0"+
		"\3\2\2\2\u01a0\u01a2\3\2\2\2\u01a1\u01a3\7\u01c6\2\2\u01a2\u01a1\3\2\2"+
		"\2\u01a2\u01a3\3\2\2\2\u01a3\u0230\3\2\2\2\u01a4\u01a8\7\u0197\2\2\u01a5"+
		"\u01a7\5\4\3\2\u01a6\u01a5\3\2\2\2\u01a7\u01aa\3\2\2\2\u01a8\u01a6\3\2"+
		"\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01b6\3\2\2\2\u01aa\u01a8\3\2\2\2\u01ab"+
		"\u01ac\7\u0136\2\2\u01ac\u01ad\7\u01c3\2\2\u01ad\u01ae\5\u0098M\2\u01ae"+
		"\u01af\5\u0098M\2\u01af\u01b3\7\u01c4\2\2\u01b0\u01b2\5\4\3\2\u01b1\u01b0"+
		"\3\2\2\2\u01b2\u01b5\3\2\2\2\u01b3\u01b1\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4"+
		"\u01b7\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b6\u01ab\3\2\2\2\u01b7\u01b8\3\2"+
		"\2\2\u01b8\u01b6\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01c1\3\2\2\2\u01ba"+
		"\u01be\7\u014b\2\2\u01bb\u01bd\5\4\3\2\u01bc\u01bb\3\2\2\2\u01bd\u01c0"+
		"\3\2\2\2\u01be\u01bc\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c2\3\2\2\2\u01c0"+
		"\u01be\3\2\2\2\u01c1\u01ba\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01c3\3\2"+
		"\2\2\u01c3\u01c4\7^\2\2\u01c4\u01c5\7\u0197\2\2\u01c5\u0230\3\2\2\2\u01c6"+
		"\u01c7\7\u0124\2\2\u01c7\u01c8\t\2\2\2\u01c8\u01ca\5\u0098M\2\u01c9\u01cb"+
		"\7\u01c6\2\2\u01ca\u01c9\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\u0230\3\2\2"+
		"\2\u01cc\u01cd\7\u0128\2\2\u01cd\u01d7\5\u00acW\2\u01ce\u01d8\5\4\3\2"+
		"\u01cf\u01d1\7\27\2\2\u01d0\u01d2\7\u01c6\2\2\u01d1\u01d0\3\2\2\2\u01d1"+
		"\u01d2\3\2\2\2\u01d2\u01d8\3\2\2\2\u01d3\u01d5\7\64\2\2\u01d4\u01d6\7"+
		"\u01c6\2\2\u01d5\u01d4\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d8\3\2\2\2"+
		"\u01d7\u01ce\3\2\2\2\u01d7\u01cf\3\2\2\2\u01d7\u01d3\3\2\2\2\u01d8\u0230"+
		"\3\2\2\2\u01d9\u01da\7\u0128\2\2\u01da\u01db\5\u00acW\2\u01db\u01ea\7"+
		"\u015f\2\2\u01dc\u01de\5\4\3\2\u01dd\u01dc\3\2\2\2\u01de\u01e1\3\2\2\2"+
		"\u01df\u01dd\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01eb\3\2\2\2\u01e1\u01df"+
		"\3\2\2\2\u01e2\u01e4\7\27\2\2\u01e3\u01e5\7\u01c6\2\2\u01e4\u01e3\3\2"+
		"\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01eb\3\2\2\2\u01e6\u01e8\7\64\2\2\u01e7"+
		"\u01e9\7\u01c6\2\2\u01e8\u01e7\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01eb"+
		"\3\2\2\2\u01ea\u01df\3\2\2\2\u01ea\u01e2\3\2\2\2\u01ea\u01e6\3\2\2\2\u01eb"+
		"\u01ec\3\2\2\2\u01ec\u01ed\7^\2\2\u01ed\u01ef\7\u015f\2\2\u01ee\u01f0"+
		"\7\u01c6\2\2\u01ef\u01ee\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u0230\3\2\2"+
		"\2\u01f1\u01f2\7\u00cd\2\2\u01f2\u01f4\5\u0098M\2\u01f3\u01f5\7\u01c6"+
		"\2\2\u01f4\u01f3\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u0230\3\2\2\2\u01f6"+
		"\u01f7\7\u00d3\2\2\u01f7\u01f8\7\u01c3\2\2\u01f8\u01f9\t\3\2\2\u01f9\u01fc"+
		"\7\u01c5\2\2\u01fa\u01fd\5\u012e\u0098\2\u01fb\u01fd\7\u01ab\2\2\u01fc"+
		"\u01fa\3\2\2\2\u01fc\u01fb\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\u0201\7\u01c5"+
		"\2\2\u01ff\u0202\5\u012e\u0098\2\u0200\u0202\7\u01ab\2\2\u0201\u01ff\3"+
		"\2\2\2\u0201\u0200\3\2\2\2\u0202\u020a\3\2\2\2\u0203\u0206\7\u01c5\2\2"+
		"\u0204\u0207\5\u012c\u0097\2\u0205\u0207\7\u01ab\2\2\u0206\u0204\3\2\2"+
		"\2\u0206\u0205\3\2\2\2\u0207\u0209\3\2\2\2\u0208\u0203\3\2\2\2\u0209\u020c"+
		"\3\2\2\2\u020a\u0208\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020d\3\2\2\2\u020c"+
		"\u020a\3\2\2\2\u020d\u020f\7\u01c4\2\2\u020e\u0210\7\u01c6\2\2\u020f\u020e"+
		"\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0230\3\2\2\2\u0211\u0213\7\27\2\2"+
		"\u0212\u0214\7\u01c6\2\2\u0213\u0212\3\2\2\2\u0213\u0214\3\2\2\2\u0214"+
		"\u0230\3\2\2\2\u0215\u0217\7\64\2\2\u0216\u0218\7\u01c6\2\2\u0217\u0216"+
		"\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u0230\3\2\2\2\u0219\u021a\7y\2\2\u021a"+
		"\u021c\5\u0132\u009a\2\u021b\u021d\7\u01c6\2\2\u021c\u021b\3\2\2\2\u021c"+
		"\u021d\3\2\2\2\u021d\u0230\3\2\2\2\u021e\u021f\5\u0132\u009a\2\u021f\u0221"+
		"\7\u01c7\2\2\u0220\u0222\7\u01c6\2\2\u0221\u0220\3\2\2\2\u0221\u0222\3"+
		"\2\2\2\u0222\u0230\3\2\2\2\u0223\u0224\7\u00c4\2\2\u0224\u0229\5\u0132"+
		"\u009a\2\u0225\u0226\7\u01c5\2\2\u0226\u0228\5\u0132\u009a\2\u0227\u0225"+
		"\3\2\2\2\u0228\u022b\3\2\2\2\u0229\u0227\3\2\2\2\u0229\u022a\3\2\2\2\u022a"+
		"\u022d\3\2\2\2\u022b\u0229\3\2\2\2\u022c\u022e\7\u01c6\2\2\u022d\u022c"+
		"\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u0230\3\2\2\2\u022f\u015d\3\2\2\2\u022f"+
		"\u0168\3\2\2\2\u022f\u0177\3\2\2\2\u022f\u0179\3\2\2\2\u022f\u019d\3\2"+
		"\2\2\u022f\u01a4\3\2\2\2\u022f\u01c6\3\2\2\2\u022f\u01cc\3\2\2\2\u022f"+
		"\u01d9\3\2\2\2\u022f\u01f1\3\2\2\2\u022f\u01f6\3\2\2\2\u022f\u0211\3\2"+
		"\2\2\u022f\u0215\3\2\2\2\u022f\u0219\3\2\2\2\u022f\u021e\3\2\2\2\u022f"+
		"\u0223\3\2\2\2\u0230\13\3\2\2\2\u0231\u023f\5P)\2\u0232\u023f\5R*\2\u0233"+
		"\u023f\5T+\2\u0234\u023f\5V,\2\u0235\u023f\5\\/\2\u0236\u023f\5^\60\2"+
		"\u0237\u023f\5`\61\2\u0238\u023f\5b\62\2\u0239\u023f\5x=\2\u023a\u023f"+
		"\5z>\2\u023b\u023f\5\u0080A\2\u023c\u023f\5\u0086D\2\u023d\u023f\5\u0088"+
		"E\2\u023e\u0231\3\2\2\2\u023e\u0232\3\2\2\2\u023e\u0233\3\2\2\2\u023e"+
		"\u0234\3\2\2\2\u023e\u0235\3\2\2\2\u023e\u0236\3\2\2\2\u023e\u0237\3\2"+
		"\2\2\u023e\u0238\3\2\2\2\u023e\u0239\3\2\2\2\u023e\u023a\3\2\2\2\u023e"+
		"\u023b\3\2\2\2\u023e\u023c\3\2\2\2\u023e\u023d\3\2\2\2\u023f\r\3\2\2\2"+
		"\u0240\u0242\5\u00a0Q\2\u0241\u0240\3\2\2\2\u0241\u0242\3\2\2\2\u0242"+
		"\u0243\3\2\2\2\u0243\u024b\7P\2\2\u0244\u0245\7\u0108\2\2\u0245\u0246"+
		"\7\u01c3\2\2\u0246\u0247\5\u0098M\2\u0247\u0249\7\u01c4\2\2\u0248\u024a"+
		"\7\u00c7\2\2\u0249\u0248\3\2\2\2\u0249\u024a\3\2\2\2\u024a\u024c\3\2\2"+
		"\2\u024b\u0244\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024e\3\2\2\2\u024d\u024f"+
		"\7v\2\2\u024e\u024d\3\2\2\2\u024e\u024f\3\2\2\2\u024f\u0254\3\2\2\2\u0250"+
		"\u0255\5\u00d0i\2\u0251\u0255\5\u0118\u008d\2\u0252\u0255\5J&\2\u0253"+
		"\u0255\7\u01ab\2\2\u0254\u0250\3\2\2\2\u0254\u0251\3\2\2\2\u0254\u0252"+
		"\3\2\2\2\u0254\u0253\3\2\2\2\u0255\u0257\3\2\2\2\u0256\u0258\5\26\f\2"+
		"\u0257\u0256\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0262\3\2\2\2\u0259\u025a"+
		"\7v\2\2\u025a\u025f\5\u00d0i\2\u025b\u025c\7\u01c5\2\2\u025c\u025e\5\u00d0"+
		"i\2\u025d\u025b\3\2\2\2\u025e\u0261\3\2\2\2\u025f\u025d\3\2\2\2\u025f"+
		"\u0260\3\2\2\2\u0260\u0263\3\2\2\2\u0261\u025f\3\2\2\2\u0262\u0259\3\2"+
		"\2\2\u0262\u0263\3\2\2\2\u0263\u0271\3\2\2\2\u0264\u026f\7\u0127\2\2\u0265"+
		"\u0270\5\u00acW\2\u0266\u0267\7;\2\2\u0267\u026d\7\u00b4\2\2\u0268\u026a"+
		"\7\u0150\2\2\u0269\u0268\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026b\3\2\2"+
		"\2\u026b\u026e\5\u0120\u0091\2\u026c\u026e\7\u01ab\2\2\u026d\u0269\3\2"+
		"\2\2\u026d\u026c\3\2\2\2\u026e\u0270\3\2\2\2\u026f\u0265\3\2\2\2\u026f"+
		"\u0266\3\2\2\2\u0270\u0272\3\2\2\2\u0271\u0264\3\2\2\2\u0271\u0272\3\2"+
		"\2\2\u0272\u0274\3\2\2\2\u0273\u0275\5\u00bc_\2\u0274\u0273\3\2\2\2\u0274"+
		"\u0275\3\2\2\2\u0275\u0277\3\2\2\2\u0276\u0278\5\u00c4c\2\u0277\u0276"+
		"\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u027a\3\2\2\2\u0279\u027b\7\u01c6\2"+
		"\2\u027a\u0279\3\2\2\2\u027a\u027b\3\2\2\2\u027b\17\3\2\2\2\u027c\u027e"+
		"\5\u00a0Q\2\u027d\u027c\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u027f\3\2\2"+
		"\2\u027f\u0281\7\u008e\2\2\u0280\u0282\7\u0093\2\2\u0281\u0280\3\2\2\2"+
		"\u0281\u0282\3\2\2\2\u0282\u0285\3\2\2\2\u0283\u0286\5\u0118\u008d\2\u0284"+
		"\u0286\5J&\2\u0285\u0283\3\2\2\2\u0285\u0284\3\2\2\2\u0286\u028b\3\2\2"+
		"\2\u0287\u0288\7\u01c3\2\2\u0288\u0289\5\u011c\u008f\2\u0289\u028a\7\u01c4"+
		"\2\2\u028a\u028c\3\2\2\2\u028b\u0287\3\2\2\2\u028b\u028c\3\2\2\2\u028c"+
		"\u028e\3\2\2\2\u028d\u028f\5\32\16\2\u028e\u028d\3\2\2\2\u028e\u028f\3"+
		"\2\2\2\u028f\u0291\3\2\2\2\u0290\u0292\5\34\17\2\u0291\u0290\3\2\2\2\u0291"+
		"\u0292\3\2\2\2\u0292\u0295\3\2\2\2\u0293\u0294\7\u00a0\2\2\u0294\u0296"+
		"\5\u0098M\2\u0295\u0293\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u0298\3\2\2"+
		"\2\u0297\u0299\5\"\22\2\u0298\u0297\3\2\2\2\u0298\u0299\3\2\2\2\u0299"+
		"\u02ae\3\2\2\2\u029a\u029b\7\u011e\2\2\u029b\u029c\7\u01c3\2\2\u029c\u029d"+
		"\5\u00f8}\2\u029d\u02a5\7\u01c4\2\2\u029e\u029f\7\u01c5\2\2\u029f\u02a0"+
		"\7\u01c3\2\2\u02a0\u02a1\5\u00f8}\2\u02a1\u02a2\7\u01c4\2\2\u02a2\u02a4"+
		"\3\2\2\2\u02a3\u029e\3\2\2\2\u02a4\u02a7\3\2\2\2\u02a5\u02a3\3\2\2\2\u02a5"+
		"\u02a6\3\2\2\2\u02a6\u02a8\3\2\2\2\u02a7\u02a5\3\2\2\2\u02a8\u02a9\5\u00e0"+
		"q\2\u02a9\u02af\3\2\2\2\u02aa\u02af\5V,\2\u02ab\u02af\5\u009eP\2\u02ac"+
		"\u02ad\7N\2\2\u02ad\u02af\7\u011e\2\2\u02ae\u029a\3\2\2\2\u02ae\u02aa"+
		"\3\2\2\2\u02ae\u02ab\3\2\2\2\u02ae\u02ac\3\2\2\2\u02af\u02b1\3\2\2\2\u02b0"+
		"\u02b2\5\u00bc_\2\u02b1\u02b0\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b4"+
		"\3\2\2\2\u02b3\u02b5\5\u00c4c\2\u02b4\u02b3\3\2\2\2\u02b4\u02b5\3\2\2"+
		"\2\u02b5\u02b7\3\2\2\2\u02b6\u02b8\5\u009cO\2\u02b7\u02b6\3\2\2\2\u02b7"+
		"\u02b8\3\2\2\2\u02b8\u02ba\3\2\2\2\u02b9\u02bb\7\u01c6\2\2\u02ba\u02b9"+
		"\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\21\3\2\2\2\u02bc\u02be\5\u00a0Q\2\u02bd"+
		"\u02bc\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c1\5\u00b4"+
		"[\2\u02c0\u02c2\5\u00ba^\2\u02c1\u02c0\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2"+
		"\u02c4\3\2\2\2\u02c3\u02c5\5\u00bc_\2\u02c4\u02c3\3\2\2\2\u02c4\u02c5"+
		"\3\2\2\2\u02c5\u02c7\3\2\2\2\u02c6\u02c8\5\u00c4c\2\u02c7\u02c6\3\2\2"+
		"\2\u02c7\u02c8\3\2\2\2\u02c8\u02ca\3\2\2\2\u02c9\u02cb\7\u01c6\2\2\u02ca"+
		"\u02c9\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\23\3\2\2\2\u02cc\u02ce\5\u00a0"+
		"Q\2\u02cd\u02cc\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf"+
		"\u02d7\7\u0119\2\2\u02d0\u02d1\7\u0108\2\2\u02d1\u02d2\7\u01c3\2\2\u02d2"+
		"\u02d3\5\u0098M\2\u02d3\u02d5\7\u01c4\2\2\u02d4\u02d6\7\u00c7\2\2\u02d5"+
		"\u02d4\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d8\3\2\2\2\u02d7\u02d0\3\2"+
		"\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02db\3\2\2\2\u02d9\u02dc\5\u0118\u008d"+
		"\2\u02da\u02dc\5J&\2\u02db\u02d9\3\2\2\2\u02db\u02da\3\2\2\2\u02dc\u02de"+
		"\3\2\2\2\u02dd\u02df\5\u00e6t\2\u02de\u02dd\3\2\2\2\u02de\u02df\3\2\2"+
		"\2\u02df\u02e0\3\2\2\2\u02e0\u02e1\7\u00f1\2\2\u02e1\u02e6\5\u00a4S\2"+
		"\u02e2\u02e3\7\u01c5\2\2\u02e3\u02e5\5\u00a4S\2\u02e4\u02e2\3\2\2\2\u02e5"+
		"\u02e8\3\2\2\2\u02e6\u02e4\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02ea\3\2"+
		"\2\2\u02e8\u02e6\3\2\2\2\u02e9\u02eb\5\26\f\2\u02ea\u02e9\3\2\2\2\u02ea"+
		"\u02eb\3\2\2\2\u02eb\u02f5\3\2\2\2\u02ec\u02ed\7v\2\2\u02ed\u02f2\5\u00d0"+
		"i\2\u02ee\u02ef\7\u01c5\2\2\u02ef\u02f1\5\u00d0i\2\u02f0\u02ee\3\2\2\2"+
		"\u02f1\u02f4\3\2\2\2\u02f2\u02f0\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f6"+
		"\3\2\2\2\u02f4\u02f2\3\2\2\2\u02f5\u02ec\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6"+
		"\u0304\3\2\2\2\u02f7\u0302\7\u0127\2\2\u02f8\u0303\5\u00aaV\2\u02f9\u02fa"+
		"\7;\2\2\u02fa\u0300\7\u00b4\2\2\u02fb\u02fd\7\u0150\2\2\u02fc\u02fb\3"+
		"\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u0301\5\u0120\u0091"+
		"\2\u02ff\u0301\7\u01ab\2\2\u0300\u02fc\3\2\2\2\u0300\u02ff\3\2\2\2\u0301"+
		"\u0303\3\2\2\2\u0302\u02f8\3\2\2\2\u0302\u02f9\3\2\2\2\u0303\u0305\3\2"+
		"\2\2\u0304\u02f7\3\2\2\2\u0304\u0305\3\2\2\2\u0305\u0307\3\2\2\2\u0306"+
		"\u0308\5\u00bc_\2\u0307\u0306\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u030a"+
		"\3\2\2\2\u0309\u030b\5\u00c4c\2\u030a\u0309\3\2\2\2\u030a\u030b\3\2\2"+
		"\2\u030b\u030d\3\2\2\2\u030c\u030e\7\u01c6\2\2\u030d\u030c\3\2\2\2\u030d"+
		"\u030e\3\2\2\2\u030e\25\3\2\2\2\u030f\u0310\7\u0173\2\2\u0310\u0311\7"+
		"\u0107\2\2\u0311\u0313\5\u0098M\2\u0312\u0314\7\t\2\2\u0313\u0312\3\2"+
		"\2\2\u0313\u0314\3\2\2\2\u0314\u0316\3\2\2\2\u0315\u0317\7\u0122\2\2\u0316"+
		"\u0315\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u031a\3\2\2\2\u0318\u0319\7s"+
		"\2\2\u0319\u031b\5\30\r\2\u031a\u0318\3\2\2\2\u031a\u031b\3\2\2\2\u031b"+
		"\u031f\3\2\2\2\u031c\u031d\7a\2\2\u031d\u031e\7!\2\2\u031e\u0320\5\u0098"+
		"M\2\u031f\u031c\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0324\3\2\2\2\u0321"+
		"\u0322\7Q\2\2\u0322\u0323\7\32\2\2\u0323\u0325\5\u0098M\2\u0324\u0321"+
		"\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u032b\3\2\2\2\u0326\u0327\7\u00d1\2"+
		"\2\u0327\u0329\5\u0098M\2\u0328\u032a\7\5\2\2\u0329\u0328\3\2\2\2\u0329"+
		"\u032a\3\2\2\2\u032a\u032c\3\2\2\2\u032b\u0326\3\2\2\2\u032b\u032c\3\2"+
		"\2\2\u032c\u0334\3\2\2\2\u032d\u032e\7+\2\2\u032e\u032f\7\u0129\2\2\u032f"+
		"\u0332\5\u0098M\2\u0330\u0331\7\u01c5\2\2\u0331\u0333\5\u0098M\2\u0332"+
		"\u0330\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0335\3\2\2\2\u0334\u032d\3\2"+
		"\2\2\u0334\u0335\3\2\2\2\u0335\u0338\3\2\2\2\u0336\u0337\7~\2\2\u0337"+
		"\u0339\t\4\2\2\u0338\u0336\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u033a\3\2"+
		"\2\2\u033a\u033b\7]\2\2\u033b\u033c\5\u0098M\2\u033c\u033d\3\2\2\2\u033d"+
		"\u033e\7\u012a\2\2\u033e\u033f\7+\2\2\u033f\u0340\7\u00a6\2\2\u0340\27"+
		"\3\2\2\2\u0341\u0342\t\5\2\2\u0342\31\3\2\2\2\u0343\u0344\7\u009d\2\2"+
		"\u0344\u034a\5\u012e\u0098\2\u0345\u0346\7\u00ad\2\2\u0346\u034a\5\u012e"+
		"\u0098\2\u0347\u0348\7\u00f4\2\2\u0348\u034a\5\u012e\u0098\2\u0349\u0343"+
		"\3\2\2\2\u0349\u0345\3\2\2\2\u0349\u0347\3\2\2\2\u034a\33\3\2\2\2\u034b"+
		"\u034c\7\u012d\2\2\u034c\u034d\7\u00f4\2\2\u034d\u036f\5\u012e\u0098\2"+
		"\u034e\u034f\7\u0086\2\2\u034f\u0350\7\60\2\2\u0350\u0355\5\36\20\2\u0351"+
		"\u0352\7\u01c5\2\2\u0352\u0354\5\36\20\2\u0353\u0351\3\2\2\2\u0354\u0357"+
		"\3\2\2\2\u0355\u0353\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u036f\3\2\2\2\u0357"+
		"\u0355\3\2\2\2\u0358\u0359\7\u00a3\2\2\u0359\u035a\7\u00a1\2\2\u035a\u035b"+
		"\5\u0098M\2\u035b\u035c\7\u0182\2\2\u035c\u035d\7\u00a1\2\2\u035d\u0368"+
		"\5\u0098M\2\u035e\u035f\7\u016f\2\2\u035f\u0360\7\u00a1\2\2\u0360\u0365"+
		"\5 \21\2\u0361\u0362\7\u01c5\2\2\u0362\u0364\5 \21\2\u0363\u0361\3\2\2"+
		"\2\u0364\u0367\3\2\2\2\u0365\u0363\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0369"+
		"\3\2\2\2\u0367\u0365\3\2\2\2\u0368\u035e\3\2\2\2\u0368\u0369\3\2\2\2\u0369"+
		"\u036f\3\2\2\2\u036a\u036b\7\u00a1\2\2\u036b\u036c\7Q\2\2\u036c\u036d"+
		"\7\32\2\2\u036d\u036f\5\u0098M\2\u036e\u034b\3\2\2\2\u036e\u034e\3\2\2"+
		"\2\u036e\u0358\3\2\2\2\u036e\u036a\3\2\2\2\u036f\35\3\2\2\2\u0370\u0371"+
		"\7\"\2\2\u0371\u037f\5\u012e\u0098\2\u0372\u0373\7\u0115\2\2\u0373\u037f"+
		"\5\u012e\u0098\2\u0374\u0375\7\u00b1\2\2\u0375\u037f\5\u012e\u0098\2\u0376"+
		"\u0377\7r\2\2\u0377\u0378\7\u0098\2\2\u0378\u037f\5\u012e\u0098\2\u0379"+
		"\u037a\7A\2\2\u037a\u037b\7\u011d\2\2\u037b\u037f\5\u012e\u0098\2\u037c"+
		"\u037d\7\5\2\2\u037d\u037f\5\u012e\u0098\2\u037e\u0370\3\2\2\2\u037e\u0372"+
		"\3\2\2\2\u037e\u0374\3\2\2\2\u037e\u0376\3\2\2\2\u037e\u0379\3\2\2\2\u037e"+
		"\u037c\3\2\2\2\u037f\37\3\2\2\2\u0380\u038a\7\"\2\2\u0381\u038a\7\5\2"+
		"\2\u0382\u038a\7\u00b1\2\2\u0383\u038a\7\u0115\2\2\u0384\u0385\7A\2\2"+
		"\u0385\u038a\7\u011d\2\2\u0386\u0387\7r\2\2\u0387\u038a\7\u0098\2\2\u0388"+
		"\u038a\7\u012d\2\2\u0389\u0380\3\2\2\2\u0389\u0381\3\2\2\2\u0389\u0382"+
		"\3\2\2\2\u0389\u0383\3\2\2\2\u0389\u0384\3\2\2\2\u0389\u0386\3\2\2\2\u0389"+
		"\u0388\3\2\2\2\u038a!\3\2\2\2\u038b\u038c\7\u0147\2\2\u038c\u039b\7\u00c6"+
		"\2\2\u038d\u038e\7\u00c3\2\2\u038e\u039b\5\u012e\u0098\2\u038f\u0390\7"+
		"\u00d2\2\2\u0390\u039b\t\6\2\2\u0391\u0392\7\u0157\2\2\u0392\u0398\7\u015b"+
		"\2\2\u0393\u0394\7\u00d4\2\2\u0394\u0399\7\u019b\2\2\u0395\u0396\7\u00d4"+
		"\2\2\u0396\u0399\7\u0139\2\2\u0397\u0399\7\u018b\2\2\u0398\u0393\3\2\2"+
		"\2\u0398\u0395\3\2\2\2\u0398\u0397\3\2\2\2\u0399\u039b\3\2\2\2\u039a\u038b"+
		"\3\2\2\2\u039a\u038d\3\2\2\2\u039a\u038f\3\2\2\2\u039a\u0391\3\2\2\2\u039b"+
		"#\3\2\2\2\u039c\u039e\7\66\2\2\u039d\u039f\7\u0115\2\2\u039e\u039d\3\2"+
		"\2\2\u039e\u039f\3\2\2\2\u039f\u03a1\3\2\2\2\u03a0\u03a2\5&\24\2\u03a1"+
		"\u03a0\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a4\7\u008c"+
		"\2\2\u03a4\u03a5\5\u0132\u009a\2\u03a5\u03a6\7\u00b7\2\2\u03a6\u03a7\5"+
		"\u0110\u0089\2\u03a7\u03a8\7\u01c3\2\2\u03a8\u03a9\5\u011c\u008f\2\u03a9"+
		"\u03ab\7\u01c4\2\2\u03aa\u03ac\7\u01c6\2\2\u03ab\u03aa\3\2\2\2\u03ab\u03ac"+
		"\3\2\2\2\u03ac%\3\2\2\2\u03ad\u03ae\t\7\2\2\u03ae\'\3\2\2\2\u03af\u03b3"+
		"\7\66\2\2\u03b0\u03b1\7\u00be\2\2\u03b1\u03b4\7\u00d8\2\2\u03b2\u03b4"+
		"\7\u0102\2\2\u03b3\u03b0\3\2\2\2\u03b3\u03b2\3\2\2\2\u03b3\u03b4\3\2\2"+
		"\2\u03b4\u03b5\3\2\2\2\u03b5\u03b6\7\u00cf\2\2\u03b6\u03b8\5\u0112\u008a"+
		"\2\u03b7\u03b9\7\u01c3\2\2\u03b8\u03b7\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9"+
		"\u03c2\3\2\2\2\u03ba\u03bf\5*\26\2\u03bb\u03bc\7\u01c5\2\2\u03bc\u03be"+
		"\5*\26\2\u03bd\u03bb\3\2\2\2\u03be\u03c1\3\2\2\2\u03bf\u03bd\3\2\2\2\u03bf"+
		"\u03c0\3\2\2\2\u03c0\u03c3\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c2\u03ba\3\2"+
		"\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03c5\3\2\2\2\u03c4\u03c6\7\u01c4\2\2\u03c5"+
		"\u03c4\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03cc\3\2\2\2\u03c7\u03c8\7\u00dd"+
		"\2\2\u03c8\u03cd\5,\27\2\u03c9\u03ca\7\u00a9\2\2\u03ca\u03cb\7\u00dd\2"+
		"\2\u03cb\u03cd\7\u00f1\2\2\u03cc\u03c7\3\2\2\2\u03cc\u03c9\3\2\2\2\u03cc"+
		"\u03cd\3\2\2\2\u03cd\u03d1\3\2\2\2\u03ce\u03cf\7\u00fb\2\2\u03cf\u03d0"+
		"\7\u00ea\2\2\u03d0\u03d2\t\b\2\2\u03d1\u03ce\3\2\2\2\u03d1\u03d2\3\2\2"+
		"\2\u03d2\u03d6\3\2\2\2\u03d3\u03d4\7\u00b7\2\2\u03d4\u03d5\7d\2\2\u03d5"+
		"\u03d7\7\u00de\2\2\u03d6\u03d3\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7)\3\2"+
		"\2\2\u03d8\u03d9\t\t\2\2\u03d9\u03da\5\u011e\u0090\2\u03da\u03db\5d\63"+
		"\2\u03db+\3\2\2\2\u03dc\u03dd\7\u01c3\2\2\u03dd\u03de\5\u011e\u0090\2"+
		"\u03de\u03e5\5d\63\2\u03df\u03e0\7\u01c5\2\2\u03e0\u03e1\5\u011e\u0090"+
		"\2\u03e1\u03e2\5d\63\2\u03e2\u03e4\3\2\2\2\u03e3\u03df\3\2\2\2\u03e4\u03e7"+
		"\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e8\3\2\2\2\u03e7"+
		"\u03e5\3\2\2\2\u03e8\u03e9\7\u01c4\2\2\u03e9-\3\2\2\2\u03ea\u03eb\7\66"+
		"\2\2\u03eb\u03ec\7\u00fc\2\2\u03ec\u03ed\5\u0132\u009a\2\u03ed\u03ee\7"+
		"\u00b7\2\2\u03ee\u03ef\5\u00dan\2\u03ef\u03f0\7\u01c3\2\2\u03f0\u03f1"+
		"\5\u011c\u008f\2\u03f1\u0402\7\u01c4\2\2\u03f2\u03f8\7\u012a\2\2\u03f3"+
		"\u03f9\7\u014f\2\2\u03f4\u03f5\7\u0186\2\2\u03f5\u03f6\7\u01ac\2\2\u03f6"+
		"\u03f9\t\n\2\2\u03f7\u03f9\7\u018f\2\2\u03f8\u03f3\3\2\2\2\u03f8\u03f4"+
		"\3\2\2\2\u03f8\u03f7\3\2\2\2\u03f9\u03fc\3\2\2\2\u03fa\u03fb\7\u01c5\2"+
		"\2\u03fb\u03fd\7\u016b\2\2\u03fc\u03fa\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd"+
		"\u0400\3\2\2\2\u03fe\u03ff\7\u01c5\2\2\u03ff\u0401\5\u0122\u0092\2\u0400"+
		"\u03fe\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0403\3\2\2\2\u0402\u03f2\3\2"+
		"\2\2\u0402\u0403\3\2\2\2\u0403\u0405\3\2\2\2\u0404\u0406\7\u01c6\2\2\u0405"+
		"\u0404\3\2\2\2\u0405\u0406\3\2\2\2\u0406/\3\2\2\2\u0407\u0408\7\66\2\2"+
		"\u0408\u0409\7\u0100\2\2\u0409\u040a\5\u0110\u0089\2\u040a\u040b\7\u01c3"+
		"\2\2\u040b\u0412\5l\67\2\u040c\u040e\7\u01c5\2\2\u040d\u040c\3\2\2\2\u040d"+
		"\u040e\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0411\5l\67\2\u0410\u040d\3\2"+
		"\2\2\u0411\u0414\3\2\2\2\u0412\u0410\3\2\2\2\u0412\u0413\3\2\2\2\u0413"+
		"\u0416\3\2\2\2\u0414\u0412\3\2\2\2\u0415\u0417\7\u01c5\2\2\u0416\u0415"+
		"\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u041e\7\u01c4\2"+
		"\2\u0419\u041a\7\u0089\2\2\u041a\u041f\5\u0132\u009a\2\u041b\u041c\7\u00b7"+
		"\2\2\u041c\u041f\5\u0132\u009a\2\u041d\u041f\7N\2\2\u041e\u0419\3\2\2"+
		"\2\u041e\u041b\3\2\2\2\u041e\u041d\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0421"+
		"\3\2\2\2\u0420\u0422\7\u01c6\2\2\u0421\u0420\3\2\2\2\u0421\u0422\3\2\2"+
		"\2\u0422\61\3\2\2\2\u0423\u0424\7\66\2\2\u0424\u0425\7\u0123\2\2\u0425"+
		"\u0431\5\u0114\u008b\2\u0426\u0427\7\u01c3\2\2\u0427\u042c\5\u011e\u0090"+
		"\2\u0428\u0429\7\u01c5\2\2\u0429\u042b\5\u011e\u0090\2\u042a\u0428\3\2"+
		"\2\2\u042b\u042e\3\2\2\2\u042c\u042a\3\2\2\2\u042c\u042d\3\2\2\2\u042d"+
		"\u042f\3\2\2\2\u042e\u042c\3\2\2\2\u042f\u0430\7\u01c4\2\2\u0430\u0432"+
		"\3\2\2\2\u0431\u0426\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u043c\3\2\2\2\u0433"+
		"\u0434\7\u012a\2\2\u0434\u0439\5\64\33\2\u0435\u0436\7\u01c5\2\2\u0436"+
		"\u0438\5\64\33\2\u0437\u0435\3\2\2\2\u0438\u043b\3\2\2\2\u0439\u0437\3"+
		"\2\2\2\u0439\u043a\3\2\2\2\u043a\u043d\3\2\2\2\u043b\u0439\3\2\2\2\u043c"+
		"\u0433\3\2\2\2\u043c\u043d\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u043f\7\n"+
		"\2\2\u043f\u0443\5\22\n\2\u0440\u0441\7\u012a\2\2\u0441\u0442\7\"\2\2"+
		"\u0442\u0444\7\u00bd\2\2\u0443\u0440\3\2\2\2\u0443\u0444\3\2\2\2\u0444"+
		"\u0446\3\2\2\2\u0445\u0447\7\u01c6\2\2\u0446\u0445\3\2\2\2\u0446\u0447"+
		"\3\2\2\2\u0447\63\3\2\2\2\u0448\u0449\t\13\2\2\u0449\65\3\2\2\2\u044a"+
		"\u044b\7\6\2\2\u044b\u044c\7\u0100\2\2\u044c\u044d\5\u0110\u0089\2\u044d"+
		"\u044e\7\u00f1\2\2\u044e\u044f\7\u01c3\2\2\u044f\u0450\7\u015d\2\2\u0450"+
		"\u0451\7\u01b2\2\2\u0451\u0452\t\f\2\2\u0452\u0454\7\u01c4\2\2\u0453\u0455"+
		"\7\u01c6\2\2\u0454\u0453\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u045e\3\2\2"+
		"\2\u0456\u0457\7\6\2\2\u0457\u0458\7\u0100\2\2\u0458\u0459\5\u0110\u0089"+
		"\2\u0459\u045b\58\35\2\u045a\u045c\7\u01c6\2\2\u045b\u045a\3\2\2\2\u045b"+
		"\u045c\3\2\2\2\u045c\u045e\3\2\2\2\u045d\u044a\3\2\2\2\u045d\u0456\3\2"+
		"\2\2\u045e\67\3\2\2\2\u045f\u0460\7\4\2\2\u0460\u0466\5l\67\2\u0461\u0462"+
		"\7\u01c5\2\2\u0462\u0463\7\4\2\2\u0463\u0465\5l\67\2\u0464\u0461\3\2\2"+
		"\2\u0465\u0468\3\2\2\2\u0466\u0464\3\2\2\2\u0466\u0467\3\2\2\2\u04679"+
		"\3\2\2\2\u0468\u0466\3\2\2\2\u0469\u046a\7\6\2\2\u046a\u046d\7B\2\2\u046b"+
		"\u046e\5\u0132\u009a\2\u046c\u046e\7;\2\2\u046d\u046b\3\2\2\2\u046d\u046c"+
		"\3\2\2\2\u046e\u0477\3\2\2\2\u046f\u0470\7\u0166\2\2\u0470\u0471\7\u0168"+
		"\2\2\u0471\u0472\7\u01b2\2\2\u0472\u0478\5\u0132\u009a\2\u0473\u0474\7"+
		"*\2\2\u0474\u0478\5\u0132\u009a\2\u0475\u0476\7\u00f1\2\2\u0476\u0478"+
		"\5<\37\2\u0477\u046f\3\2\2\2\u0477\u0473\3\2\2\2\u0477\u0475\3\2\2\2\u0478"+
		"\u047a\3\2\2\2\u0479\u047b\7\u01c6\2\2\u047a\u0479\3\2\2\2\u047a\u047b"+
		"\3\2\2\2\u047b;\3\2\2\2\u047c\u047f\5\u0132\u009a\2\u047d\u0480\5\u0132"+
		"\u009a\2\u047e\u0480\7w\2\2\u047f\u047d\3\2\2\2\u047f\u047e\3\2\2\2\u047f"+
		"\u0480\3\2\2\2\u0480=\3\2\2\2\u0481\u0482\7X\2\2\u0482\u0485\7\u008c\2"+
		"\2\u0483\u0484\7\u0085\2\2\u0484\u0486\7h\2\2\u0485\u0483\3\2\2\2\u0485"+
		"\u0486\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0489\5\u0132\u009a\2\u0488\u048a"+
		"\7\u01c6\2\2\u0489\u0488\3\2\2\2\u0489\u048a\3\2\2\2\u048a?\3\2\2\2\u048b"+
		"\u048c\7X\2\2\u048c\u048f\7\u00cf\2\2\u048d\u048e\7\u0085\2\2\u048e\u0490"+
		"\7h\2\2\u048f\u048d\3\2\2\2\u048f\u0490\3\2\2\2\u0490\u0491\3\2\2\2\u0491"+
		"\u0493\5\u0116\u008c\2\u0492\u0494\7\u01c6\2\2\u0493\u0492\3\2\2\2\u0493"+
		"\u0494\3\2\2\2\u0494A\3\2\2\2\u0495\u0496\7X\2\2\u0496\u049a\7\u00fc\2"+
		"\2\u0497\u0498\5\u0110\u0089\2\u0498\u0499\7\u01be\2\2\u0499\u049b\3\2"+
		"\2\2\u049a\u0497\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049c\3\2\2\2\u049c"+
		"\u049d\5\u0132\u009a\2\u049d\u049e\7\u01c6\2\2\u049eC\3\2\2\2\u049f\u04a0"+
		"\7X\2\2\u04a0\u04a3\7\u0100\2\2\u04a1\u04a2\7\u0085\2\2\u04a2\u04a4\7"+
		"h\2\2\u04a3\u04a1\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5"+
		"\u04a7\5\u0110\u0089\2\u04a6\u04a8\7\u01c6\2\2\u04a7\u04a6\3\2\2\2\u04a7"+
		"\u04a8\3\2\2\2\u04a8E\3\2\2\2\u04a9\u04aa\7X\2\2\u04aa\u04ad\7\u0123\2"+
		"\2\u04ab\u04ac\7\u0085\2\2\u04ac\u04ae\7h\2\2\u04ad\u04ab\3\2\2\2\u04ad"+
		"\u04ae\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b4\5\u0114\u008b\2\u04b0\u04b1"+
		"\7\u01c5\2\2\u04b1\u04b3\5\u0114\u008b\2\u04b2\u04b0\3\2\2\2\u04b3\u04b6"+
		"\3\2\2\2\u04b4\u04b2\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04b8\3\2\2\2\u04b6"+
		"\u04b4\3\2\2\2\u04b7\u04b9\7\u01c6\2\2\u04b8\u04b7\3\2\2\2\u04b8\u04b9"+
		"\3\2\2\2\u04b9G\3\2\2\2\u04ba\u04bb\7\u010d\2\2\u04bb\u04bc\7\u0100\2"+
		"\2\u04bc\u04be\5\u0110\u0089\2\u04bd\u04bf\7\u01c6\2\2\u04be\u04bd\3\2"+
		"\2\2\u04be\u04bf\3\2\2\2\u04bfI\3\2\2\2\u04c0\u04c3\5L\'\2\u04c1\u04c3"+
		"\5N(\2\u04c2\u04c0\3\2\2\2\u04c2\u04c1\3\2\2\2\u04c3K\3\2\2\2\u04c4\u04c5"+
		"\7\u00ba\2\2\u04c5\u04c6\7\u01c3\2\2\u04c6\u04c7\5\u0132\u009a\2\u04c7"+
		"\u04c8\7\u01c5\2\2\u04c8\u04c9\7\u01ae\2\2\u04c9\u04ca\7\u01c4\2\2\u04ca"+
		"M\3\2\2\2\u04cb\u04cc\7\u00b9\2\2\u04cc\u04cd\7\u01c3\2\2\u04cd\u04ce"+
		"\7\u01ae\2\2\u04ce\u04cf\7\u01c5\2\2\u04cf\u04d0\7\u01ae\2\2\u04d0\u04d1"+
		"\7\u01c4\2\2\u04d1\u04d3\7\u01be\2\2\u04d2\u04d4\5\u0132\u009a\2\u04d3"+
		"\u04d2\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4\u04d5\3\2\2\2\u04d5\u04d7\7\u01be"+
		"\2\2\u04d6\u04d8\5\u0132\u009a\2\u04d7\u04d6\3\2\2\2\u04d7\u04d8\3\2\2"+
		"\2\u04d8\u04d9\3\2\2\2\u04d9\u04da\7\u01be\2\2\u04da\u04db\5\u0132\u009a"+
		"\2\u04dbO\3\2\2\2\u04dc\u04dd\7L\2\2\u04dd\u04df\5\u0134\u009b\2\u04de"+
		"\u04e0\5d\63\2\u04df\u04de\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0\u04e3\3\2"+
		"\2\2\u04e1\u04e2\7N\2\2\u04e2\u04e4\5\u0098M\2\u04e3\u04e1\3\2\2\2\u04e3"+
		"\u04e4\3\2\2\2\u04e4\u04e7\3\2\2\2\u04e5\u04e6\7\u01b2\2\2\u04e6\u04e8"+
		"\5\u0098M\2\u04e7\u04e5\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04ea\3\2\2"+
		"\2\u04e9\u04eb\7\u01c6\2\2\u04ea\u04e9\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb"+
		"Q\3\2\2\2\u04ec\u04ed\7L\2\2\u04ed\u04ee\7\u015c\2\2\u04ee\u04ef\7\u0102"+
		"\2\2\u04ef\u04f0\7\u0100\2\2\u04f0\u04f1\5\u0110\u0089\2\u04f1\u04f2\7"+
		"\u01c3\2\2\u04f2\u04f7\5l\67\2\u04f3\u04f4\7\u01c5\2\2\u04f4\u04f6\5l"+
		"\67\2\u04f5\u04f3\3\2\2\2\u04f6\u04f9\3\2\2\2\u04f7\u04f5\3\2\2\2\u04f7"+
		"\u04f8\3\2\2\2\u04f8\u04fa\3\2\2\2\u04f9\u04f7\3\2\2\2\u04fa\u04ff\7\u01c4"+
		"\2\2\u04fb\u04fc\7\u00b7\2\2\u04fc\u04fd\7-\2\2\u04fd\u04fe\t\r\2\2\u04fe"+
		"\u0500\7\u0184\2\2\u04ff\u04fb\3\2\2\2\u04ff\u0500\3\2\2\2\u0500\u0503"+
		"\3\2\2\2\u0501\u0502\7\u00ac\2\2\u0502\u0504\7\u010b\2\2\u0503\u0501\3"+
		"\2\2\2\u0503\u0504\3\2\2\2\u0504\u0506\3\2\2\2\u0505\u0507\7\u01c6\2\2"+
		"\u0506\u0505\3\2\2\2\u0506\u0507\3\2\2\2\u0507S\3\2\2\2\u0508\u050a\7"+
		"&\2\2\u0509\u050b\7\u0150\2\2\u050a\u0509\3\2\2\2\u050a\u050b\3\2\2\2"+
		"\u050b\u050c\3\2\2\2\u050c\u050e\5\u0120\u0091\2\u050d\u050f\7\u01c6\2"+
		"\2\u050e\u050d\3\2\2\2\u050e\u050f\3\2\2\2\u050f\u0523\3\2\2\2\u0510\u0512"+
		"\7I\2\2\u0511\u0513\7\u0150\2\2\u0512\u0511\3\2\2\2\u0512\u0513\3\2\2"+
		"\2\u0513\u0514\3\2\2\2\u0514\u0516\5\u0120\u0091\2\u0515\u0517\7\u01c6"+
		"\2\2\u0516\u0515\3\2\2\2\u0516\u0517\3\2\2\2\u0517\u0523\3\2\2\2\u0518"+
		"\u0523\5\u0090I\2\u0519\u0523\5\u0094K\2\u051a\u051c\7\u00b8\2\2\u051b"+
		"\u051d\7\u0150\2\2\u051c\u051b\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u051e"+
		"\3\2\2\2\u051e\u0520\5\u0120\u0091\2\u051f\u0521\7\u01c6\2\2\u0520\u051f"+
		"\3\2\2\2\u0520\u0521\3\2\2\2\u0521\u0523\3\2\2\2\u0522\u0508\3\2\2\2\u0522"+
		"\u0510\3\2\2\2\u0522\u0518\3\2\2\2\u0522\u0519\3\2\2\2\u0522\u051a\3\2"+
		"\2\2\u0523U\3\2\2\2\u0524\u0526\t\16\2\2\u0525\u0527\7\u0088\2\2\u0526"+
		"\u0525\3\2\2\2\u0526\u0527\3\2\2\2\u0527\u052a\3\2\2\2\u0528\u0529\7\u01ab"+
		"\2\2\u0529\u052b\7\u01b2\2\2\u052a\u0528\3\2\2\2\u052a\u052b\3\2\2\2\u052b"+
		"\u052c\3\2\2\2\u052c\u0535\5\u0116\u008c\2\u052d\u0532\5X-\2\u052e\u052f"+
		"\7\u01c5\2\2\u052f\u0531\5X-\2\u0530\u052e\3\2\2\2\u0531\u0534\3\2\2\2"+
		"\u0532\u0530\3\2\2\2\u0532\u0533\3\2\2\2\u0533\u0536\3\2\2\2\u0534\u0532"+
		"\3\2\2\2\u0535\u052d\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u0538\3\2\2\2\u0537"+
		"\u0539\7\u01c6\2\2\u0538\u0537\3\2\2\2\u0538\u0539\3\2\2\2\u0539\u0554"+
		"\3\2\2\2\u053a\u053c\t\16\2\2\u053b\u053d\7\u0088\2\2\u053c\u053b\3\2"+
		"\2\2\u053c\u053d\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u053f\7\u01c3\2\2\u053f"+
		"\u0544\5Z.\2\u0540\u0541\7\u01cb\2\2\u0541\u0543\5Z.\2\u0542\u0540\3\2"+
		"\2\2\u0543\u0546\3\2\2\2\u0544\u0542\3\2\2\2\u0544\u0545\3\2\2\2\u0545"+
		"\u0547\3\2\2\2\u0546\u0544\3\2\2\2\u0547\u054e\7\u01c4\2\2\u0548\u054a"+
		"\7\n\2\2\u0549\u0548\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u054b\3\2\2\2\u054b"+
		"\u054c\t\17\2\2\u054c\u054d\7\u01b2\2\2\u054d\u054f\7\u01ae\2\2\u054e"+
		"\u0549\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0551\3\2\2\2\u0550\u0552\7\u01c6"+
		"\2\2\u0551\u0550\3\2\2\2\u0551\u0552\3\2\2\2\u0552\u0554\3\2\2\2\u0553"+
		"\u0524\3\2\2\2\u0553\u053a\3\2\2\2\u0554W\3\2\2\2\u0555\u0556\7\u01ab"+
		"\2\2\u0556\u0558\7\u01b2\2\2\u0557\u0555\3\2\2\2\u0557\u0558\3\2\2\2\u0558"+
		"\u0560\3\2\2\2\u0559\u0561\5\u012c\u0097\2\u055a\u055c\7\u01ab\2\2\u055b"+
		"\u055d\t\20\2\2\u055c\u055b\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u0561\3"+
		"\2\2\2\u055e\u0561\7N\2\2\u055f\u0561\7\u00b1\2\2\u0560\u0559\3\2\2\2"+
		"\u0560\u055a\3\2\2\2\u0560\u055e\3\2\2\2\u0560\u055f\3\2\2\2\u0561Y\3"+
		"\2\2\2\u0562\u0563\t\21\2\2\u0563[\3\2\2\2\u0564\u0565\7\u00f1\2\2\u0565"+
		"\u0568\5\u0134\u009b\2\u0566\u0567\7\u01be\2\2\u0567\u0569\5\u0132\u009a"+
		"\2\u0568\u0566\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u056b"+
		"\7\u01b2\2\2\u056b\u056d\5\u0098M\2\u056c\u056e\7\u01c6\2\2\u056d\u056c"+
		"\3\2\2\2\u056d\u056e\3\2\2\2\u056e\u0578\3\2\2\2\u056f\u0570\7\u00f1\2"+
		"\2\u0570\u0571\5\u0134\u009b\2\u0571\u0572\5\u0138\u009d\2\u0572\u0574"+
		"\5\u0098M\2\u0573\u0575\7\u01c6\2\2\u0574\u0573\3\2\2\2\u0574\u0575\3"+
		"\2\2\2\u0575\u0578\3\2\2\2\u0576\u0578\5\u0096L\2\u0577\u0564\3\2\2\2"+
		"\u0577\u056f\3\2\2\2\u0577\u0576\3\2\2\2\u0578]\3\2\2\2\u0579\u057a\7"+
		"\20\2\2\u057a\u057b\7V\2\2\u057b\u057e\t\22\2\2\u057c\u057f\5\u0132\u009a"+
		"\2\u057d\u057f\7\u01ab\2\2\u057e\u057c\3\2\2\2\u057e\u057d\3\2\2\2\u057e"+
		"\u057f\3\2\2\2\u057f\u0581\3\2\2\2\u0580\u0582\7\u01c6\2\2\u0581\u0580"+
		"\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u05c5\3\2\2\2\u0583\u0584\7\20\2\2"+
		"\u0584\u058e\t\22\2\2\u0585\u0588\5\u0132\u009a\2\u0586\u0588\7\u01ab"+
		"\2\2\u0587\u0585\3\2\2\2\u0587\u0586\3\2\2\2\u0588\u058c\3\2\2\2\u0589"+
		"\u058a\7\u012a\2\2\u058a\u058b\7\u0161\2\2\u058b\u058d\7\u01ae\2\2\u058c"+
		"\u0589\3\2\2\2\u058c\u058d\3\2\2\2\u058d\u058f\3\2\2\2\u058e\u0587\3\2"+
		"\2\2\u058e\u058f\3\2\2\2\u058f\u0591\3\2\2\2\u0590\u0592\7\u01c6\2\2\u0591"+
		"\u0590\3\2\2\2\u0591\u0592\3\2\2\2\u0592\u05c5\3\2\2\2\u0593\u0594\7-"+
		"\2\2\u0594\u059f\t\22\2\2\u0595\u0598\5\u0132\u009a\2\u0596\u0598\7\u01ab"+
		"\2\2\u0597\u0595\3\2\2\2\u0597\u0596\3\2\2\2\u0598\u059d\3\2\2\2\u0599"+
		"\u059a\7\u012a\2\2\u059a\u059b\7\u01c3\2\2\u059b\u059c\t\6\2\2\u059c\u059e"+
		"\7\u01c4\2\2\u059d\u0599\3\2\2\2\u059d\u059e\3\2\2\2\u059e\u05a0\3\2\2"+
		"\2\u059f\u0597\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05a2\3\2\2\2\u05a1\u05a3"+
		"\7\u01c6\2\2\u05a2\u05a1\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05c5\3\2\2"+
		"\2\u05a4\u05a6\7-\2\2\u05a5\u05a7\7\u01a1\2\2\u05a6\u05a5\3\2\2\2\u05a6"+
		"\u05a7\3\2\2\2\u05a7\u05a9\3\2\2\2\u05a8\u05aa\7\u01c6\2\2\u05a9\u05a8"+
		"\3\2\2\2\u05a9\u05aa\3\2\2\2\u05aa\u05c5\3\2\2\2\u05ab\u05ac\7\u00e4\2"+
		"\2\u05ac\u05af\t\22\2\2\u05ad\u05b0\5\u0132\u009a\2\u05ae\u05b0\7\u01ab"+
		"\2\2\u05af\u05ad\3\2\2\2\u05af\u05ae\3\2\2\2\u05af\u05b0\3\2\2\2\u05b0"+
		"\u05b2\3\2\2\2\u05b1\u05b3\7\u01c6\2\2\u05b2\u05b1\3\2\2\2\u05b2\u05b3"+
		"\3\2\2\2\u05b3\u05c5\3\2\2\2\u05b4\u05b6\7\u00e4\2\2\u05b5\u05b7\7\u01a1"+
		"\2\2\u05b6\u05b5\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05b9\3\2\2\2\u05b8"+
		"\u05ba\7\u01c6\2\2\u05b9\u05b8\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05c5"+
		"\3\2\2\2\u05bb\u05bc\7\u00e8\2\2\u05bc\u05bf\t\22\2\2\u05bd\u05c0\5\u0132"+
		"\u009a\2\u05be\u05c0\7\u01ab\2\2\u05bf\u05bd\3\2\2\2\u05bf\u05be\3\2\2"+
		"\2\u05bf\u05c0\3\2\2\2\u05c0\u05c2\3\2\2\2\u05c1\u05c3\7\u01c6\2\2\u05c2"+
		"\u05c1\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3\u05c5\3\2\2\2\u05c4\u0579\3\2"+
		"\2\2\u05c4\u0583\3\2\2\2\u05c4\u0593\3\2\2\2\u05c4\u05a4\3\2\2\2\u05c4"+
		"\u05ab\3\2\2\2\u05c4\u05b4\3\2\2\2\u05c4\u05bb\3\2\2\2\u05c5_\3\2\2\2"+
		"\u05c6\u05c8\7\u0151\2\2\u05c7\u05c9\7\u01ac\2\2\u05c8\u05c7\3\2\2\2\u05c8"+
		"\u05c9\3\2\2\2\u05c9a\3\2\2\2\u05ca\u05cb\7\u011b\2\2\u05cb\u05cd\5\u0132"+
		"\u009a\2\u05cc\u05ce\7\u01c6\2\2\u05cd\u05cc\3\2\2\2\u05cd\u05ce\3\2\2"+
		"\2\u05cec\3\2\2\2\u05cf\u05d1\7\u0118\2\2\u05d0\u05cf\3\2\2\2\u05d0\u05d1"+
		"\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u066d\5f\64\2\u05d3\u05d8\7\u01af\2"+
		"\2\u05d4\u05d5\7\u01c3\2\2\u05d5\u05d6\5\u0098M\2\u05d6\u05d7\7\u01c4"+
		"\2\2\u05d7\u05d9\3\2\2\2\u05d8\u05d4\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9"+
		"\u066d\3\2\2\2\u05da\u05df\7\24\2\2\u05db\u05dc\7\u01c3\2\2\u05dc\u05dd"+
		"\5\u0098M\2\u05dd\u05de\7\u01c4\2\2\u05de\u05e0\3\2\2\2\u05df\u05db\3"+
		"\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u066d\3\2\2\2\u05e1\u066d\7\25\2\2\u05e2"+
		"\u066d\7\26\2\2\u05e3\u05e8\7 \2\2\u05e4\u05e5\7\u01c3\2\2\u05e5\u05e6"+
		"\5\u0098M\2\u05e6\u05e7\7\u01c4\2\2\u05e7\u05e9\3\2\2\2\u05e8\u05e4\3"+
		"\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u066d\3\2\2\2\u05ea\u05ef\7!\2\2\u05eb"+
		"\u05ec\7\u01c3\2\2\u05ec\u05ed\5\u0098M\2\u05ed\u05ee\7\u01c4\2\2\u05ee"+
		"\u05f0\3\2\2\2\u05ef\u05eb\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u066d\3\2"+
		"\2\2\u05f1\u066d\7%\2\2\u05f2\u05f7\7C\2\2\u05f3\u05f4\7\u01c3\2\2\u05f4"+
		"\u05f5\5\u0098M\2\u05f5\u05f6\7\u01c4\2\2\u05f6\u05f8\3\2\2\2\u05f7\u05f3"+
		"\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8\u066d\3\2\2\2\u05f9\u05fe\7D\2\2\u05fa"+
		"\u05fb\7\u01c3\2\2\u05fb\u05fc\5\u0098M\2\u05fc\u05fd\7\u01c4\2\2\u05fd"+
		"\u05ff\3\2\2\2\u05fe\u05fa\3\2\2\2\u05fe\u05ff\3\2\2\2\u05ff\u066d\3\2"+
		"\2\2\u0600\u0605\7F\2\2\u0601\u0602\7\u01c3\2\2\u0602\u0603\5\u0098M\2"+
		"\u0603\u0604\7\u01c4\2\2\u0604\u0606\3\2\2\2\u0605\u0601\3\2\2\2\u0605"+
		"\u0606\3\2\2\2\u0606\u066d\3\2\2\2\u0607\u066d\7E\2\2\u0608\u066d\7G\2"+
		"\2\u0609\u060e\7\u01ac\2\2\u060a\u060b\7\u01c3\2\2\u060b\u060c\5\u0098"+
		"M\2\u060c\u060d\7\u01c4\2\2\u060d\u060f\3\2\2\2\u060e\u060a\3\2\2\2\u060e"+
		"\u060f\3\2\2\2\u060f\u066d\3\2\2\2\u0610\u066d\7K\2\2\u0611\u066d\7W\2"+
		"\2\u0612\u0617\7\u01b0\2\2\u0613\u0614\7\u01c3\2\2\u0614\u0615\5\u0098"+
		"M\2\u0615\u0616\7\u01c4\2\2\u0616\u0618\3\2\2\2\u0617\u0613\3\2\2\2\u0617"+
		"\u0618\3\2\2\2\u0618\u066d\3\2\2\2\u0619\u061e\7o\2\2\u061a\u061b\7\u01c3"+
		"\2\2\u061b\u061c\5\u0098M\2\u061c\u061d\7\u01c4\2\2\u061d\u061f\3\2\2"+
		"\2\u061e\u061a\3\2\2\2\u061e\u061f\3\2\2\2\u061f\u066d\3\2\2\2\u0620\u066d"+
		"\7\u0087\2\2\u0621\u066d\7\u0091\2\2\u0622\u066d\7\u00a4\2\2\u0623\u066d"+
		"\7\u00a5\2\2\u0624\u0625\7\u00a8\2\2\u0625\u0626\7\u01c3\2\2\u0626\u0627"+
		"\5\u0098M\2\u0627\u0628\7\u01c4\2\2\u0628\u066d\3\2\2\2\u0629\u062a\7"+
		"\u00b3\2\2\u062a\u062b\7\u01c3\2\2\u062b\u062c\5\u0098M\2\u062c\u062d"+
		"\7\u01c4\2\2\u062d\u066d\3\2\2\2\u062e\u066d\7\u00ae\2\2\u062f\u0636\7"+
		"\u00af\2\2\u0630\u0631\7\u01c3\2\2\u0631\u0632\5\u0098M\2\u0632\u0633"+
		"\7\u01c5\2\2\u0633\u0634\5\u0098M\2\u0634\u0635\7\u01c4\2\2\u0635\u0637"+
		"\3\2\2\2\u0636\u0630\3\2\2\2\u0636\u0637\3\2\2\2\u0637\u066d\3\2\2\2\u0638"+
		"\u063f\7\u00b0\2\2\u0639\u063a\7\u01c3\2\2\u063a\u063b\5\u0098M\2\u063b"+
		"\u063c\7\u01c5\2\2\u063c\u063d\5\u0098M\2\u063d\u063e\7\u01c4\2\2\u063e"+
		"\u0640\3\2\2\2\u063f\u0639\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u066d\3\2"+
		"\2\2\u0641\u066d\7\u01b1\2\2\u0642\u066d\7\u00f7\2\2\u0643\u0648\7\u00f8"+
		"\2\2\u0644\u0645\7\u01c3\2\2\u0645\u0646\5\u0098M\2\u0646\u0647\7\u01c4"+
		"\2\2\u0647\u0649\3\2\2\2\u0648\u0644\3\2\2\2\u0648\u0649\3\2\2\2\u0649"+
		"\u066d\3\2\2\2\u064a\u066d\7\u00f9\2\2\u064b\u066d\7\u0103\2\2\u064c\u0651"+
		"\7\u0195\2\2\u064d\u064e\7\u01c3\2\2\u064e\u064f\5\u0098M\2\u064f\u0650"+
		"\7\u01c4\2\2\u0650\u0652\3\2\2\2\u0651\u064d\3\2\2\2\u0651\u0652\3\2\2"+
		"\2\u0652\u066d\3\2\2\2\u0653\u0658\7\u0196\2\2\u0654\u0655\7\u01c3\2\2"+
		"\u0655\u0656\5\u0098M\2\u0656\u0657\7\u01c4\2\2\u0657\u0659\3\2\2\2\u0658"+
		"\u0654\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u066d\3\2\2\2\u065a\u066d\7\u0106"+
		"\2\2\u065b\u066d\7\u0110\2\2\u065c\u066d\7\u0111\2\2\u065d\u066d\7\u0112"+
		"\2\2\u065e\u066d\7\u0113\2\2\u065f\u066d\7\u0116\2\2\u0660\u0665\7\u011f"+
		"\2\2\u0661\u0662\7\u01c3\2\2\u0662\u0663\5\u0098M\2\u0663\u0664\7\u01c4"+
		"\2\2\u0664\u0666\3\2\2\2\u0665\u0661\3\2\2\2\u0665\u0666\3\2\2\2\u0666"+
		"\u066d\3\2\2\2\u0667\u0668\7\u0120\2\2\u0668\u0669\7\u01c3\2\2\u0669\u066a"+
		"\5\u0098M\2\u066a\u066b\7\u01c4\2\2\u066b\u066d\3\2\2\2\u066c\u05d0\3"+
		"\2\2\2\u066c\u05d3\3\2\2\2\u066c\u05da\3\2\2\2\u066c\u05e1\3\2\2\2\u066c"+
		"\u05e2\3\2\2\2\u066c\u05e3\3\2\2\2\u066c\u05ea\3\2\2\2\u066c\u05f1\3\2"+
		"\2\2\u066c\u05f2\3\2\2\2\u066c\u05f9\3\2\2\2\u066c\u0600\3\2\2\2\u066c"+
		"\u0607\3\2\2\2\u066c\u0608\3\2\2\2\u066c\u0609\3\2\2\2\u066c\u0610\3\2"+
		"\2\2\u066c\u0611\3\2\2\2\u066c\u0612\3\2\2\2\u066c\u0619\3\2\2\2\u066c"+
		"\u0620\3\2\2\2\u066c\u0621\3\2\2\2\u066c\u0622\3\2\2\2\u066c\u0623\3\2"+
		"\2\2\u066c\u0624\3\2\2\2\u066c\u0629\3\2\2\2\u066c\u062e\3\2\2\2\u066c"+
		"\u062f\3\2\2\2\u066c\u0638\3\2\2\2\u066c\u0641\3\2\2\2\u066c\u0642\3\2"+
		"\2\2\u066c\u0643\3\2\2\2\u066c\u064a\3\2\2\2\u066c\u064b\3\2\2\2\u066c"+
		"\u064c\3\2\2\2\u066c\u0653\3\2\2\2\u066c\u065a\3\2\2\2\u066c\u065b\3\2"+
		"\2\2\u066c\u065c\3\2\2\2\u066c\u065d\3\2\2\2\u066c\u065e\3\2\2\2\u066c"+
		"\u065f\3\2\2\2\u066c\u0660\3\2\2\2\u066c\u0667\3\2\2\2\u066de\3\2\2\2"+
		"\u066e\u066f\t\23\2\2\u066fg\3\2\2\2\u0670\u0672\7\u01ab\2\2\u0671\u0673"+
		"\7\n\2\2\u0672\u0671\3\2\2\2\u0672\u0673\3\2\2\2\u0673\u0674\3\2\2\2\u0674"+
		"\u0677\5d\63\2\u0675\u0676\7\u01b2\2\2\u0676\u0678\5\u0098M\2\u0677\u0675"+
		"\3\2\2\2\u0677\u0678\3\2\2\2\u0678i\3\2\2\2\u0679\u067b\7\u0100\2\2\u067a"+
		"\u067c\t\24\2\2\u067b\u067a\3\2\2\2\u067b\u067c\3\2\2\2\u067c\u067d\3"+
		"\2\2\2\u067d\u067e\7\u01c3\2\2\u067e\u0685\5l\67\2\u067f\u0681\7\u01c5"+
		"\2\2\u0680\u067f\3\2\2\2\u0680\u0681\3\2\2\2\u0681\u0682\3\2\2\2\u0682"+
		"\u0684\5l\67\2\u0683\u0680\3\2\2\2\u0684\u0687\3\2\2\2\u0685\u0683\3\2"+
		"\2\2\u0685\u0686\3\2\2\2\u0686\u0688\3\2\2\2\u0687\u0685\3\2\2\2\u0688"+
		"\u0689\7\u01c4\2\2\u0689k\3\2\2\2\u068a\u068d\5n8\2\u068b\u068d\5r:\2"+
		"\u068c\u068a\3\2\2\2\u068c\u068b\3\2\2\2\u068dm\3\2\2\2\u068e\u068f\5"+
		"\u011e\u0090\2\u068f\u0692\5d\63\2\u0690\u0691\7\u00cc\2\2\u0691\u0693"+
		"\7\u0098\2\2\u0692\u0690\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0695\3\2\2"+
		"\2\u0694\u0696\5\u0126\u0094\2\u0695\u0694\3\2\2\2\u0695\u0696\3\2\2\2"+
		"\u0696\u0699\3\2\2\2\u0697\u0698\7\u0089\2\2\u0698\u069a\5\u0098M\2\u0699"+
		"\u0697\3\2\2\2\u0699\u069a\3\2\2\2\u069a\u06b1\3\2\2\2\u069b\u069e\7N"+
		"\2\2\u069c\u069f\5\u0098M\2\u069d\u069f\7\16\2\2\u069e\u069c\3\2\2\2\u069e"+
		"\u069d\3\2\2\2\u069f\u06a2\3\2\2\2\u06a0\u06a2\7\u0082\2\2\u06a1\u069b"+
		"\3\2\2\2\u06a1\u06a0\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2\u06a4\3\2\2\2\u06a3"+
		"\u06a5\5p9\2\u06a4\u06a3\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06b2\3\2\2"+
		"\2\u06a6\u06a8\5p9\2\u06a7\u06a6\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u06af"+
		"\3\2\2\2\u06a9\u06ac\7N\2\2\u06aa\u06ad\5\u0098M\2\u06ab\u06ad\7\16\2"+
		"\2\u06ac\u06aa\3\2\2\2\u06ac\u06ab\3\2\2\2\u06ad\u06b0\3\2\2\2\u06ae\u06b0"+
		"\7\u0082\2\2\u06af\u06a9\3\2\2\2\u06af\u06ae\3\2\2\2\u06af\u06b0\3\2\2"+
		"\2\u06b0\u06b2\3\2\2\2\u06b1\u06a1\3\2\2\2\u06b1\u06a7\3\2\2\2\u06b2o"+
		"\3\2\2\2\u06b3\u06b4\7\60\2\2\u06b4\u06b6\5\u0132\u009a\2\u06b5\u06b3"+
		"\3\2\2\2\u06b5\u06b6\3\2\2\2\u06b6\u06d1\3\2\2\2\u06b7\u06b8\7\u00cc\2"+
		"\2\u06b8\u06c3\7\u0098\2\2\u06b9\u06c3\7\u0115\2\2\u06ba\u06bb\7\u00d7"+
		"\2\2\u06bb\u06bd\5\u0110\u0089\2\u06bc\u06be\5\u011e\u0090\2\u06bd\u06bc"+
		"\3\2\2\2\u06bd\u06be\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06c0\7\u00b7\2"+
		"\2\u06c0\u06c1\t\25\2\2\u06c1\u06c3\3\2\2\2\u06c2\u06b7\3\2\2\2\u06c2"+
		"\u06b9\3\2\2\2\u06c2\u06ba\3\2\2\2\u06c3\u06d2\3\2\2\2\u06c4\u06c5\7\u0089"+
		"\2\2\u06c5\u06d2\5\u0132\u009a\2\u06c6\u06c7\7\"\2\2\u06c7\u06c8\7\u01c3"+
		"\2\2\u06c8\u06c9\5\u00acW\2\u06c9\u06ca\7\u01c4\2\2\u06ca\u06d2\3\2\2"+
		"\2\u06cb\u06cc\7\u0095\2\2\u06cc\u06cd\7\u0115\2\2\u06cd\u06ce\7\u01c3"+
		"\2\2\u06ce\u06cf\5\u012e\u0098\2\u06cf\u06d0\7\u01c4\2\2\u06d0\u06d2\3"+
		"\2\2\2\u06d1\u06c2\3\2\2\2\u06d1\u06c4\3\2\2\2\u06d1\u06c6\3\2\2\2\u06d1"+
		"\u06cb\3\2\2\2\u06d2q\3\2\2\2\u06d3\u06d4\7\60\2\2\u06d4\u06d6\5\u0132"+
		"\u009a\2\u06d5\u06d3\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06f3\3\2\2\2\u06d7"+
		"\u06d8\7\u00cc\2\2\u06d8\u06db\7\u0098\2\2\u06d9\u06db\7\u0115\2\2\u06da"+
		"\u06d7\3\2\2\2\u06da\u06d9\3\2\2\2\u06db\u06dd\3\2\2\2\u06dc\u06de\5\u0124"+
		"\u0093\2\u06dd\u06dc\3\2\2\2\u06dd\u06de\3\2\2\2\u06de\u06df\3\2\2\2\u06df"+
		"\u06e0\7\u01c3\2\2\u06e0\u06e1\5\u011c\u008f\2\u06e1\u06e3\7\u01c4\2\2"+
		"\u06e2\u06e4\5t;\2\u06e3\u06e2\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e7"+
		"\3\2\2\2\u06e5\u06e6\7\u00b7\2\2\u06e6\u06e8\5\u0132\u009a\2\u06e7\u06e5"+
		"\3\2\2\2\u06e7\u06e8\3\2\2\2\u06e8\u06f4\3\2\2\2\u06e9\u06ed\7\"\2\2\u06ea"+
		"\u06eb\7\u00ac\2\2\u06eb\u06ec\7p\2\2\u06ec\u06ee\7\u00d9\2\2\u06ed\u06ea"+
		"\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef\u06f0\7\u01c3\2"+
		"\2\u06f0\u06f1\5\u00acW\2\u06f1\u06f2\7\u01c4\2\2\u06f2\u06f4\3\2\2\2"+
		"\u06f3\u06da\3\2\2\2\u06f3\u06e9\3\2\2\2\u06f4s\3\2\2\2\u06f5\u06f6\7"+
		"\u012a\2\2\u06f6\u06f7\7\u01c3\2\2\u06f7\u06fc\5\u008eH\2\u06f8\u06f9"+
		"\7\u01c5\2\2\u06f9\u06fb\5\u008eH\2\u06fa\u06f8\3\2\2\2\u06fb\u06fe\3"+
		"\2\2\2\u06fc\u06fa\3\2\2\2\u06fc\u06fd\3\2\2\2\u06fd\u06ff\3\2\2\2\u06fe"+
		"\u06fc\3\2\2\2\u06ff\u0700\7\u01c4\2\2\u0700u\3\2\2\2\u0701\u0702\7\u0126"+
		"\2\2\u0702\u0703\7\u00c0\2\2\u0703\u0707\7\u0105\2\2\u0704\u0706\5\4\3"+
		"\2\u0705\u0704\3\2\2\2\u0706\u0709\3\2\2\2\u0707\u0705\3\2\2\2\u0707\u0708"+
		"\3\2\2\2\u0708\u070a\3\2\2\2\u0709\u0707\3\2\2\2\u070a\u070b\7\u00da\2"+
		"\2\u070b\u070c\7\u01c6\2\2\u070cw\3\2\2\2\u070d\u070e\7\33\2\2\u070e\u070f"+
		"\5\u0112\u008a\2\u070f\u0718\7\u01c3\2\2\u0710\u0715\5\u0098M\2\u0711"+
		"\u0712\7\u01c5\2\2\u0712\u0714\5\u0098M\2\u0713\u0711\3\2\2\2\u0714\u0717"+
		"\3\2\2\2\u0715\u0713\3\2\2\2\u0715\u0716\3\2\2\2\u0716\u0719\3\2\2\2\u0717"+
		"\u0715\3\2\2\2\u0718\u0710\3\2\2\2\u0718\u0719\3\2\2\2\u0719\u071a\3\2"+
		"\2\2\u071a\u071b\7\u01c4\2\2\u071b\u071c\7\u01c6\2\2\u071cy\3\2\2\2\u071d"+
		"\u071e\7\33\2\2\u071e\u071f\7\u00ea\2\2\u071f\u0720\7\u01be\2\2\u0720"+
		"\u0721\7{\2\2\u0721\u0722\7\u01c3\2\2\u0722\u0723\5\u0098M\2\u0723\u0724"+
		"\7\u01c5\2\2\u0724\u0725\5\u0098M\2\u0725\u0726\7\u01c4\2\2\u0726\u0727"+
		"\7\u01c6\2\2\u0727\u0742\3\2\2\2\u0728\u0729\7\33\2\2\u0729\u072a\7\u00ea"+
		"\2\2\u072a\u072b\7\u01be\2\2\u072b\u072c\7\u0160\2\2\u072c\u072d\7\u01c3"+
		"\2\2\u072d\u072e\5\u0098M\2\u072e\u072f\7\u01c5\2\2\u072f\u0730\5\u0098"+
		"M\2\u0730\u0731\7\u01c4\2\2\u0731\u0732\7\u01c6\2\2\u0732\u0742\3\2\2"+
		"\2\u0733\u0734\7z\2\2\u0734\u0735\5|?\2\u0735\u0738\7\u00b7\2\2\u0736"+
		"\u0739\5\u0110\u0089\2\u0737\u0739\5\u0114\u008b\2\u0738\u0736\3\2\2\2"+
		"\u0738\u0737\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u073d\7\u0107\2\2\u073b"+
		"\u073e\7\u00d0\2\2\u073c\u073e\5\u011c\u008f\2\u073d\u073b\3\2\2\2\u073d"+
		"\u073c\3\2\2\2\u073e\u073f\3\2\2\2\u073f\u0740\7\u01c6\2\2\u0740\u0742"+
		"\3\2\2\2\u0741\u071d\3\2\2\2\u0741\u0728\3\2\2\2\u0741\u0733\3\2\2\2\u0742"+
		"{\3\2\2\2\u0743\u0748\5~@\2\u0744\u0745\7\u01c5\2\2\u0745\u0747\5~@\2"+
		"\u0746\u0744\3\2\2\2\u0747\u074a\3\2\2\2\u0748\u0746\3\2\2\2\u0748\u0749"+
		"\3\2\2\2\u0749}\3\2\2\2\u074a\u0748\3\2\2\2\u074b\u074c\t\26\2\2\u074c"+
		"\177\3\2\2\2\u074d\u074e\7\33\2\2\u074e\u074f\7\u00ea\2\2\u074f\u0750"+
		"\7\u01be\2\2\u0750\u0751\7\67\2\2\u0751\u0752\7\u01c3\2\2\u0752\u0753"+
		"\5\u0098M\2\u0753\u0754\7\u01c4\2\2\u0754\u0755\7\u01c6\2\2\u0755\u0756"+
		"\5\u0082B\2\u0756\u0081\3\2\2\2\u0757\u0758\7\33\2\2\u0758\u0759\7\u00ea"+
		"\2\2\u0759\u075a\7\u01be\2\2\u075a\u075b\78\2\2\u075b\u075c\7\u01c3\2"+
		"\2\u075c\u075d\5\u0098M\2\u075d\u075e\7\u01c5\2\2\u075e\u075f\5\u0098"+
		"M\2\u075f\u0760\7\u01c5\2\2\u0760\u0761\5\u0098M\2\u0761\u0762\7\u01c5"+
		"\2\2\u0762\u0763\5\u0098M\2\u0763\u0764\7\u01c4\2\2\u0764\u0766\7\u01c6"+
		"\2\2\u0765\u0767\5\u0084C\2\u0766\u0765\3\2\2\2\u0767\u0768\3\2\2\2\u0768"+
		"\u0766\3\2\2\2\u0768\u0769\3\2\2\2\u0769\u0083\3\2\2\2\u076a\u076b\7\33"+
		"\2\2\u076b\u076c\7\u00ea\2\2\u076c\u076d\7\u01be\2\2\u076d\u076e\79\2"+
		"\2\u076e\u076f\7\u01c3\2\2\u076f\u0770\5\u0098M\2\u0770\u0771\7\u01c5"+
		"\2\2\u0771\u0772\5\u0098M\2\u0772\u0773\7\u01c4\2\2\u0773\u0774\7\u01c6"+
		"\2\2\u0774\u0085\3\2\2\2\u0775\u0776\7,\2\2\u0776\u0777\7\u00b7\2\2\u0777"+
		"\u0778\5\u008cG\2\u0778\u0779\7\u0096\2\2\u0779\u077b\7\u01a8\2\2\u077a"+
		"\u077c\7\u01c6\2\2\u077b\u077a\3\2\2\2\u077b\u077c\3\2\2\2\u077c\u0087"+
		"\3\2\2\2\u077d\u077e\7\u00a3\2\2\u077e\u0781\5\u0098M\2\u077f\u0780\7"+
		"\u01c5\2\2\u0780\u0782\5\u0098M\2\u0781\u077f\3\2\2\2\u0781\u0782\3\2"+
		"\2\2\u0782\u0785\3\2\2\2\u0783\u0784\7\u0198\2\2\u0784\u0786\t\27\2\2"+
		"\u0785\u0783\3\2\2\2\u0785\u0786\3\2\2\2\u0786\u079f\3\2\2\2\u0787\u0799"+
		"\7\u0107\2\2\u0788\u079a\7\61\2\2\u0789\u0793\7$\2\2\u078a\u078b\7p\2"+
		"\2\u078b\u078c\7\u01c3\2\2\u078c\u078d\7/\2\2\u078d\u078f\5\u0132\u009a"+
		"\2\u078e\u0790\7\u0088\2\2\u078f\u078e\3\2\2\2\u078f\u0790\3\2\2\2\u0790"+
		"\u0794\3\2\2\2\u0791\u0792\7\5\2\2\u0792\u0794\7\u01c4\2\2\u0793\u078a"+
		"\3\2\2\2\u0793\u0791\3\2\2\2\u0793\u0794\3\2\2\2\u0794\u079a\3\2\2\2\u0795"+
		"\u0797\t\30\2\2\u0796\u0795\3\2\2\2\u0796\u0797\3\2\2\2\u0797\u0798\3"+
		"\2\2\2\u0798\u079a\7\u00a1\2\2\u0799\u0788\3\2\2\2\u0799\u0789\3\2\2\2"+
		"\u0799\u0796\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u079d\3\2\2\2\u079b\u079c"+
		"\7J\2\2\u079c\u079e\7\u016f\2\2\u079d\u079b\3\2\2\2\u079d\u079e\3\2\2"+
		"\2\u079e\u07a0\3\2\2\2\u079f\u0787\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u07a2"+
		"\3\2\2\2\u07a1\u07a3\7\u01c6\2\2\u07a2\u07a1\3\2\2\2\u07a2\u07a3\3\2\2"+
		"\2\u07a3\u0089\3\2\2\2\u07a4\u07a5\7\u00d8\2\2\u07a5\u07a6\7\u01c3\2\2"+
		"\u07a6\u07a7\5\u0098M\2\u07a7\u07a8\7\u01c5\2\2\u07a8\u07a9\5\u0098M\2"+
		"\u07a9\u07aa\7\u01c5\2\2\u07aa\u07ab\5\u0098M\2\u07ab\u07ad\7\u01c4\2"+
		"\2\u07ac\u07ae\7\u01c6\2\2\u07ad\u07ac\3\2\2\2\u07ad\u07ae\3\2\2\2\u07ae"+
		"\u008b\3\2\2\2\u07af\u07b0\7+\2\2\u07b0\u07b1\5\u0110\u0089\2\u07b1\u07b2"+
		"\7\u01be\2\2\u07b2\u07b3\5\u011e\u0090\2\u07b3\u07c5\3\2\2\2\u07b4\u07b5"+
		"\7\u008c\2\2\u07b5\u07c5\5\u00eex\2\u07b6\u07b7\7\u00cc\2\2\u07b7\u07b8"+
		"\7\u0098\2\2\u07b8\u07b9\7\u00b7\2\2\u07b9\u07c5\5\u0110\u0089\2\u07ba"+
		"\u07bb\7\u00cf\2\2\u07bb\u07c5\5\u0112\u008a\2\u07bc\u07bd\7\u00e3\2\2"+
		"\u07bd\u07c5\5\u0132\u009a\2\u07be\u07bf\7\u0100\2\2\u07bf\u07c5\5\u0110"+
		"\u0089\2\u07c0\u07c1\7\u011c\2\2\u07c1\u07c5\5\u0132\u009a\2\u07c2\u07c3"+
		"\7\u0123\2\2\u07c3\u07c5\5\u0114\u008b\2\u07c4\u07af\3\2\2\2\u07c4\u07b4"+
		"\3\2\2\2\u07c4\u07b6\3\2\2\2\u07c4\u07ba\3\2\2\2\u07c4\u07bc\3\2\2\2\u07c4"+
		"\u07be\3\2\2\2\u07c4\u07c0\3\2\2\2\u07c4\u07c2\3\2\2\2\u07c5\u008d\3\2"+
		"\2\2\u07c6\u07c7\5\u0134\u009b\2\u07c7\u07cb\7\u01b2\2\2\u07c8\u07cc\5"+
		"\u0134\u009b\2\u07c9\u07cc\5\u0122\u0092\2\u07ca\u07cc\7\u01ac\2\2\u07cb"+
		"\u07c8\3\2\2\2\u07cb\u07c9\3\2\2\2\u07cb\u07ca\3\2\2\2\u07cc\u008f\3\2"+
		"\2\2\u07cd\u07ce\7L\2\2\u07ce\u07cf\5\u0120\u0091\2\u07cf\u07d1\7@\2\2"+
		"\u07d0\u07d2\7\u01c6\2\2\u07d1\u07d0\3\2\2\2\u07d1\u07d2\3\2\2\2\u07d2"+
		"\u07fb\3\2\2\2\u07d3\u07d4\7L\2\2\u07d4\u07d6\5\u0120\u0091\2\u07d5\u07d7"+
		"\7\u0155\2\2\u07d6\u07d5\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07d9\3\2\2"+
		"\2\u07d8\u07da\7\u0188\2\2\u07d9\u07d8\3\2\2\2\u07d9\u07da\3\2\2\2\u07da"+
		"\u07db\3\2\2\2\u07db\u07dc\7@\2\2\u07dc\u07dd\7p\2\2\u07dd\u07e6\5\22"+
		"\n\2\u07de\u07e4\7p\2\2\u07df\u07e0\7\u00d4\2\2\u07e0\u07e5\7\u016f\2"+
		"\2\u07e1\u07e5\7\u0119\2\2\u07e2\u07e3\7\u00b4\2\2\u07e3\u07e5\5\u011c"+
		"\u008f\2\u07e4\u07df\3\2\2\2\u07e4\u07e1\3\2\2\2\u07e4\u07e2\3\2\2\2\u07e5"+
		"\u07e7\3\2\2\2\u07e6\u07de\3\2\2\2\u07e6\u07e7\3\2\2\2\u07e7\u07e9\3\2"+
		"\2\2\u07e8\u07ea\7\u01c6\2\2\u07e9\u07e8\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea"+
		"\u07fb\3\2\2\2\u07eb\u07ec\7L\2\2\u07ec\u07ed\5\u0120\u0091\2\u07ed\u07ee"+
		"\7@\2\2\u07ee\u07f5\5\u0092J\2\u07ef\u07f0\7p\2\2\u07f0\u07f3\7\u0119"+
		"\2\2\u07f1\u07f2\7\u00b4\2\2\u07f2\u07f4\5\u011c\u008f\2\u07f3\u07f1\3"+
		"\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f6\3\2\2\2\u07f5\u07ef\3\2\2\2\u07f5"+
		"\u07f6\3\2\2\2\u07f6\u07f8\3\2\2\2\u07f7\u07f9\7\u01c6\2\2\u07f8\u07f7"+
		"\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9\u07fb\3\2\2\2\u07fa\u07cd\3\2\2\2\u07fa"+
		"\u07d3\3\2\2\2\u07fa\u07eb\3\2\2\2\u07fb\u0091\3\2\2\2\u07fc\u07fe\t\31"+
		"\2\2\u07fd\u07fc\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe\u0800\3\2\2\2\u07ff"+
		"\u0801\t\32\2\2\u0800\u07ff\3\2\2\2\u0800\u0801\3\2\2\2\u0801\u0803\3"+
		"\2\2\2\u0802\u0804\t\33\2\2\u0803\u0802\3\2\2\2\u0803\u0804\3\2\2\2\u0804"+
		"\u0806\3\2\2\2\u0805\u0807\t\34\2\2\u0806\u0805\3\2\2\2\u0806\u0807\3"+
		"\2\2\2\u0807\u0809\3\2\2\2\u0808\u080a\7\u0199\2\2\u0809\u0808\3\2\2\2"+
		"\u0809\u080a\3\2\2\2\u080a\u080b\3\2\2\2\u080b\u080c\7p\2\2\u080c\u080d"+
		"\5\22\n\2\u080d\u0093\3\2\2\2\u080e\u081a\7k\2\2\u080f\u0818\7\u0167\2"+
		"\2\u0810\u0818\7\u0178\2\2\u0811\u0818\7\u014c\2\2\u0812\u0818\7\u015a"+
		"\2\2\u0813\u0814\7\u012e\2\2\u0814\u0818\5\u0098M\2\u0815\u0816\7\u017e"+
		"\2\2\u0816\u0818\5\u0098M\2\u0817\u080f\3\2\2\2\u0817\u0810\3\2\2\2\u0817"+
		"\u0811\3\2\2\2\u0817\u0812\3\2\2\2\u0817\u0813\3\2\2\2\u0817\u0815\3\2"+
		"\2\2\u0817\u0818\3\2\2\2\u0818\u0819\3\2\2\2\u0819\u081b\7v\2\2\u081a"+
		"\u0817\3\2\2\2\u081a\u081b\3\2\2\2\u081b\u081d\3\2\2\2\u081c\u081e\7\u0150"+
		"\2\2\u081d\u081c\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u081f\3\2\2\2\u081f"+
		"\u0829\5\u0120\u0091\2\u0820\u0821\7\u0093\2\2\u0821\u0826\7\u01ab\2\2"+
		"\u0822\u0823\7\u01c5\2\2\u0823\u0825\7\u01ab\2\2\u0824\u0822\3\2\2\2\u0825"+
		"\u0828\3\2\2\2\u0826\u0824\3\2\2\2\u0826\u0827\3\2\2\2\u0827";
	private static final String _serializedATNSegment1 =
		"\u082a\3\2\2\2\u0828\u0826\3\2\2\2\u0829\u0820\3\2\2\2\u0829\u082a\3\2"+
		"\2\2\u082a\u082c\3\2\2\2\u082b\u082d\7\u01c6\2\2\u082c\u082b\3\2\2\2\u082c"+
		"\u082d\3\2\2\2\u082d\u0095\3\2\2\2\u082e\u082f\7\u00f1\2\2\u082f\u0834"+
		"\5\u0132\u009a\2\u0830\u0835\5\u0132\u009a\2\u0831\u0835\5\u012c\u0097"+
		"\2\u0832\u0835\7\u01ab\2\2\u0833\u0835\5\u0122\u0092\2\u0834\u0830\3\2"+
		"\2\2\u0834\u0831\3\2\2\2\u0834\u0832\3\2\2\2\u0834\u0833\3\2\2\2\u0835"+
		"\u0837\3\2\2\2\u0836\u0838\7\u01c6\2\2\u0837\u0836\3\2\2\2\u0837\u0838"+
		"\3\2\2\2\u0838\u0859\3\2\2\2\u0839\u083a\7\u00f1\2\2\u083a\u083b\7\u010a"+
		"\2\2\u083b\u083c\7\u0157\2\2\u083c\u0845\7\u015b\2\2\u083d\u083e\7\u00d4"+
		"\2\2\u083e\u0846\7\u019b\2\2\u083f\u0840\7\u00d4\2\2\u0840\u0846\7\u0139"+
		"\2\2\u0841\u0842\7\u0180\2\2\u0842\u0846\7\u00d4\2\2\u0843\u0846\7\u018c"+
		"\2\2\u0844\u0846\7\u018b\2\2\u0845\u083d\3\2\2\2\u0845\u083f\3\2\2\2\u0845"+
		"\u0841\3\2\2\2\u0845\u0843\3\2\2\2\u0845\u0844\3\2\2\2\u0846\u0848\3\2"+
		"\2\2\u0847\u0849\7\u01c6\2\2\u0848\u0847\3\2\2\2\u0848\u0849\3\2\2\2\u0849"+
		"\u0859\3\2\2\2\u084a\u084c\7\u00f1\2\2\u084b\u084d\7g\2\2\u084c\u084b"+
		"\3\2\2\2\u084c\u084d\3\2\2\2\u084d\u084f\3\2\2\2\u084e\u0850\7\u0102\2"+
		"\2\u084f\u084e\3\2\2\2\u084f\u0850\3\2\2\2\u0850\u0851\3\2\2\2\u0851\u0852"+
		"\7\u00bd\2\2\u0852\u0853\5\u0098M\2\u0853\u0854\7\u01b2\2\2\u0854\u0856"+
		"\5\u0098M\2\u0855\u0857\7\u01c6\2\2\u0856\u0855\3\2\2\2\u0856\u0857\3"+
		"\2\2\2\u0857\u0859\3\2\2\2\u0858\u082e\3\2\2\2\u0858\u0839\3\2\2\2\u0858"+
		"\u084a\3\2\2\2\u0859\u0097\3\2\2\2\u085a\u085b\bM\1\2\u085b\u085c\7\u01cd"+
		"\2\2\u085c\u086f\5\u0098M\2\u085d\u085e\t\35\2\2\u085e\u086f\5\u0098M"+
		"\2\u085f\u086f\7N\2\2\u0860\u086f\7\u00b1\2\2\u0861\u086f\7\u01ab\2\2"+
		"\u0862\u086f\5\u012c\u0097\2\u0863\u086f\5\u00e2r\2\u0864\u086f\5\u00fa"+
		"~\2\u0865\u086f\5\u011a\u008e\2\u0866\u0867\7\u01c3\2\2\u0867\u0868\5"+
		"\u0098M\2\u0868\u0869\7\u01c4\2\2\u0869\u086f\3\2\2\2\u086a\u086b\7\u01c3"+
		"\2\2\u086b\u086c\5\u009cO\2\u086c\u086d\7\u01c4\2\2\u086d\u086f\3\2\2"+
		"\2\u086e\u085a\3\2\2\2\u086e\u085d\3\2\2\2\u086e\u085f\3\2\2\2\u086e\u0860"+
		"\3\2\2\2\u086e\u0861\3\2\2\2\u086e\u0862\3\2\2\2\u086e\u0863\3\2\2\2\u086e"+
		"\u0864\3\2\2\2\u086e\u0865\3\2\2\2\u086e\u0866\3\2\2\2\u086e\u086a\3\2"+
		"\2\2\u086f\u0883\3\2\2\2\u0870\u0871\6M\2\3\u0871\u0872\7\u01ce\2\2\u0872"+
		"\u0873\7\u01ce\2\2\u0873\u0882\5\u0098M\2\u0874\u0875\6M\3\3\u0875\u0876"+
		"\t\36\2\2\u0876\u0882\5\u0098M\2\u0877\u0878\6M\4\3\u0878\u0879\t\37\2"+
		"\2\u0879\u0882\5\u0098M\2\u087a\u087b\6M\5\3\u087b\u087c\7*\2\2\u087c"+
		"\u0882\5\u0132\u009a\2\u087d\u087e\6M\6\3\u087e\u087f\5\u0136\u009c\2"+
		"\u087f\u0880\5\u0098M\2\u0880\u0882\3\2\2\2\u0881\u0870\3\2\2\2\u0881"+
		"\u0874\3\2\2\2\u0881\u0877\3\2\2\2\u0881\u087a\3\2\2\2\u0881\u087d\3\2"+
		"\2\2\u0882\u0885\3\2\2\2\u0883\u0881\3\2\2\2\u0883\u0884\3\2\2\2\u0884"+
		"\u0099\3\2\2\2\u0885\u0883\3\2\2\2\u0886\u0890\7\u00b1\2\2\u0887\u0890"+
		"\5\u012c\u0097\2\u0888\u0890\5\u00e2r\2\u0889\u0890\7\u01ab\2\2\u088a"+
		"\u088b\7\u01c3\2\2\u088b\u088c\5\u009aN\2\u088c\u088d\7\u01c4\2\2\u088d"+
		"\u0890\3\2\2\2\u088e\u0890\7\16\2\2\u088f\u0886\3\2\2\2\u088f\u0887\3"+
		"\2\2\2\u088f\u0888\3\2\2\2\u088f\u0889\3\2\2\2\u088f\u088a\3\2\2\2\u088f"+
		"\u088e\3\2\2\2\u0890\u009b\3\2\2\2\u0891\u0892\5\22\n\2\u0892\u009d\3"+
		"\2\2\2\u0893\u0894\5\u00b8]\2\u0894\u009f\3\2\2\2\u0895\u0898\7\u012a"+
		"\2\2\u0896\u0897\7\u01a3\2\2\u0897\u0899\7\u01c5\2\2\u0898\u0896\3\2\2"+
		"\2\u0898\u0899\3\2\2\2\u0899\u089a\3\2\2\2\u089a\u089f\5\u00a2R\2\u089b"+
		"\u089c\7\u01c5\2\2\u089c\u089e\5\u00a2R\2\u089d\u089b\3\2\2\2\u089e\u08a1"+
		"\3\2\2\2\u089f\u089d\3\2\2\2\u089f\u08a0\3\2\2\2\u08a0\u00a1\3\2\2\2\u08a1"+
		"\u089f\3\2\2\2\u08a2\u08a7\5\u0132\u009a\2\u08a3\u08a4\7\u01c3\2\2\u08a4"+
		"\u08a5\5\u011c\u008f\2\u08a5\u08a6\7\u01c4\2\2\u08a6\u08a8\3\2\2\2\u08a7"+
		"\u08a3\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08a9\3\2\2\2\u08a9\u08aa\7\n"+
		"\2\2\u08aa\u08ab\7\u01c3\2\2\u08ab\u08ac\5\22\n\2\u08ac\u08ad\7\u01c4"+
		"\2\2\u08ad\u00a3\3\2\2\2\u08ae\u08b1\5\u011a\u008e\2\u08af\u08b1\7\u01ab"+
		"\2\2\u08b0\u08ae\3\2\2\2\u08b0\u08af\3\2\2\2\u08b1\u08b4\3\2\2\2\u08b2"+
		"\u08b5\7\u01b2\2\2\u08b3\u08b5\5\u0138\u009d\2\u08b4\u08b2\3\2\2\2\u08b4"+
		"\u08b3\3\2\2\2\u08b5\u08b6\3\2\2\2\u08b6\u08bf\5\u0098M\2\u08b7\u08b8"+
		"\5\u0132\u009a\2\u08b8\u08b9\7\u01be\2\2\u08b9\u08ba\5\u0132\u009a\2\u08ba"+
		"\u08bb\7\u01c3\2\2\u08bb\u08bc\5\u00f8}\2\u08bc\u08bd\7\u01c4\2\2\u08bd"+
		"\u08bf\3\2\2\2\u08be\u08b0\3\2\2\2\u08be\u08b7\3\2\2\2\u08bf\u00a5\3\2"+
		"\2\2\u08c0\u08c4\5\u00a8U\2\u08c1\u08c3\5\u00a8U\2\u08c2\u08c1\3\2\2\2"+
		"\u08c3\u08c6\3\2\2\2\u08c4\u08c2\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u00a7"+
		"\3\2\2\2\u08c6\u08c4\3\2\2\2\u08c7\u08ca\5\4\3\2\u08c8\u08ca\5\u0098M"+
		"\2\u08c9\u08c7\3\2\2\2\u08c9\u08c8\3\2\2\2\u08ca\u00a9\3\2\2\2\u08cb\u08d0"+
		"\5\u00acW\2\u08cc\u08cd\7\u01c5\2\2\u08cd\u08cf\5\u00acW\2\u08ce\u08cc"+
		"\3\2\2\2\u08cf\u08d2\3\2\2\2\u08d0\u08ce\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1"+
		"\u00ab\3\2\2\2\u08d2\u08d0\3\2\2\2\u08d3\u08d8\5\u00aeX\2\u08d4\u08d5"+
		"\7\7\2\2\u08d5\u08d7\5\u00aeX\2\u08d6\u08d4\3\2\2\2\u08d7\u08da\3\2\2"+
		"\2\u08d8\u08d6\3\2\2\2\u08d8\u08d9\3\2\2\2\u08d9\u00ad\3\2\2\2\u08da\u08d8"+
		"\3\2\2\2\u08db\u08e0\5\u00b0Y\2\u08dc\u08dd\7\u00be\2\2\u08dd\u08df\5"+
		"\u00b0Y\2\u08de\u08dc\3\2\2\2\u08df\u08e2\3\2\2\2\u08e0\u08de\3\2\2\2"+
		"\u08e0\u08e1\3\2\2\2\u08e1\u00af\3\2\2\2\u08e2\u08e0\3\2\2\2\u08e3\u08e5"+
		"\7\u00ac\2\2\u08e4\u08e3\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08e6\3\2\2"+
		"\2\u08e6\u08e7\5\u00b2Z\2\u08e7\u00b1\3\2\2\2\u08e8\u08e9\7h\2\2\u08e9"+
		"\u08ea\7\u01c3\2\2\u08ea\u08eb\5\u009cO\2\u08eb\u08ec\7\u01c4\2\2\u08ec"+
		"\u0925\3\2\2\2\u08ed\u08ee\5\u0098M\2\u08ee\u08ef\5\u0136\u009c\2\u08ef"+
		"\u08f0\5\u0098M\2\u08f0\u0925\3\2\2\2\u08f1\u08f2\5\u0098M\2\u08f2\u08f3"+
		"\5\u0136\u009c\2\u08f3\u08f4\t \2\2\u08f4\u08f5\7\u01c3\2\2\u08f5\u08f6"+
		"\5\u009cO\2\u08f6\u08f7\7\u01c4\2\2\u08f7\u0925\3\2\2\2\u08f8\u08fa\5"+
		"\u0098M\2\u08f9\u08fb\7\u00ac\2\2\u08fa\u08f9\3\2\2\2\u08fa\u08fb\3\2"+
		"\2\2\u08fb\u08fc\3\2\2\2\u08fc\u08fd\7\21\2\2\u08fd\u08fe\5\u0098M\2\u08fe"+
		"\u08ff\7\7\2\2\u08ff\u0900\5\u0098M\2\u0900\u0925\3\2\2\2\u0901\u0903"+
		"\5\u0098M\2\u0902\u0904\7\u00ac\2\2\u0903\u0902\3\2\2\2\u0903\u0904\3"+
		"\2\2\2\u0904\u0905\3\2\2\2\u0905\u0906\7\u0089\2\2\u0906\u0909\7\u01c3"+
		"\2\2\u0907\u090a\5\u009cO\2\u0908\u090a\5\u00f8}\2\u0909\u0907\3\2\2\2"+
		"\u0909\u0908\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u090c\7\u01c4\2\2\u090c"+
		"\u0925\3\2\2\2\u090d\u090f\5\u0098M\2\u090e\u0910\7\u00ac\2\2\u090f\u090e"+
		"\3\2\2\2\u090f\u0910\3\2\2\2\u0910\u0911\3\2\2\2\u0911\u0912\7\u009c\2"+
		"\2\u0912\u0915\5\u0098M\2\u0913\u0914\7a\2\2\u0914\u0916\5\u0098M\2\u0915"+
		"\u0913\3\2\2\2\u0915\u0916\3\2\2\2\u0916\u0925\3\2\2\2\u0917\u0918\5\u0098"+
		"M\2\u0918\u0919\7\u0096\2\2\u0919\u091a\5\u0126\u0094\2\u091a\u0925\3"+
		"\2\2\2\u091b\u091c\5\u0098M\2\u091c\u091d\7\u01c3\2\2\u091d\u091e\5\u0098"+
		"M\2\u091e\u091f\7\u01c4\2\2\u091f\u0925\3\2\2\2\u0920\u0921\7\u01c3\2"+
		"\2\u0921\u0922\5\u00acW\2\u0922\u0923\7\u01c4\2\2\u0923\u0925\3\2\2\2"+
		"\u0924\u08e8\3\2\2\2\u0924\u08ed\3\2\2\2\u0924\u08f1\3\2\2\2\u0924\u08f8"+
		"\3\2\2\2\u0924\u0901\3\2\2\2\u0924\u090d\3\2\2\2\u0924\u0917\3\2\2\2\u0924"+
		"\u091b\3\2\2\2\u0924\u0920\3\2\2\2\u0925\u00b3\3\2\2\2\u0926\u092c\5\u00b8"+
		"]\2\u0927\u0928\7\u01c3\2\2\u0928\u0929\5\u00b4[\2\u0929\u092a\7\u01c4"+
		"\2\2\u092a\u092c\3\2\2\2\u092b\u0926\3\2\2\2\u092b\u0927\3\2\2\2\u092c"+
		"\u0930\3\2\2\2\u092d\u092f\5\u00b6\\\2\u092e\u092d\3\2\2\2\u092f\u0932"+
		"\3\2\2\2\u0930\u092e\3\2\2\2\u0930\u0931\3\2\2\2\u0931\u00b5\3\2\2\2\u0932"+
		"\u0930\3\2\2\2\u0933\u0935\7\u0114\2\2\u0934\u0936\7\5\2\2\u0935\u0934"+
		"\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u093a\3\2\2\2\u0937\u093a\7c\2\2\u0938"+
		"\u093a\7\u0092\2\2\u0939\u0933\3\2\2\2\u0939\u0937\3\2\2\2\u0939\u0938"+
		"\3\2\2\2\u093a\u0944\3\2\2\2\u093b\u0945\5\u00b8]\2\u093c\u093d\7\u01c3"+
		"\2\2\u093d\u093e\5\u00b4[\2\u093e\u093f\7\u01c4\2\2\u093f\u0941\3\2\2"+
		"\2\u0940\u093c\3\2\2\2\u0941\u0942\3\2\2\2\u0942\u0940\3\2\2\2\u0942\u0943"+
		"\3\2\2\2\u0943\u0945\3\2\2\2\u0944\u093b\3\2\2\2\u0944\u0940\3\2\2\2\u0945"+
		"\u00b7\3\2\2\2\u0946\u0948\7\u00ec\2\2\u0947\u0949\t!\2\2\u0948\u0947"+
		"\3\2\2\2\u0948\u0949\3\2\2\2\u0949\u0953\3\2\2\2\u094a\u094b\7\u0108\2"+
		"\2\u094b\u094d\5\u0098M\2\u094c\u094e\7\u00c7\2\2\u094d\u094c\3\2\2\2"+
		"\u094d\u094e\3\2\2\2\u094e\u0951\3\2\2\2\u094f\u0950\7\u012a\2\2\u0950"+
		"\u0952\7\u0194\2\2\u0951\u094f\3\2\2\2\u0951\u0952\3\2\2\2\u0952\u0954"+
		"\3\2\2\2\u0953\u094a\3\2\2\2\u0953\u0954\3\2\2\2\u0954\u0955\3\2\2\2\u0955"+
		"\u0958\5\u00caf\2\u0956\u0957\7\u0093\2\2\u0957\u0959\5\u0110\u0089\2"+
		"\u0958\u0956\3\2\2\2\u0958\u0959\3\2\2\2\u0959\u0963\3\2\2\2\u095a\u095b"+
		"\7v\2\2\u095b\u0960\5\u00d0i\2\u095c\u095d\7\u01c5\2\2\u095d\u095f\5\u00d0"+
		"i\2\u095e\u095c\3\2\2\2\u095f\u0962\3\2\2\2\u0960\u095e\3\2\2\2\u0960"+
		"\u0961\3\2\2\2\u0961\u0964\3\2\2\2\u0962\u0960\3\2\2\2\u0963\u095a\3\2"+
		"\2\2\u0963\u0964\3\2\2\2\u0964\u0967\3\2\2\2\u0965\u0966\7\u0127\2\2\u0966"+
		"\u0968\5\u00acW\2\u0967\u0965\3\2\2\2\u0967\u0968\3\2\2\2\u0968\u0973"+
		"\3\2\2\2\u0969\u096a\7|\2\2\u096a\u096b\7\32\2\2\u096b\u0970\5\u00c2b"+
		"\2\u096c\u096d\7\u01c5\2\2\u096d\u096f\5\u00c2b\2\u096e\u096c\3\2\2\2"+
		"\u096f\u0972\3\2\2\2\u0970\u096e\3\2\2\2\u0970\u0971\3\2\2\2\u0971\u0974"+
		"\3\2\2\2\u0972\u0970\3\2\2\2\u0973\u0969\3\2\2\2\u0973\u0974\3\2\2\2\u0974"+
		"\u0977\3\2\2\2\u0975\u0976\7}\2\2\u0976\u0978\5\u00acW\2\u0977\u0975\3"+
		"\2\2\2\u0977\u0978\3\2\2\2\u0978\u00b9\3\2\2\2\u0979\u097a\7\u00bf\2\2"+
		"\u097a\u097b\7\32\2\2\u097b\u0980\5\u00c0a\2\u097c\u097d\7\u01c5\2\2\u097d"+
		"\u097f\5\u00c0a\2\u097e\u097c\3\2\2\2\u097f\u0982\3\2\2\2\u0980\u097e"+
		"\3\2\2\2\u0980\u0981\3\2\2\2\u0981\u098e\3\2\2\2\u0982\u0980\3\2\2\2\u0983"+
		"\u0984\7\u016e\2\2\u0984\u0985\5\u0098M\2\u0985\u098c\t\"\2\2\u0986\u0987"+
		"\7k\2\2\u0987\u0988\t#\2\2\u0988\u0989\5\u0098M\2\u0989\u098a\t\"\2\2"+
		"\u098a\u098b\7\u016f\2\2\u098b\u098d\3\2\2\2\u098c\u0986\3\2\2\2\u098c"+
		"\u098d\3\2\2\2\u098d\u098f\3\2\2\2\u098e\u0983\3\2\2\2\u098e\u098f\3\2"+
		"\2\2\u098f\u00bb\3\2\2\2\u0990\u0991\7p\2\2\u0991\u09a4\7\30\2\2\u0992"+
		"\u0993\7p\2\2\u0993\u0994\7\u01a2\2\2\u0994\u0996\7\u0130\2\2\u0995\u0997"+
		"\5\u00be`\2\u0996\u0995\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u09a4\3\2\2"+
		"\2\u0998\u0999\7p\2\2\u0999\u099a\7\u01a2\2\2\u099a\u099e\7\u0176\2\2"+
		"\u099b\u099c\7\u01c3\2\2\u099c\u099d\7\u01ae\2\2\u099d\u099f\7\u01c4\2"+
		"\2\u099e\u099b\3\2\2\2\u099e\u099f\3\2\2\2\u099f\u09a1\3\2\2\2\u09a0\u09a2"+
		"\5\u00be`\2\u09a1\u09a0\3\2\2\2\u09a1\u09a2\3\2\2\2\u09a2\u09a4\3\2\2"+
		"\2\u09a3\u0990\3\2\2\2\u09a3\u0992\3\2\2\2\u09a3\u0998\3\2\2\2\u09a4\u00bd"+
		"\3\2\2\2\u09a5\u09aa\7\u01c5\2\2\u09a6\u09a7\7\u01af\2\2\u09a7\u09ab\7"+
		"\u0132\2\2\u09a8\u09ab\7\u0198\2\2\u09a9\u09ab\7\u0181\2\2\u09aa\u09a6"+
		"\3\2\2\2\u09aa\u09a8\3\2\2\2\u09aa\u09a9\3\2\2\2\u09ab\u00bf\3\2\2\2\u09ac"+
		"\u09ae\5\u0098M\2\u09ad\u09af\t$\2\2\u09ae\u09ad\3\2\2\2\u09ae\u09af\3"+
		"\2\2\2\u09af\u00c1\3\2\2\2\u09b0\u09b1\5\u0098M\2\u09b1\u00c3\3\2\2\2"+
		"\u09b2\u09b3\7\u00bd\2\2\u09b3\u09b4\7\u01c3\2\2\u09b4\u09b9\5\u00c6d"+
		"\2\u09b5\u09b6\7\u01c5\2\2\u09b6\u09b8\5\u00c6d\2\u09b7\u09b5\3\2\2\2"+
		"\u09b8\u09bb\3\2\2\2\u09b9\u09b7\3\2\2\2\u09b9\u09ba\3\2\2\2\u09ba\u09bc"+
		"\3\2\2\2\u09bb\u09b9\3\2\2\2\u09bc\u09bd\7\u01c4\2\2\u09bd\u00c5\3\2\2"+
		"\2\u09be\u09bf\7\u0149\2\2\u09bf\u09d7\7\u01ac\2\2\u09c0\u09c1\t%\2\2"+
		"\u09c1\u09d7\7|\2\2\u09c2\u09c3\t&\2\2\u09c3\u09d7\7\u0114\2\2\u09c4\u09c5"+
		"\7\u0158\2\2\u09c5\u09d7\7\u00c9\2\2\u09c6\u09c7\7\u0171\2\2\u09c7\u09c8"+
		"\7p\2\2\u09c8\u09c9\7\u01c3\2\2\u09c9\u09ce\5\u00c8e\2\u09ca\u09cb\7\u01c5"+
		"\2\2\u09cb\u09cd\5\u00c8e\2\u09cc\u09ca\3\2\2\2\u09cd\u09d0\3\2\2\2\u09ce"+
		"\u09cc\3\2\2\2\u09ce\u09cf\3\2\2\2\u09cf\u09d1\3\2\2\2\u09d0\u09ce\3\2"+
		"\2\2\u09d1\u09d2\7\u01c4\2\2\u09d2\u09d7\3\2\2\2\u09d3\u09d4\7\u0171\2"+
		"\2\u09d4\u09d5\7p\2\2\u09d5\u09d7\7\u019c\2\2\u09d6\u09be\3\2\2\2\u09d6"+
		"\u09c0\3\2\2\2\u09d6\u09c2\3\2\2\2\u09d6\u09c4\3\2\2\2\u09d6\u09c6\3\2"+
		"\2\2\u09d6\u09d3\3\2\2\2\u09d7\u00c7\3\2\2\2\u09d8\u09dc\7\u01ab\2\2\u09d9"+
		"\u09dd\7\u019c\2\2\u09da\u09db\7\u01b2\2\2\u09db\u09dd\5\u012c\u0097\2"+
		"\u09dc\u09d9\3\2\2\2\u09dc\u09da\3\2\2\2\u09dd\u00c9\3\2\2\2\u09de\u09e3"+
		"\5\u00ccg\2\u09df\u09e0\7\u01c5\2\2\u09e0\u09e2\5\u00ccg\2\u09e1\u09df"+
		"\3\2\2\2\u09e2\u09e5\3\2\2\2\u09e3\u09e1\3\2\2\2\u09e3\u09e4\3\2\2\2\u09e4"+
		"\u00cb\3\2\2\2\u09e5\u09e3\3\2\2\2\u09e6\u09e7\5\u0110\u0089\2\u09e7\u09e8"+
		"\7\u01be\2\2\u09e8\u09ea\3\2\2\2\u09e9\u09e6\3\2\2\2\u09e9\u09ea\3\2\2"+
		"\2\u09ea\u09ee\3\2\2\2\u09eb\u09ef\7\u01c8\2\2\u09ec\u09ed\7\u01c2\2\2"+
		"\u09ed\u09ef\t\'\2\2\u09ee\u09eb\3\2\2\2\u09ee\u09ec\3\2\2\2\u09ef\u0a00"+
		"\3\2\2\2\u09f0\u09f1\5\u00f4{\2\u09f1\u09f2\7\u01b2\2\2\u09f2\u09f3\5"+
		"\u0098M\2\u09f3\u0a00\3\2\2\2\u09f4\u09f9\5\u0098M\2\u09f5\u09f7\7\n\2"+
		"\2\u09f6\u09f5\3\2\2\2\u09f6\u09f7\3\2\2\2\u09f7\u09f8\3\2\2\2\u09f8\u09fa"+
		"\5\u00f4{\2\u09f9\u09f6\3\2\2\2\u09f9\u09fa\3\2\2\2\u09fa\u0a00\3\2\2"+
		"\2\u09fb\u09fd\5\n\6\2\u09fc\u09fe\5\u00e6t\2\u09fd\u09fc\3\2\2\2\u09fd"+
		"\u09fe\3\2\2\2\u09fe\u0a00\3\2\2\2\u09ff\u09e9\3\2\2\2\u09ff\u09f0\3\2"+
		"\2\2\u09ff\u09f4\3\2\2\2\u09ff\u09fb\3\2\2\2\u0a00\u00cd\3\2\2\2\u0a01"+
		"\u0a02\7\u0175\2\2\u0a02\u0a03\7\32\2\2\u0a03\u0a04\5\u00f8}\2\u0a04\u00cf"+
		"\3\2\2\2\u0a05\u0a0f\5\u00d2j\2\u0a06\u0a07\7\u01c3\2\2\u0a07\u0a08\5"+
		"\u00d2j\2\u0a08\u0a09\7\u01c4\2\2\u0a09\u0a0f\3\2\2\2\u0a0a\u0a0b\7\u01c3"+
		"\2\2\u0a0b\u0a0c\5\u009cO\2\u0a0c\u0a0d\7\u01c4\2\2\u0a0d\u0a0f\3\2\2"+
		"\2\u0a0e\u0a05\3\2\2\2\u0a0e\u0a06\3\2\2\2\u0a0e\u0a0a\3\2\2\2\u0a0f\u00d1"+
		"\3\2\2\2\u0a10\u0a14\5\u00d4k\2\u0a11\u0a13\5\u00d8m\2\u0a12\u0a11\3\2"+
		"\2\2\u0a13\u0a16\3\2\2\2\u0a14\u0a12\3\2\2\2\u0a14\u0a15\3\2\2\2\u0a15"+
		"\u00d3\3\2\2\2\u0a16\u0a14\3\2\2\2\u0a17\u0a19\5\u00dan\2\u0a18\u0a1a"+
		"\5\u00e6t\2\u0a19\u0a18\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a\u0a3b\3\2\2"+
		"\2\u0a1b\u0a1d\5\u00dco\2\u0a1c\u0a1e\5\u00e6t\2\u0a1d\u0a1c\3\2\2\2\u0a1d"+
		"\u0a1e\3\2\2\2\u0a1e\u0a3b\3\2\2\2\u0a1f\u0a24\5\u00e0q\2\u0a20\u0a22"+
		"\5\u00e6t\2\u0a21\u0a23\5\u00f2z\2\u0a22\u0a21\3\2\2\2\u0a22\u0a23\3\2"+
		"\2\2\u0a23\u0a25\3\2\2\2\u0a24\u0a20\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25"+
		"\u0a3b\3\2\2\2\u0a26\u0a27\5\u00d6l\2\u0a27\u0a28\5\u00e6t\2\u0a28\u0a3b"+
		"\3\2\2\2\u0a29\u0a2b\5\u00e2r\2\u0a2a\u0a2c\5\u00e6t\2\u0a2b\u0a2a\3\2"+
		"\2\2\u0a2b\u0a2c\3\2\2\2\u0a2c\u0a3b\3\2\2\2\u0a2d\u0a2f\7\u01ab\2\2\u0a2e"+
		"\u0a30\5\u00e6t\2\u0a2f\u0a2e\3\2\2\2\u0a2f\u0a30\3\2\2\2\u0a30\u0a3b"+
		"\3\2\2\2\u0a31\u0a32\7\u01ab\2\2\u0a32\u0a33\7\u01be\2\2\u0a33\u0a38\5"+
		"\u00e2r\2\u0a34\u0a36\5\u00e6t\2\u0a35\u0a37\5\u00f2z\2\u0a36\u0a35\3"+
		"\2\2\2\u0a36\u0a37\3\2\2\2\u0a37\u0a39\3\2\2\2\u0a38\u0a34\3\2\2\2\u0a38"+
		"\u0a39\3\2\2\2\u0a39\u0a3b\3\2\2\2\u0a3a\u0a17\3\2\2\2\u0a3a\u0a1b\3\2"+
		"\2\2\u0a3a\u0a1f\3\2\2\2\u0a3a\u0a26\3\2\2\2\u0a3a\u0a29\3\2\2\2\u0a3a"+
		"\u0a2d\3\2\2\2\u0a3a\u0a31\3\2\2\2\u0a3b\u00d5\3\2\2\2\u0a3c\u0a3d\7\36"+
		"\2\2\u0a3d\u0a3e\7\u01c3\2\2\u0a3e\u0a3f\7\37\2\2\u0a3f\u0a40\5\u0110"+
		"\u0089\2\u0a40\u0a41\7\u01c5\2\2\u0a41\u0a42\t(\2\2\u0a42\u0a43\7\u01c4"+
		"\2\2\u0a43\u00d7\3\2\2\2\u0a44\u0a46\7\u008d\2\2\u0a45\u0a44\3\2\2\2\u0a45"+
		"\u0a46\3\2\2\2\u0a46\u0a4c\3\2\2\2\u0a47\u0a49\t)\2\2\u0a48\u0a4a\7\u00c1"+
		"\2\2\u0a49\u0a48\3\2\2\2\u0a49\u0a4a\3\2\2\2\u0a4a\u0a4c\3\2\2\2\u0a4b"+
		"\u0a45\3\2\2\2\u0a4b\u0a47\3\2\2\2\u0a4c\u0a4e\3\2\2\2\u0a4d\u0a4f\t*"+
		"\2\2\u0a4e\u0a4d\3\2\2\2\u0a4e\u0a4f\3\2\2\2\u0a4f\u0a50\3\2\2\2\u0a50"+
		"\u0a51\7\u0097\2\2\u0a51\u0a52\5\u00d0i\2\u0a52\u0a53\7\u00b7\2\2\u0a53"+
		"\u0a54\5\u00acW\2\u0a54\u0a5f\3\2\2\2\u0a55\u0a56\7:\2\2\u0a56\u0a57\7"+
		"\u0097\2\2\u0a57\u0a5f\5\u00d0i\2\u0a58\u0a59\7:\2\2\u0a59\u0a5a\7\u012f"+
		"\2\2\u0a5a\u0a5f\5\u00d0i\2\u0a5b\u0a5c\7\u00c1\2\2\u0a5c\u0a5d\7\u012f"+
		"\2\2\u0a5d\u0a5f\5\u00d0i\2\u0a5e\u0a4b\3\2\2\2\u0a5e\u0a55\3\2\2\2\u0a5e"+
		"\u0a58\3\2\2\2\u0a5e\u0a5b\3\2\2\2\u0a5f\u00d9\3\2\2\2\u0a60\u0a62\5\u0110"+
		"\u0089\2\u0a61\u0a63\5\u00eav\2\u0a62\u0a61\3\2\2\2\u0a62\u0a63\3\2\2"+
		"\2\u0a63\u00db\3\2\2\2\u0a64\u0a65\7\u00bb\2\2\u0a65\u0a66\7\u01c3\2\2"+
		"\u0a66\u0a67\7\31\2\2\u0a67\u0a68\7\u01ae\2\2\u0a68\u0a72\7\u01c5\2\2"+
		"\u0a69\u0a6e\5\u00dep\2\u0a6a\u0a6b\7\u01c5\2\2\u0a6b\u0a6d\5\u00dep\2"+
		"\u0a6c\u0a6a\3\2\2\2\u0a6d\u0a70\3\2\2\2\u0a6e\u0a6c\3\2\2\2\u0a6e\u0a6f"+
		"\3\2\2\2\u0a6f\u0a73\3\2\2\2\u0a70\u0a6e\3\2\2\2\u0a71\u0a73\5\u0132\u009a"+
		"\2\u0a72\u0a69\3\2\2\2\u0a72\u0a71\3\2\2\2\u0a73\u0a74\3\2\2\2\u0a74\u0a75"+
		"\7\u01c4\2\2\u0a75\u00dd\3\2\2\2\u0a76\u0a77\5\u0132\u009a\2\u0a77\u0a78"+
		"\7\u01b2\2\2\u0a78\u0a79\t+\2\2\u0a79\u00df\3\2\2\2\u0a7a\u0a81\5\u009c"+
		"O\2\u0a7b\u0a7c\7\u01c3\2\2\u0a7c\u0a7d\5\u009cO\2\u0a7d\u0a7e\7\u01c4"+
		"\2\2\u0a7e\u0a81\3\2\2\2\u0a7f\u0a81\5\u00f6|\2\u0a80\u0a7a\3\2\2\2\u0a80"+
		"\u0a7b\3\2\2\2\u0a80\u0a7f\3\2\2\2\u0a81\u00e1\3\2\2\2\u0a82\u0af0\5\u00fc"+
		"\177\2\u0a83\u0af0\5\u00fe\u0080\2\u0a84\u0a85\5\u0128\u0095\2\u0a85\u0a87"+
		"\7\u01c3\2\2\u0a86\u0a88\5\u00f8}\2\u0a87\u0a86\3\2\2\2\u0a87\u0a88\3"+
		"\2\2\2\u0a88\u0a89\3\2\2\2\u0a89\u0a8a\7\u01c4\2\2\u0a8a\u0af0\3\2\2\2"+
		"\u0a8b\u0a8c\7\u0133\2\2\u0a8c\u0a8d\7\u01c3\2\2\u0a8d\u0a8e\7\u01c8\2"+
		"\2\u0a8e\u0af0\7\u01c4\2\2\u0a8f\u0a90\7\u0135\2\2\u0a90\u0a91\7\u01c3"+
		"\2\2\u0a91\u0a92\5\u0098M\2\u0a92\u0a93\7\n\2\2\u0a93\u0a94\5d\63\2\u0a94"+
		"\u0a95\7\u01c4\2\2\u0a95\u0af0\3\2\2\2\u0a96\u0a97\7\65\2\2\u0a97\u0a98"+
		"\7\u01c3\2\2\u0a98\u0a99\5d\63\2\u0a99\u0a9a\7\u01c5\2\2\u0a9a\u0a9d\5"+
		"\u0098M\2\u0a9b\u0a9c\7\u01c5\2\2\u0a9c\u0a9e\5\u0098M\2\u0a9d\u0a9b\3"+
		"\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0a9f\3\2\2\2\u0a9f\u0aa0\7\u01c4\2\2"+
		"\u0aa0\u0af0\3\2\2\2\u0aa1\u0aa2\7\u0137\2\2\u0aa2\u0aa3\7\u01c3\2\2\u0aa3"+
		"\u0aa4\7\u01c8\2\2\u0aa4\u0af0\7\u01c4\2\2\u0aa5\u0aa6\7)\2\2\u0aa6\u0aa7"+
		"\7\u01c3\2\2\u0aa7\u0aa8\5\u00f8}\2\u0aa8\u0aa9\7\u01c4\2\2\u0aa9\u0af0"+
		"\3\2\2\2\u0aaa\u0af0\7>\2\2\u0aab\u0af0\7?\2\2\u0aac\u0aad\7\u013e\2\2"+
		"\u0aad\u0aae\7\u01c3\2\2\u0aae\u0aaf\5\u00e4s\2\u0aaf\u0ab0\7\u01c5\2"+
		"\2\u0ab0\u0ab1\5\u0098M\2\u0ab1\u0ab2\7\u01c5\2\2\u0ab2\u0ab3\5\u0098"+
		"M\2\u0ab3\u0ab4\7\u01c4\2\2\u0ab4\u0af0\3\2\2\2\u0ab5\u0ab6\7\u013f\2"+
		"\2\u0ab6\u0ab7\7\u01c3\2\2\u0ab7\u0ab8\5\u00e4s\2\u0ab8\u0ab9\7\u01c5"+
		"\2\2\u0ab9\u0aba\5\u0098M\2\u0aba\u0abb\7\u01c5\2\2\u0abb\u0abc\5\u0098"+
		"M\2\u0abc\u0abd\7\u01c4\2\2\u0abd\u0af0\3\2\2\2\u0abe\u0abf\7\u0140\2"+
		"\2\u0abf\u0ac0\7\u01c3\2\2\u0ac0\u0ac1\5\u00e4s\2\u0ac1\u0ac2\7\u01c5"+
		"\2\2\u0ac2\u0ac3\5\u0098M\2\u0ac3\u0ac4\7\u01c4\2\2\u0ac4\u0af0\3\2\2"+
		"\2\u0ac5\u0ac6\7\u0141\2\2\u0ac6\u0ac7\7\u01c3\2\2\u0ac7\u0ac8\5\u00e4"+
		"s\2\u0ac8\u0ac9\7\u01c5\2\2\u0ac9\u0aca\5\u0098M\2\u0aca\u0acb\7\u01c4"+
		"\2\2\u0acb\u0af0\3\2\2\2\u0acc\u0acd\7\u0082\2\2\u0acd\u0ace\7\u01c3\2"+
		"\2\u0ace\u0ad1\5d\63\2\u0acf\u0ad0\7\u01c5\2\2\u0ad0\u0ad2\7\u01ac\2\2"+
		"\u0ad1\u0acf\3\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2\u0ad5\3\2\2\2\u0ad3\u0ad4"+
		"\7\u01c5\2\2\u0ad4\u0ad6\7\u01ac\2\2\u0ad5\u0ad3\3\2\2\2\u0ad5\u0ad6\3"+
		"\2\2\2\u0ad6\u0ad7\3\2\2\2\u0ad7\u0ad8\7\u01c4\2\2\u0ad8\u0af0\3\2\2\2"+
		"\u0ad9\u0af0\7\u0164\2\2\u0ada\u0adb\7\u0165\2\2\u0adb\u0adc\7\u01c3\2"+
		"\2\u0adc\u0add\5\u0098M\2\u0add\u0ade\7\u01c5\2\2\u0ade\u0adf\5\u0098"+
		"M\2\u0adf\u0ae0\7\u01c4\2\2\u0ae0\u0af0\3\2\2\2\u0ae1\u0ae2\7\u00b2\2"+
		"\2\u0ae2\u0ae3\7\u01c3\2\2\u0ae3\u0ae4\5\u0098M\2\u0ae4\u0ae5\7\u01c5"+
		"\2\2\u0ae5\u0ae6\5\u0098M\2\u0ae6\u0ae7\7\u01c4\2\2\u0ae7\u0af0\3\2\2"+
		"\2\u0ae8\u0af0\7\u00f0\2\2\u0ae9\u0af0\7\u00ff\2\2\u0aea\u0aeb\7;\2\2"+
		"\u0aeb\u0af0\7\u0196\2\2\u0aec\u0aed\7;\2\2\u0aed\u0af0\7C\2\2\u0aee\u0af0"+
		"\5\u008aF\2\u0aef\u0a82\3\2\2\2\u0aef\u0a83\3\2\2\2\u0aef\u0a84\3\2\2"+
		"\2\u0aef\u0a8b\3\2\2\2\u0aef\u0a8f\3\2\2\2\u0aef\u0a96\3\2\2\2\u0aef\u0aa1"+
		"\3\2\2\2\u0aef\u0aa5\3\2\2\2\u0aef\u0aaa\3\2\2\2\u0aef\u0aab\3\2\2\2\u0aef"+
		"\u0aac\3\2\2\2\u0aef\u0ab5\3\2\2\2\u0aef\u0abe\3\2\2\2\u0aef\u0ac5\3\2"+
		"\2\2\u0aef\u0acc\3\2\2\2\u0aef\u0ad9\3\2\2\2\u0aef\u0ada\3\2\2\2\u0aef"+
		"\u0ae1\3\2\2\2\u0aef\u0ae8\3\2\2\2\u0aef\u0ae9\3\2\2\2\u0aef\u0aea\3\2"+
		"\2\2\u0aef\u0aec\3\2\2\2\u0aef\u0aee\3\2\2\2\u0af0\u00e3\3\2\2\2\u0af1"+
		"\u0af2\7\u01ad\2\2\u0af2\u00e5\3\2\2\2\u0af3\u0af5\7\n\2\2\u0af4\u0af3"+
		"\3\2\2\2\u0af4\u0af5\3\2\2\2\u0af5\u0af6\3\2\2\2\u0af6\u0af7\5\u00e8u"+
		"\2\u0af7\u00e7\3\2\2\2\u0af8\u0afa\5\u0132\u009a\2\u0af9\u0afb\5\u00ea"+
		"v\2\u0afa\u0af9\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u00e9\3\2\2\2\u0afc"+
		"\u0afe\7\u012a\2\2\u0afd\u0afc\3\2\2\2\u0afd\u0afe\3\2\2\2\u0afe\u0aff"+
		"\3\2\2\2\u0aff\u0b00\7\u01c3\2\2\u0b00\u0b05\5\u00ecw\2\u0b01\u0b02\7"+
		"\u01c5\2\2\u0b02\u0b04\5\u00ecw\2\u0b03\u0b01\3\2\2\2\u0b04\u0b07\3\2"+
		"\2\2\u0b05\u0b03\3\2\2\2\u0b05\u0b06\3\2\2\2\u0b06\u0b08\3\2\2\2\u0b07"+
		"\u0b05\3\2\2\2\u0b08\u0b09\7\u01c4\2\2\u0b09\u00eb\3\2\2\2\u0b0a\u0b0c"+
		"\7\u016a\2\2\u0b0b\u0b0a\3\2\2\2\u0b0b\u0b0c\3\2\2\2\u0b0c\u0b33\3\2\2"+
		"\2\u0b0d\u0b0e\7\u008c\2\2\u0b0e\u0b0f\7\u01c3\2\2\u0b0f\u0b14\5\u00f0"+
		"y\2\u0b10\u0b11\7\u01c5\2\2\u0b11\u0b13\5\u00f0y\2\u0b12\u0b10\3\2\2\2"+
		"\u0b13\u0b16\3\2\2\2\u0b14\u0b12\3\2\2\2\u0b14\u0b15\3\2\2\2\u0b15\u0b17"+
		"\3\2\2\2\u0b16\u0b14\3\2\2\2\u0b17\u0b18\7\u01c4\2\2\u0b18\u0b34\3\2\2"+
		"\2\u0b19\u0b1a\7\u008c\2\2\u0b1a\u0b1b\7\u01b2\2\2\u0b1b\u0b34\5\u00f0"+
		"y\2\u0b1c\u0b2b\7q\2\2\u0b1d\u0b1e\7\u01c3\2\2\u0b1e\u0b1f\5\u00f0y\2"+
		"\u0b1f\u0b20\7\u01c3\2\2\u0b20\u0b25\5\u00eex\2\u0b21\u0b22\7\u01c5\2"+
		"\2\u0b22\u0b24\5\u00eex\2\u0b23\u0b21\3\2\2\2\u0b24\u0b27\3\2\2\2\u0b25"+
		"\u0b23\3\2\2\2\u0b25\u0b26\3\2\2\2\u0b26\u0b28\3\2\2\2\u0b27\u0b25\3\2"+
		"\2\2\u0b28\u0b29\7\u01c4\2\2\u0b29\u0b2a\7\u01c4\2\2\u0b2a\u0b2c\3\2\2"+
		"\2\u0b2b\u0b1d\3\2\2\2\u0b2b\u0b2c\3\2\2\2\u0b2c\u0b34\3\2\2\2\u0b2d\u0b34"+
		"\7\u018b\2\2\u0b2e\u0b34\7\u018c\2\2\u0b2f\u0b30\7\u018d\2\2\u0b30\u0b31"+
		"\7\u01b2\2\2\u0b31\u0b34\7\u01ac\2\2\u0b32\u0b34\7\u01ad\2\2\u0b33\u0b0d"+
		"\3\2\2\2\u0b33\u0b19\3\2\2\2\u0b33\u0b1c\3\2\2\2\u0b33\u0b2d\3\2\2\2\u0b33"+
		"\u0b2e\3\2\2\2\u0b33\u0b2f\3\2\2\2\u0b33\u0b32\3\2\2\2\u0b33\u0b34\3\2"+
		"\2\2\u0b34\u00ed\3\2\2\2\u0b35\u0b36\7\u01ad\2\2\u0b36\u00ef\3\2\2\2\u0b37"+
		"\u0b38\t,\2\2\u0b38\u00f1\3\2\2\2\u0b39\u0b3a\7\u01c3\2\2\u0b3a\u0b3f"+
		"\5\u00f4{\2\u0b3b\u0b3c\7\u01c5\2\2\u0b3c\u0b3e\5\u00f4{\2\u0b3d\u0b3b"+
		"\3\2\2\2\u0b3e\u0b41\3\2\2\2\u0b3f\u0b3d\3\2\2\2\u0b3f\u0b40\3\2\2\2\u0b40"+
		"\u0b42\3\2\2\2\u0b41\u0b3f\3\2\2\2\u0b42\u0b43\7\u01c4\2\2\u0b43\u00f3"+
		"\3\2\2\2\u0b44\u0b47\5\u0132\u009a\2\u0b45\u0b47\7\u01ae\2\2\u0b46\u0b44"+
		"\3\2\2\2\u0b46\u0b45\3\2\2\2\u0b47\u00f5\3\2\2\2\u0b48\u0b49\7\u011e\2"+
		"\2\u0b49\u0b4a\7\u01c3\2\2\u0b4a\u0b4b\5\u00f8}\2\u0b4b\u0b53\7\u01c4"+
		"\2\2\u0b4c\u0b4d\7\u01c5\2\2\u0b4d\u0b4e\7\u01c3\2\2\u0b4e\u0b4f\5\u00f8"+
		"}\2\u0b4f\u0b50\7\u01c4\2\2\u0b50\u0b52\3\2\2\2\u0b51\u0b4c\3\2\2\2\u0b52"+
		"\u0b55\3\2\2\2\u0b53\u0b51\3\2\2\2\u0b53\u0b54\3\2\2\2\u0b54\u00f7\3\2"+
		"\2\2\u0b55\u0b53\3\2\2\2\u0b56\u0b5b\5\u0098M\2\u0b57\u0b58\7\u01c5\2"+
		"\2\u0b58\u0b5a\5\u0098M\2\u0b59\u0b57\3\2\2\2\u0b5a\u0b5d\3\2\2\2\u0b5b"+
		"\u0b59\3\2\2\2\u0b5b\u0b5c\3\2\2\2\u0b5c\u00f9\3\2\2\2\u0b5d\u0b5b\3\2"+
		"\2\2\u0b5e\u0b5f\7\35\2\2\u0b5f\u0b65\5\u0098M\2\u0b60\u0b61\7\u0126\2"+
		"\2\u0b61\u0b62\5\u0098M\2\u0b62\u0b63\7\u0105\2\2\u0b63\u0b64\5\u0098"+
		"M\2\u0b64\u0b66\3\2\2\2\u0b65\u0b60\3\2\2\2\u0b66\u0b67\3\2\2\2\u0b67"+
		"\u0b65\3\2\2\2\u0b67\u0b68\3\2\2\2\u0b68\u0b6b\3\2\2\2\u0b69\u0b6a\7["+
		"\2\2\u0b6a\u0b6c\5\u0098M\2\u0b6b\u0b69\3\2\2\2\u0b6b\u0b6c\3\2\2\2\u0b6c"+
		"\u0b6d\3\2\2\2\u0b6d\u0b6e\7^\2\2\u0b6e\u0b80\3\2\2\2\u0b6f\u0b75\7\35"+
		"\2\2\u0b70\u0b71\7\u0126\2\2\u0b71\u0b72\5\u00acW\2\u0b72\u0b73\7\u0105"+
		"\2\2\u0b73\u0b74\5\u0098M\2\u0b74\u0b76\3\2\2\2\u0b75\u0b70\3\2\2\2\u0b76"+
		"\u0b77\3\2\2\2\u0b77\u0b75\3\2\2\2\u0b77\u0b78\3\2\2\2\u0b78\u0b7b\3\2"+
		"\2\2\u0b79\u0b7a\7[\2\2\u0b7a\u0b7c\5\u0098M\2\u0b7b\u0b79\3\2\2\2\u0b7b"+
		"\u0b7c\3\2\2\2\u0b7c\u0b7d\3\2\2\2\u0b7d\u0b7e\7^\2\2\u0b7e\u0b80\3\2"+
		"\2\2\u0b7f\u0b5e\3\2\2\2\u0b7f\u0b6f\3\2\2\2\u0b80\u00fb\3\2\2\2\u0b81"+
		"\u0b82\7\u017a\2\2\u0b82\u0b83\7\u01c3\2\2\u0b83\u0b84\7\u01c4\2\2\u0b84"+
		"\u0b94\5\u0102\u0082\2\u0b85\u0b86\7\u0144\2\2\u0b86\u0b87\7\u01c3\2\2"+
		"\u0b87\u0b88\7\u01c4\2\2\u0b88\u0b94\5\u0102\u0082\2\u0b89\u0b8a\7\u016c"+
		"\2\2\u0b8a\u0b8b\7\u01c3\2\2\u0b8b\u0b8c\5\u0098M\2\u0b8c\u0b8d\7\u01c4"+
		"\2\2\u0b8d\u0b8e\5\u0102\u0082\2\u0b8e\u0b94\3\2\2\2\u0b8f\u0b90\7\u0185"+
		"\2\2\u0b90\u0b91\7\u01c3\2\2\u0b91\u0b92\7\u01c4\2\2\u0b92\u0b94\5\u0102"+
		"\u0082\2\u0b93\u0b81\3\2\2\2\u0b93\u0b85\3\2\2\2\u0b93\u0b89\3\2\2\2\u0b93"+
		"\u0b8f\3\2\2\2\u0b94\u00fd\3\2\2\2\u0b95\u0b96\7\u0131\2\2\u0b96\u0b97"+
		"\7\u01c3\2\2\u0b97\u0b98\5\u0100\u0081\2\u0b98\u0b9a\7\u01c4\2\2\u0b99"+
		"\u0b9b\5\u0102\u0082\2\u0b9a\u0b99\3\2\2\2\u0b9a\u0b9b\3\2\2\2\u0b9b\u0bf1"+
		"\3\2\2\2\u0b9c\u0b9d\7\u0138\2\2\u0b9d\u0b9e\7\u01c3\2\2\u0b9e\u0b9f\5"+
		"\u0100\u0081\2\u0b9f\u0ba0\7\u01c4\2\2\u0ba0\u0bf1\3\2\2\2\u0ba1\u0ba2"+
		"\7\u0152\2\2\u0ba2\u0ba3\7\u01c3\2\2\u0ba3\u0ba4\5\u0098M\2\u0ba4\u0ba5"+
		"\7\u01c4\2\2\u0ba5\u0bf1\3\2\2\2\u0ba6\u0ba7\7\u0153\2\2\u0ba7\u0ba8\7"+
		"\u01c3\2\2\u0ba8\u0ba9\5\u00f8}\2\u0ba9\u0baa\7\u01c4\2\2\u0baa\u0bf1"+
		"\3\2\2\2\u0bab\u0bac\7\u0162\2\2\u0bac\u0bad\7\u01c3\2\2\u0bad\u0bae\5"+
		"\u0100\u0081\2\u0bae\u0bb0\7\u01c4\2\2\u0baf\u0bb1\5\u0102\u0082\2\u0bb0"+
		"\u0baf\3\2\2\2\u0bb0\u0bb1\3\2\2\2\u0bb1\u0bf1\3\2\2\2\u0bb2\u0bb3\7\u0163"+
		"\2\2\u0bb3\u0bb4\7\u01c3\2\2\u0bb4\u0bb5\5\u0100\u0081\2\u0bb5\u0bb7\7"+
		"\u01c4\2\2\u0bb6\u0bb8\5\u0102\u0082\2\u0bb7\u0bb6\3\2\2\2\u0bb7\u0bb8"+
		"\3\2\2\2\u0bb8\u0bf1\3\2\2\2\u0bb9\u0bba\7\u0192\2\2\u0bba\u0bbb\7\u01c3"+
		"\2\2\u0bbb\u0bbc\5\u0100\u0081\2\u0bbc\u0bbe\7\u01c4\2\2\u0bbd\u0bbf\5"+
		"\u0102\u0082\2\u0bbe\u0bbd\3\2\2\2\u0bbe\u0bbf\3\2\2\2\u0bbf\u0bf1\3\2"+
		"\2\2\u0bc0\u0bc1\7\u0190\2\2\u0bc1\u0bc2\7\u01c3\2\2\u0bc2\u0bc3\5\u0100"+
		"\u0081\2\u0bc3\u0bc5\7\u01c4\2\2\u0bc4\u0bc6\5\u0102\u0082\2\u0bc5\u0bc4"+
		"\3\2\2\2\u0bc5\u0bc6\3\2\2\2\u0bc6\u0bf1\3\2\2\2\u0bc7\u0bc8\7\u0191\2"+
		"\2\u0bc8\u0bc9\7\u01c3\2\2\u0bc9\u0bca\5\u0100\u0081\2\u0bca\u0bcc\7\u01c4"+
		"\2\2\u0bcb\u0bcd\5\u0102\u0082\2\u0bcc\u0bcb\3\2\2\2\u0bcc\u0bcd\3\2\2"+
		"\2\u0bcd\u0bf1\3\2\2\2\u0bce\u0bcf\7\u019e\2\2\u0bcf\u0bd0\7\u01c3\2\2"+
		"\u0bd0\u0bd1\5\u0100\u0081\2\u0bd1\u0bd3\7\u01c4\2\2\u0bd2\u0bd4\5\u0102"+
		"\u0082\2\u0bd3\u0bd2\3\2\2\2\u0bd3\u0bd4\3\2\2\2\u0bd4\u0bf1\3\2\2\2\u0bd5"+
		"\u0bd6\7\u019f\2\2\u0bd6\u0bd7\7\u01c3\2\2\u0bd7\u0bd8\5\u0100\u0081\2"+
		"\u0bd8\u0bda\7\u01c4\2\2\u0bd9\u0bdb\5\u0102\u0082\2\u0bda\u0bd9\3\2\2"+
		"\2\u0bda\u0bdb\3\2\2\2\u0bdb\u0bf1\3\2\2\2\u0bdc\u0bdd\7\u013c\2\2\u0bdd"+
		"\u0be0\7\u01c3\2\2\u0bde\u0be1\7\u01c8\2\2\u0bdf\u0be1\5\u0100\u0081\2"+
		"\u0be0\u0bde\3\2\2\2\u0be0\u0bdf\3\2\2\2\u0be1\u0be2\3\2\2\2\u0be2\u0be4"+
		"\7\u01c4\2\2\u0be3\u0be5\5\u0102\u0082\2\u0be4\u0be3\3\2\2\2\u0be4\u0be5"+
		"\3\2\2\2\u0be5\u0bf1\3\2\2\2\u0be6\u0be7\7\u013d\2\2\u0be7\u0bea\7\u01c3"+
		"\2\2\u0be8\u0beb\7\u01c8\2\2\u0be9\u0beb\5\u0100\u0081\2\u0bea\u0be8\3"+
		"\2\2\2\u0bea\u0be9\3\2\2\2\u0beb\u0bec\3\2\2\2\u0bec\u0bee\7\u01c4\2\2"+
		"\u0bed\u0bef\5\u0102\u0082\2\u0bee\u0bed\3\2\2\2\u0bee\u0bef\3\2\2\2\u0bef"+
		"\u0bf1\3\2\2\2\u0bf0\u0b95\3\2\2\2\u0bf0\u0b9c\3\2\2\2\u0bf0\u0ba1\3\2"+
		"\2\2\u0bf0\u0ba6\3\2\2\2\u0bf0\u0bab\3\2\2\2\u0bf0\u0bb2\3\2\2\2\u0bf0"+
		"\u0bb9\3\2\2\2\u0bf0\u0bc0\3\2\2\2\u0bf0\u0bc7\3\2\2\2\u0bf0\u0bce\3\2"+
		"\2\2\u0bf0\u0bd5\3\2\2\2\u0bf0\u0bdc\3\2\2\2\u0bf0\u0be6\3\2\2\2\u0bf1"+
		"\u00ff\3\2\2\2\u0bf2\u0bf4\t!\2\2\u0bf3\u0bf2\3\2\2\2\u0bf3\u0bf4\3\2"+
		"\2\2\u0bf4\u0bf5\3\2\2\2\u0bf5\u0bf6\5\u0098M\2\u0bf6\u0101\3\2\2\2\u0bf7"+
		"\u0bf8\7\u00c2\2\2\u0bf8\u0bfa\7\u01c3\2\2\u0bf9\u0bfb\5\u00ceh\2\u0bfa"+
		"\u0bf9\3\2\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u0bfd\3\2\2\2\u0bfc\u0bfe\5\u00ba"+
		"^\2\u0bfd\u0bfc\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u0c00\3\2\2\2\u0bff"+
		"\u0c01\5\u0104\u0083\2\u0c00\u0bff\3\2\2\2\u0c00\u0c01\3\2\2\2\u0c01\u0c02"+
		"\3\2\2\2\u0c02\u0c03\7\u01c4\2\2\u0c03\u0103\3\2\2\2\u0c04\u0c05\t-\2"+
		"\2\u0c05\u0c06\5\u0106\u0084\2\u0c06\u0105\3\2\2\2\u0c07\u0c0e\5\u010a"+
		"\u0086\2\u0c08\u0c09\7\21\2\2\u0c09\u0c0a\5\u0108\u0085\2\u0c0a\u0c0b"+
		"\7\7\2\2\u0c0b\u0c0c\5\u0108\u0085\2\u0c0c\u0c0e\3\2\2\2\u0c0d\u0c07\3"+
		"\2\2\2\u0c0d\u0c08\3\2\2\2\u0c0e\u0107\3\2\2\2\u0c0f\u0c12\5\u010a\u0086"+
		"\2\u0c10\u0c12\5\u010c\u0087\2\u0c11\u0c0f\3\2\2\2\u0c11\u0c10\3\2\2\2"+
		"\u0c12\u0109\3\2\2\2\u0c13\u0c14\7\u019a\2\2\u0c14\u0c1a\7\u0177\2\2\u0c15"+
		"\u0c16\7\u01ac\2\2\u0c16\u0c1a\7\u0177\2\2\u0c17\u0c18\7;\2\2\u0c18\u0c1a"+
		"\7\u0182\2\2\u0c19\u0c13\3\2\2\2\u0c19\u0c15\3\2\2\2\u0c19\u0c17\3\2\2"+
		"\2\u0c1a\u010b\3\2\2\2\u0c1b\u0c1c\7\u019a\2\2\u0c1c\u0c20\7\u014d\2\2"+
		"\u0c1d\u0c1e\7\u01ac\2\2\u0c1e\u0c20\7\u014d\2\2\u0c1f\u0c1b\3\2\2\2\u0c1f"+
		"\u0c1d\3\2\2\2\u0c20\u010d\3\2\2\2\u0c21\u0c22\5\u0132\u009a\2\u0c22\u0c23"+
		"\7\u01be\2\2\u0c23\u0c24\5\u0132\u009a\2\u0c24\u0c25\7\u01be\2\2\u0c25"+
		"\u0c26\5\u0132\u009a\2\u0c26\u0c27\7\u01be\2\2\u0c27\u0c33\3\2\2\2\u0c28"+
		"\u0c29\5\u0132\u009a\2\u0c29\u0c2b\7\u01be\2\2\u0c2a\u0c2c\5\u0132\u009a"+
		"\2\u0c2b\u0c2a\3\2\2\2\u0c2b\u0c2c\3\2\2\2\u0c2c\u0c2d\3\2\2\2\u0c2d\u0c2e"+
		"\7\u01be\2\2\u0c2e\u0c33\3\2\2\2\u0c2f\u0c30\5\u0132\u009a\2\u0c30\u0c31"+
		"\7\u01be\2\2\u0c31\u0c33\3\2\2\2\u0c32\u0c21\3\2\2\2\u0c32\u0c28\3\2\2"+
		"\2\u0c32\u0c2f\3\2\2\2\u0c32\u0c33\3\2\2\2\u0c33\u0c34\3\2\2\2\u0c34\u0c35"+
		"\5\u0132\u009a\2\u0c35\u010f\3\2\2\2\u0c36\u0c37\5\u0132\u009a\2\u0c37"+
		"\u0c39\7\u01be\2\2\u0c38\u0c3a\5\u0132\u009a\2\u0c39\u0c38\3\2\2\2\u0c39"+
		"\u0c3a\3\2\2\2\u0c3a\u0c3b\3\2\2\2\u0c3b\u0c3c\7\u01be\2\2\u0c3c\u0c41"+
		"\3\2\2\2\u0c3d\u0c3e\5\u0132\u009a\2\u0c3e\u0c3f\7\u01be\2\2\u0c3f\u0c41"+
		"\3\2\2\2\u0c40\u0c36\3\2\2\2\u0c40\u0c3d\3\2\2\2\u0c40\u0c41\3\2\2\2\u0c41"+
		"\u0c42\3\2\2\2\u0c42\u0c43\5\u0132\u009a\2\u0c43\u0111\3\2\2\2\u0c44\u0c45"+
		"\5\u0132\u009a\2\u0c45\u0c47\7\u01be\2\2\u0c46\u0c48\5\u0132\u009a\2\u0c47"+
		"\u0c46\3\2\2\2\u0c47\u0c48\3\2\2\2\u0c48\u0c49\3\2\2\2\u0c49\u0c4a\7\u01be"+
		"\2\2\u0c4a\u0c4f\3\2\2\2\u0c4b\u0c4c\5\u0132\u009a\2\u0c4c\u0c4d\7\u01be"+
		"\2\2\u0c4d\u0c4f\3\2\2\2\u0c4e\u0c44\3\2\2\2\u0c4e\u0c4b\3\2\2\2\u0c4e"+
		"\u0c4f\3\2\2\2\u0c4f\u0c50\3\2\2\2\u0c50\u0c51\5\u0132\u009a\2\u0c51\u0113"+
		"\3\2\2\2\u0c52\u0c53\5\u0132\u009a\2\u0c53\u0c54\7\u01be\2\2\u0c54\u0c56"+
		"\3\2\2\2\u0c55\u0c52\3\2\2\2\u0c55\u0c56\3\2\2\2\u0c56\u0c57\3\2\2\2\u0c57"+
		"\u0c58\5\u0132\u009a\2\u0c58\u0115\3\2\2\2\u0c59\u0c5a\5\u0132\u009a\2"+
		"\u0c5a\u0c5c\7\u01be\2\2\u0c5b\u0c5d\5\u0132\u009a\2\u0c5c\u0c5b\3\2\2"+
		"\2\u0c5c\u0c5d\3\2\2\2\u0c5d\u0c5e\3\2\2\2\u0c5e\u0c5f\7\u01be\2\2\u0c5f"+
		"\u0c64\3\2\2\2\u0c60\u0c61\5\u0132\u009a\2\u0c61\u0c62\7\u01be\2\2\u0c62"+
		"\u0c64\3\2\2\2\u0c63\u0c59\3\2\2\2\u0c63\u0c60\3\2\2\2\u0c63\u0c64\3\2"+
		"\2\2\u0c64\u0c65\3\2\2\2\u0c65\u0c66\5\u0132\u009a\2\u0c66\u0117\3\2\2"+
		"\2\u0c67\u0c6a\5\u010e\u0088\2\u0c68\u0c6a\7\u01ab\2\2\u0c69\u0c67\3\2"+
		"\2\2\u0c69\u0c68\3\2\2\2\u0c6a\u0119\3\2\2\2\u0c6b\u0c6c\5\u0110\u0089"+
		"\2\u0c6c\u0c6d\7\u01be\2\2\u0c6d\u0c6f\3\2\2\2\u0c6e\u0c6b\3\2\2\2\u0c6e"+
		"\u0c6f\3\2\2\2\u0c6f\u0c70\3\2\2\2\u0c70\u0c71\5\u011e\u0090\2\u0c71\u011b"+
		"\3\2\2\2\u0c72\u0c77\5\u011e\u0090\2\u0c73\u0c74\7\u01c5\2\2\u0c74\u0c76"+
		"\5\u011e\u0090\2\u0c75\u0c73\3\2\2\2\u0c76\u0c79\3\2\2\2\u0c77\u0c75\3"+
		"\2\2\2\u0c77\u0c78\3\2\2\2\u0c78\u011d\3\2\2\2\u0c79\u0c77\3\2\2\2\u0c7a"+
		"\u0c7b\5\u0132\u009a\2\u0c7b\u011f\3\2\2\2\u0c7c\u0c7f\5\u0132\u009a\2"+
		"\u0c7d\u0c7f\7\u01ab\2\2\u0c7e\u0c7c\3\2\2\2\u0c7e\u0c7d\3\2\2\2\u0c7f"+
		"\u0121\3\2\2\2\u0c80\u0c81\t\6\2\2\u0c81\u0123\3\2\2\2\u0c82\u0c83\t."+
		"\2\2\u0c83\u0125\3\2\2\2\u0c84\u0c86\7\u00ac\2\2\u0c85\u0c84\3\2\2\2\u0c85"+
		"\u0c86\3\2\2\2\u0c86\u0c87\3\2\2\2\u0c87\u0c88\7\u00b1\2\2\u0c88\u0127"+
		"\3\2\2\2\u0c89\u0c8f\5\u0116\u008c\2\u0c8a\u0c8f\7\u00e2\2\2\u0c8b\u0c8f"+
		"\7\u009a\2\2\u0c8c\u0c8f\7\u0133\2\2\u0c8d\u0c8f\7\u0137\2\2\u0c8e\u0c89"+
		"\3\2\2\2\u0c8e\u0c8a\3\2\2\2\u0c8e\u0c8b\3\2\2\2\u0c8e\u0c8c\3\2\2\2\u0c8e"+
		"\u0c8d\3\2\2\2\u0c8f\u0129\3\2\2\2\u0c90\u0c93\7\u00b1\2\2\u0c91\u0c93"+
		"\5\u012c\u0097\2\u0c92\u0c90\3\2\2\2\u0c92\u0c91\3\2\2\2\u0c93\u012b\3"+
		"\2\2\2\u0c94\u0ca1\7\u01ae\2\2\u0c95\u0ca1\7\u01af\2\2\u0c96\u0ca1\5\u012e"+
		"\u0098\2\u0c97\u0c99\5\u0130\u0099\2\u0c98\u0c97\3\2\2\2\u0c98\u0c99\3"+
		"\2\2\2\u0c99\u0c9a\3\2\2\2\u0c9a\u0ca1\t/\2\2\u0c9b\u0c9d\5\u0130\u0099"+
		"\2\u0c9c\u0c9b\3\2\2\2\u0c9c\u0c9d\3\2\2\2\u0c9d\u0c9e\3\2\2\2\u0c9e\u0c9f"+
		"\7\u01c2\2\2\u0c9f\u0ca1\t\60\2\2\u0ca0\u0c94\3\2\2\2\u0ca0\u0c95\3\2"+
		"\2\2\u0ca0\u0c96\3\2\2\2\u0ca0\u0c98\3\2\2\2\u0ca0\u0c9c\3\2\2\2\u0ca1"+
		"\u012d\3\2\2\2\u0ca2\u0ca4\5\u0130\u0099\2\u0ca3\u0ca2\3\2\2\2\u0ca3\u0ca4"+
		"\3\2\2\2\u0ca4\u0ca5\3\2\2\2\u0ca5\u0ca6\7\u01ac\2\2\u0ca6\u012f\3\2\2"+
		"\2\u0ca7\u0ca8\t\35\2\2\u0ca8\u0131\3\2\2\2\u0ca9\u0cad\5\u0134\u009b"+
		"\2\u0caa\u0cad\7\u01a9\2\2\u0cab\u0cad\7\u01aa\2\2\u0cac\u0ca9\3\2\2\2"+
		"\u0cac\u0caa\3\2\2\2\u0cac\u0cab\3\2\2\2\u0cad\u0133\3\2\2\2\u0cae\u0caf"+
		"\t\61\2\2\u0caf\u0135\3\2\2\2\u0cb0\u0cc0\7\u01b2\2\2\u0cb1\u0cc0\7\u01b3"+
		"\2\2\u0cb2\u0cc0\7\u01b4\2\2\u0cb3\u0cb4\7\u01b4\2\2\u0cb4\u0cc0\7\u01b2"+
		"\2\2\u0cb5\u0cb6\7\u01b3\2\2\u0cb6\u0cc0\7\u01b2\2\2\u0cb7\u0cb8\7\u01b4"+
		"\2\2\u0cb8\u0cc0\7\u01b3\2\2\u0cb9\u0cba\7\u01b5\2\2\u0cba\u0cc0\7\u01b2"+
		"\2\2\u0cbb\u0cbc\7\u01b5\2\2\u0cbc\u0cc0\7\u01b3\2\2\u0cbd\u0cbe\7\u01b5"+
		"\2\2\u0cbe\u0cc0\7\u01b4\2\2\u0cbf\u0cb0\3\2\2\2\u0cbf\u0cb1\3\2\2\2\u0cbf"+
		"\u0cb2\3\2\2\2\u0cbf\u0cb3\3\2\2\2\u0cbf\u0cb5\3\2\2\2\u0cbf\u0cb7\3\2"+
		"\2\2\u0cbf\u0cb9\3\2\2\2\u0cbf\u0cbb\3\2\2\2\u0cbf\u0cbd\3\2\2\2\u0cc0"+
		"\u0137\3\2\2\2\u0cc1\u0cc2\t\62\2\2\u0cc2\u0139\3\2\2\2\u01ce\u013d\u0146"+
		"\u014c\u015b\u0161\u0166\u016e\u0175\u0182\u0188\u018e\u0191\u0193\u0198"+
		"\u019b\u019f\u01a2\u01a8\u01b3\u01b8\u01be\u01c1\u01ca\u01d1\u01d5\u01d7"+
		"\u01df\u01e4\u01e8\u01ea\u01ef\u01f4\u01fc\u0201\u0206\u020a\u020f\u0213"+
		"\u0217\u021c\u0221\u0229\u022d\u022f\u023e\u0241\u0249\u024b\u024e\u0254"+
		"\u0257\u025f\u0262\u0269\u026d\u026f\u0271\u0274\u0277\u027a\u027d\u0281"+
		"\u0285\u028b\u028e\u0291\u0295\u0298\u02a5\u02ae\u02b1\u02b4\u02b7\u02ba"+
		"\u02bd\u02c1\u02c4\u02c7\u02ca\u02cd\u02d5\u02d7\u02db\u02de\u02e6\u02ea"+
		"\u02f2\u02f5\u02fc\u0300\u0302\u0304\u0307\u030a\u030d\u0313\u0316\u031a"+
		"\u031f\u0324\u0329\u032b\u0332\u0334\u0338\u0349\u0355\u0365\u0368\u036e"+
		"\u037e\u0389\u0398\u039a\u039e\u03a1\u03ab\u03b3\u03b8\u03bf\u03c2\u03c5"+
		"\u03cc\u03d1\u03d6\u03e5\u03f8\u03fc\u0400\u0402\u0405\u040d\u0412\u0416"+
		"\u041e\u0421\u042c\u0431\u0439\u043c\u0443\u0446\u0454\u045b\u045d\u0466"+
		"\u046d\u0477\u047a\u047f\u0485\u0489\u048f\u0493\u049a\u04a3\u04a7\u04ad"+
		"\u04b4\u04b8\u04be\u04c2\u04d3\u04d7\u04df\u04e3\u04e7\u04ea\u04f7\u04ff"+
		"\u0503\u0506\u050a\u050e\u0512\u0516\u051c\u0520\u0522\u0526\u052a\u0532"+
		"\u0535\u0538\u053c\u0544\u0549\u054e\u0551\u0553\u0557\u055c\u0560\u0568"+
		"\u056d\u0574\u0577\u057e\u0581\u0587\u058c\u058e\u0591\u0597\u059d\u059f"+
		"\u05a2\u05a6\u05a9\u05af\u05b2\u05b6\u05b9\u05bf\u05c2\u05c4\u05c8\u05cd"+
		"\u05d0\u05d8\u05df\u05e8\u05ef\u05f7\u05fe\u0605\u060e\u0617\u061e\u0636"+
		"\u063f\u0648\u0651\u0658\u0665\u066c\u0672\u0677\u067b\u0680\u0685\u068c"+
		"\u0692\u0695\u0699\u069e\u06a1\u06a4\u06a7\u06ac\u06af\u06b1\u06b5\u06bd"+
		"\u06c2\u06d1\u06d5\u06da\u06dd\u06e3\u06e7\u06ed\u06f3\u06fc\u0707\u0715"+
		"\u0718\u0738\u073d\u0741\u0748\u0768\u077b\u0781\u0785\u078f\u0793\u0796"+
		"\u0799\u079d\u079f\u07a2\u07ad\u07c4\u07cb\u07d1\u07d6\u07d9\u07e4\u07e6"+
		"\u07e9\u07f3\u07f5\u07f8\u07fa\u07fd\u0800\u0803\u0806\u0809\u0817\u081a"+
		"\u081d\u0826\u0829\u082c\u0834\u0837\u0845\u0848\u084c\u084f\u0856\u0858"+
		"\u086e\u0881\u0883\u088f\u0898\u089f\u08a7\u08b0\u08b4\u08be\u08c4\u08c9"+
		"\u08d0\u08d8\u08e0\u08e4\u08fa\u0903\u0909\u090f\u0915\u0924\u092b\u0930"+
		"\u0935\u0939\u0942\u0944\u0948\u094d\u0951\u0953\u0958\u0960\u0963\u0967"+
		"\u0970\u0973\u0977\u0980\u098c\u098e\u0996\u099e\u09a1\u09a3\u09aa\u09ae"+
		"\u09b9\u09ce\u09d6\u09dc\u09e3\u09e9\u09ee\u09f6\u09f9\u09fd\u09ff\u0a0e"+
		"\u0a14\u0a19\u0a1d\u0a22\u0a24\u0a2b\u0a2f\u0a36\u0a38\u0a3a\u0a45\u0a49"+
		"\u0a4b\u0a4e\u0a5e\u0a62\u0a6e\u0a72\u0a80\u0a87\u0a9d\u0ad1\u0ad5\u0aef"+
		"\u0af4\u0afa\u0afd\u0b05\u0b0b\u0b14\u0b25\u0b2b\u0b33\u0b3f\u0b46\u0b53"+
		"\u0b5b\u0b67\u0b6b\u0b77\u0b7b\u0b7f\u0b93\u0b9a\u0bb0\u0bb7\u0bbe\u0bc5"+
		"\u0bcc\u0bd3\u0bda\u0be0\u0be4\u0bea\u0bee\u0bf0\u0bf3\u0bfa\u0bfd\u0c00"+
		"\u0c0d\u0c11\u0c19\u0c1f\u0c2b\u0c32\u0c39\u0c40\u0c47\u0c4e\u0c55\u0c5c"+
		"\u0c63\u0c69\u0c6e\u0c77\u0c7e\u0c85\u0c8e\u0c92\u0c98\u0c9c\u0ca0\u0ca3"+
		"\u0cac\u0cbf";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		ATNSimulator.deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}